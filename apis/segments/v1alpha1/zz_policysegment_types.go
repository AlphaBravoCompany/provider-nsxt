/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DHCPV4ConfigDHCPGenericOptionObservation struct {

	// DHCP option code, [0-255]
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// DHCP option values
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type DHCPV4ConfigDHCPGenericOptionParameters struct {

	// DHCP option code, [0-255]
	// +kubebuilder:validation:Required
	Code *float64 `json:"code" tf:"code,omitempty"`

	// DHCP option values
	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type DHCPV4ConfigDHCPOption121Observation struct {

	// Destination in cidr
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Next hop IP
	NextHop *string `json:"nextHop,omitempty" tf:"next_hop,omitempty"`
}

type DHCPV4ConfigDHCPOption121Parameters struct {

	// Destination in cidr
	// +kubebuilder:validation:Required
	Network *string `json:"network" tf:"network,omitempty"`

	// Next hop IP
	// +kubebuilder:validation:Required
	NextHop *string `json:"nextHop" tf:"next_hop,omitempty"`
}

type DHCPV6ConfigExcludedRangeObservation struct {

	// The end IP Address for the range
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// The start IP Address for the range
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type DHCPV6ConfigExcludedRangeParameters struct {

	// The end IP Address for the range
	// +kubebuilder:validation:Required
	End *string `json:"end" tf:"end,omitempty"`

	// The start IP Address for the range
	// +kubebuilder:validation:Required
	Start *string `json:"start" tf:"start,omitempty"`
}

type DiscoveryProfileObservation struct {

	// Policy path of profile binding map
	BindingMapPath *string `json:"bindingMapPath,omitempty" tf:"binding_map_path,omitempty"`

	// Policy path of associated IP Discovery Profile
	IPDiscoveryProfilePath *string `json:"ipDiscoveryProfilePath,omitempty" tf:"ip_discovery_profile_path,omitempty"`

	// Policy path of associated Mac Discovery Profile
	MacDiscoveryProfilePath *string `json:"macDiscoveryProfilePath,omitempty" tf:"mac_discovery_profile_path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`
}

type DiscoveryProfileParameters struct {

	// Policy path of profile binding map
	// +kubebuilder:validation:Optional
	BindingMapPath *string `json:"bindingMapPath,omitempty" tf:"binding_map_path,omitempty"`

	// Policy path of associated IP Discovery Profile
	// +kubebuilder:validation:Optional
	IPDiscoveryProfilePath *string `json:"ipDiscoveryProfilePath,omitempty" tf:"ip_discovery_profile_path,omitempty"`

	// Policy path of associated Mac Discovery Profile
	// +kubebuilder:validation:Optional
	MacDiscoveryProfilePath *string `json:"macDiscoveryProfilePath,omitempty" tf:"mac_discovery_profile_path,omitempty"`
}

type IgnoreTagsDetectedObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type IgnoreTagsDetectedParameters struct {
}

type PolicySegmentAdvancedConfigObservation struct {

	// Policy path to IP address pool
	AddressPoolPath *string `json:"addressPoolPath,omitempty" tf:"address_pool_path,omitempty"`

	// Connectivity configuration to manually connect (ON) or disconnect (OFF)
	Connectivity *string `json:"connectivity,omitempty" tf:"connectivity,omitempty"`

	// Flag to identify a hybrid logical switch
	Hybrid *bool `json:"hybrid,omitempty" tf:"hybrid,omitempty"`

	// Flag to enable local egress
	LocalEgress *bool `json:"localEgress,omitempty" tf:"local_egress,omitempty"`

	// The name of the switching uplink teaming policy for the bridge endpoint
	UplinkTeamingPolicy *string `json:"uplinkTeamingPolicy,omitempty" tf:"uplink_teaming_policy,omitempty"`

	// This URPF mode is applied to the downlink logical router port created while attaching this segment to gateway
	UrpfMode *string `json:"urpfMode,omitempty" tf:"urpf_mode,omitempty"`
}

type PolicySegmentAdvancedConfigParameters struct {

	// Policy path to IP address pool
	// +kubebuilder:validation:Optional
	AddressPoolPath *string `json:"addressPoolPath,omitempty" tf:"address_pool_path,omitempty"`

	// Connectivity configuration to manually connect (ON) or disconnect (OFF)
	// +kubebuilder:validation:Optional
	Connectivity *string `json:"connectivity,omitempty" tf:"connectivity,omitempty"`

	// Flag to identify a hybrid logical switch
	// +kubebuilder:validation:Optional
	Hybrid *bool `json:"hybrid,omitempty" tf:"hybrid,omitempty"`

	// Flag to enable local egress
	// +kubebuilder:validation:Optional
	LocalEgress *bool `json:"localEgress,omitempty" tf:"local_egress,omitempty"`

	// The name of the switching uplink teaming policy for the bridge endpoint
	// +kubebuilder:validation:Optional
	UplinkTeamingPolicy *string `json:"uplinkTeamingPolicy,omitempty" tf:"uplink_teaming_policy,omitempty"`

	// This URPF mode is applied to the downlink logical router port created while attaching this segment to gateway
	// +kubebuilder:validation:Optional
	UrpfMode *string `json:"urpfMode,omitempty" tf:"urpf_mode,omitempty"`
}

type PolicySegmentBridgeConfigObservation struct {

	// profile path
	ProfilePath *string `json:"profilePath,omitempty" tf:"profile_path,omitempty"`

	// vlan transport zone path
	TransportZonePath *string `json:"transportZonePath,omitempty" tf:"transport_zone_path,omitempty"`

	UplinkTeamingPolicy *string `json:"uplinkTeamingPolicy,omitempty" tf:"uplink_teaming_policy,omitempty"`

	// VLAN specification for bridge endpoint
	VlanIds []*string `json:"vlanIds,omitempty" tf:"vlan_ids,omitempty"`
}

type PolicySegmentBridgeConfigParameters struct {

	// profile path
	// +kubebuilder:validation:Required
	ProfilePath *string `json:"profilePath" tf:"profile_path,omitempty"`

	// vlan transport zone path
	// +kubebuilder:validation:Required
	TransportZonePath *string `json:"transportZonePath" tf:"transport_zone_path,omitempty"`

	// +kubebuilder:validation:Optional
	UplinkTeamingPolicy *string `json:"uplinkTeamingPolicy,omitempty" tf:"uplink_teaming_policy,omitempty"`

	// VLAN specification for bridge endpoint
	// +kubebuilder:validation:Required
	VlanIds []*string `json:"vlanIds" tf:"vlan_ids,omitempty"`
}

type PolicySegmentContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type PolicySegmentContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type PolicySegmentIgnoreTagsObservation struct {

	// Tags matching scopes to ignore
	Detected []IgnoreTagsDetectedObservation `json:"detected,omitempty" tf:"detected,omitempty"`

	// List of scopes to ignore
	Scopes []*string `json:"scopes,omitempty" tf:"scopes,omitempty"`
}

type PolicySegmentIgnoreTagsParameters struct {

	// List of scopes to ignore
	// +kubebuilder:validation:Required
	Scopes []*string `json:"scopes" tf:"scopes,omitempty"`
}

type PolicySegmentL2ExtensionObservation struct {

	// Policy paths of associated L2 VPN sessions
	L2VpnPaths []*string `json:"l2vpnPaths,omitempty" tf:"l2vpn_paths,omitempty"`

	// Tunnel ID
	TunnelID *float64 `json:"tunnelId,omitempty" tf:"tunnel_id,omitempty"`
}

type PolicySegmentL2ExtensionParameters struct {

	// Policy paths of associated L2 VPN sessions
	// +kubebuilder:validation:Optional
	L2VpnPaths []*string `json:"l2vpnPaths,omitempty" tf:"l2vpn_paths,omitempty"`

	// Tunnel ID
	// +kubebuilder:validation:Optional
	TunnelID *float64 `json:"tunnelId,omitempty" tf:"tunnel_id,omitempty"`
}

type PolicySegmentObservation struct {

	// Advanced segment configuration
	AdvancedConfig []PolicySegmentAdvancedConfigObservation `json:"advancedConfig,omitempty" tf:"advanced_config,omitempty"`

	// Bridge configuration
	BridgeConfig []PolicySegmentBridgeConfigObservation `json:"bridgeConfig,omitempty" tf:"bridge_config,omitempty"`

	// Policy path to the connecting Tier-0 or Tier-1
	ConnectivityPath *string `json:"connectivityPath,omitempty" tf:"connectivity_path,omitempty"`

	// Resource context
	Context []PolicySegmentContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// Policy path to DHCP server or relay configuration to use for subnets configured on this segment
	DHCPConfigPath *string `json:"dhcpConfigPath,omitempty" tf:"dhcp_config_path,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IP and MAC discovery profiles for this segment
	DiscoveryProfile []DiscoveryProfileObservation `json:"discoveryProfile,omitempty" tf:"discovery_profile,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// DNS domain names
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IgnoreTags []PolicySegmentIgnoreTagsObservation `json:"ignoreTags,omitempty" tf:"ignore_tags,omitempty"`

	// Configuration for extending Segment through L2 VPN
	L2Extension []PolicySegmentL2ExtensionObservation `json:"l2Extension,omitempty" tf:"l2_extension,omitempty"`

	// Metadata Proxy Configuration Paths
	MetadataProxyPaths []*string `json:"metadataProxyPaths,omitempty" tf:"metadata_proxy_paths,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Overlay connectivity ID for this Segment
	OverlayID *float64 `json:"overlayId,omitempty" tf:"overlay_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// QoS profiles for this segment
	QosProfile []QosProfileObservation `json:"qosProfile,omitempty" tf:"qos_profile,omitempty"`

	// Replication mode - MTEP or SOURCE
	ReplicationMode *string `json:"replicationMode,omitempty" tf:"replication_mode,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Security profiles for this segment
	SecurityProfile []SecurityProfileObservation `json:"securityProfile,omitempty" tf:"security_profile,omitempty"`

	// Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs
	Subnet []PolicySegmentSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicySegmentTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Policy path to the transport zone
	TransportZonePath *string `json:"transportZonePath,omitempty" tf:"transport_zone_path,omitempty"`

	// VLAN IDs for VLAN backed Segment
	VlanIds []*string `json:"vlanIds,omitempty" tf:"vlan_ids,omitempty"`
}

type PolicySegmentParameters struct {

	// Advanced segment configuration
	// +kubebuilder:validation:Optional
	AdvancedConfig []PolicySegmentAdvancedConfigParameters `json:"advancedConfig,omitempty" tf:"advanced_config,omitempty"`

	// Bridge configuration
	// +kubebuilder:validation:Optional
	BridgeConfig []PolicySegmentBridgeConfigParameters `json:"bridgeConfig,omitempty" tf:"bridge_config,omitempty"`

	// Policy path to the connecting Tier-0 or Tier-1
	// +kubebuilder:validation:Optional
	ConnectivityPath *string `json:"connectivityPath,omitempty" tf:"connectivity_path,omitempty"`

	// Resource context
	// +kubebuilder:validation:Optional
	Context []PolicySegmentContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// Policy path to DHCP server or relay configuration to use for subnets configured on this segment
	// +kubebuilder:validation:Optional
	DHCPConfigPath *string `json:"dhcpConfigPath,omitempty" tf:"dhcp_config_path,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// IP and MAC discovery profiles for this segment
	// +kubebuilder:validation:Optional
	DiscoveryProfile []DiscoveryProfileParameters `json:"discoveryProfile,omitempty" tf:"discovery_profile,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// DNS domain names
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// +kubebuilder:validation:Optional
	IgnoreTags []PolicySegmentIgnoreTagsParameters `json:"ignoreTags,omitempty" tf:"ignore_tags,omitempty"`

	// Configuration for extending Segment through L2 VPN
	// +kubebuilder:validation:Optional
	L2Extension []PolicySegmentL2ExtensionParameters `json:"l2Extension,omitempty" tf:"l2_extension,omitempty"`

	// Metadata Proxy Configuration Paths
	// +kubebuilder:validation:Optional
	MetadataProxyPaths []*string `json:"metadataProxyPaths,omitempty" tf:"metadata_proxy_paths,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Overlay connectivity ID for this Segment
	// +kubebuilder:validation:Optional
	OverlayID *float64 `json:"overlayId,omitempty" tf:"overlay_id,omitempty"`

	// QoS profiles for this segment
	// +kubebuilder:validation:Optional
	QosProfile []QosProfileParameters `json:"qosProfile,omitempty" tf:"qos_profile,omitempty"`

	// Replication mode - MTEP or SOURCE
	// +kubebuilder:validation:Optional
	ReplicationMode *string `json:"replicationMode,omitempty" tf:"replication_mode,omitempty"`

	// Security profiles for this segment
	// +kubebuilder:validation:Optional
	SecurityProfile []SecurityProfileParameters `json:"securityProfile,omitempty" tf:"security_profile,omitempty"`

	// Subnet configuration with at most 1 IPv4 CIDR and multiple IPv6 CIDRs
	// +kubebuilder:validation:Optional
	Subnet []PolicySegmentSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicySegmentTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Policy path to the transport zone
	// +kubebuilder:validation:Optional
	TransportZonePath *string `json:"transportZonePath,omitempty" tf:"transport_zone_path,omitempty"`

	// VLAN IDs for VLAN backed Segment
	// +kubebuilder:validation:Optional
	VlanIds []*string `json:"vlanIds,omitempty" tf:"vlan_ids,omitempty"`
}

type PolicySegmentSubnetObservation struct {

	// Gateway IP address in CIDR format
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// DHCP address ranges for dynamic IP allocation
	DHCPRanges []*string `json:"dhcpRanges,omitempty" tf:"dhcp_ranges,omitempty"`

	DHCPV4Config []SubnetDHCPV4ConfigObservation `json:"dhcpV4Config,omitempty" tf:"dhcp_v4_config,omitempty"`

	DHCPV6Config []SubnetDHCPV6ConfigObservation `json:"dhcpV6Config,omitempty" tf:"dhcp_v6_config,omitempty"`

	// Network CIDR for subnet
	Network *string `json:"network,omitempty" tf:"network,omitempty"`
}

type PolicySegmentSubnetParameters struct {

	// Gateway IP address in CIDR format
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// DHCP address ranges for dynamic IP allocation
	// +kubebuilder:validation:Optional
	DHCPRanges []*string `json:"dhcpRanges,omitempty" tf:"dhcp_ranges,omitempty"`

	// +kubebuilder:validation:Optional
	DHCPV4Config []SubnetDHCPV4ConfigParameters `json:"dhcpV4Config,omitempty" tf:"dhcp_v4_config,omitempty"`

	// +kubebuilder:validation:Optional
	DHCPV6Config []SubnetDHCPV6ConfigParameters `json:"dhcpV6Config,omitempty" tf:"dhcp_v6_config,omitempty"`
}

type PolicySegmentTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicySegmentTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type QosProfileObservation struct {

	// Policy path of profile binding map
	BindingMapPath *string `json:"bindingMapPath,omitempty" tf:"binding_map_path,omitempty"`

	// Policy path of associated QoS Profile
	QosProfilePath *string `json:"qosProfilePath,omitempty" tf:"qos_profile_path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`
}

type QosProfileParameters struct {

	// Policy path of profile binding map
	// +kubebuilder:validation:Optional
	BindingMapPath *string `json:"bindingMapPath,omitempty" tf:"binding_map_path,omitempty"`

	// Policy path of associated QoS Profile
	// +kubebuilder:validation:Required
	QosProfilePath *string `json:"qosProfilePath" tf:"qos_profile_path,omitempty"`
}

type SecurityProfileObservation struct {

	// Policy path of profile binding map
	BindingMapPath *string `json:"bindingMapPath,omitempty" tf:"binding_map_path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Policy path of associated Segment Security Profile
	SecurityProfilePath *string `json:"securityProfilePath,omitempty" tf:"security_profile_path,omitempty"`

	// Policy path of associated Spoofguard Profile
	SpoofguardProfilePath *string `json:"spoofguardProfilePath,omitempty" tf:"spoofguard_profile_path,omitempty"`
}

type SecurityProfileParameters struct {

	// Policy path of profile binding map
	// +kubebuilder:validation:Optional
	BindingMapPath *string `json:"bindingMapPath,omitempty" tf:"binding_map_path,omitempty"`

	// Policy path of associated Segment Security Profile
	// +kubebuilder:validation:Optional
	SecurityProfilePath *string `json:"securityProfilePath,omitempty" tf:"security_profile_path,omitempty"`

	// Policy path of associated Spoofguard Profile
	// +kubebuilder:validation:Optional
	SpoofguardProfilePath *string `json:"spoofguardProfilePath,omitempty" tf:"spoofguard_profile_path,omitempty"`
}

type SubnetDHCPV4ConfigObservation struct {

	// Generic DHCP options
	DHCPGenericOption []DHCPV4ConfigDHCPGenericOptionObservation `json:"dhcpGenericOption,omitempty" tf:"dhcp_generic_option,omitempty"`

	// DHCP classless static routes
	DHCPOption121 []DHCPV4ConfigDHCPOption121Observation `json:"dhcpOption121,omitempty" tf:"dhcp_option_121,omitempty"`

	// IP addresses of DNS servers for subnet
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// DHCP lease time in seconds
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// IP address of the DHCP server in CIDR format
	ServerAddress *string `json:"serverAddress,omitempty" tf:"server_address,omitempty"`
}

type SubnetDHCPV4ConfigParameters struct {

	// Generic DHCP options
	// +kubebuilder:validation:Optional
	DHCPGenericOption []DHCPV4ConfigDHCPGenericOptionParameters `json:"dhcpGenericOption,omitempty" tf:"dhcp_generic_option,omitempty"`

	// DHCP classless static routes
	// +kubebuilder:validation:Optional
	DHCPOption121 []DHCPV4ConfigDHCPOption121Parameters `json:"dhcpOption121,omitempty" tf:"dhcp_option_121,omitempty"`

	// IP addresses of DNS servers for subnet
	// +kubebuilder:validation:Optional
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// DHCP lease time in seconds
	// +kubebuilder:validation:Optional
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// IP address of the DHCP server in CIDR format
	// +kubebuilder:validation:Optional
	ServerAddress *string `json:"serverAddress,omitempty" tf:"server_address,omitempty"`
}

type SubnetDHCPV6ConfigObservation struct {

	// IP addresses of DNS servers for subnet
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// Domain names
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// Excluded addresses to define dynamic ip allocation ranges
	ExcludedRange []DHCPV6ConfigExcludedRangeObservation `json:"excludedRange,omitempty" tf:"excluded_range,omitempty"`

	// DHCP lease time in seconds
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// The time interval in seconds, in which the prefix is advertised as preferred
	PreferredTime *float64 `json:"preferredTime,omitempty" tf:"preferred_time,omitempty"`

	// IP address of the DHCP server in CIDR format
	ServerAddress *string `json:"serverAddress,omitempty" tf:"server_address,omitempty"`

	// IPv6 address of SNTP servers for subnet
	SntpServers []*string `json:"sntpServers,omitempty" tf:"sntp_servers,omitempty"`
}

type SubnetDHCPV6ConfigParameters struct {

	// IP addresses of DNS servers for subnet
	// +kubebuilder:validation:Optional
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// Domain names
	// +kubebuilder:validation:Optional
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// Excluded addresses to define dynamic ip allocation ranges
	// +kubebuilder:validation:Optional
	ExcludedRange []DHCPV6ConfigExcludedRangeParameters `json:"excludedRange,omitempty" tf:"excluded_range,omitempty"`

	// DHCP lease time in seconds
	// +kubebuilder:validation:Optional
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// The time interval in seconds, in which the prefix is advertised as preferred
	// +kubebuilder:validation:Optional
	PreferredTime *float64 `json:"preferredTime,omitempty" tf:"preferred_time,omitempty"`

	// IP address of the DHCP server in CIDR format
	// +kubebuilder:validation:Optional
	ServerAddress *string `json:"serverAddress,omitempty" tf:"server_address,omitempty"`

	// IPv6 address of SNTP servers for subnet
	// +kubebuilder:validation:Optional
	SntpServers []*string `json:"sntpServers,omitempty" tf:"sntp_servers,omitempty"`
}

// PolicySegmentSpec defines the desired state of PolicySegment
type PolicySegmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicySegmentParameters `json:"forProvider"`
}

// PolicySegmentStatus defines the observed state of PolicySegment.
type PolicySegmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicySegmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicySegment is the Schema for the PolicySegments API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicySegment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   PolicySegmentSpec   `json:"spec"`
	Status PolicySegmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicySegmentList contains a list of PolicySegments
type PolicySegmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicySegment `json:"items"`
}

// Repository type metadata.
var (
	PolicySegment_Kind             = "PolicySegment"
	PolicySegment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicySegment_Kind}.String()
	PolicySegment_KindAPIVersion   = PolicySegment_Kind + "." + CRDGroupVersion.String()
	PolicySegment_GroupVersionKind = CRDGroupVersion.WithKind(PolicySegment_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicySegment{}, &PolicySegmentList{})
}
