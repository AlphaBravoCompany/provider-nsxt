/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyTransportZoneObservation struct {

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name of this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the enforcement point this Transport Zone belongs to
	EnforcementPoint *string `json:"enforcementPoint,omitempty" tf:"enforcement_point,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates whether the transport zone is default
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Computed ID of the realized object
	RealizedID *string `json:"realizedId,omitempty" tf:"realized_id,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Path to the site this Transport Zone belongs to
	SitePath *string `json:"sitePath,omitempty" tf:"site_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Type of Transport Zone
	TransportType *string `json:"transportType,omitempty" tf:"transport_type,omitempty"`

	// Names of the switching uplink teaming policies that are supported by this transport zone.
	UplinkTeamingPolicyNames []*string `json:"uplinkTeamingPolicyNames,omitempty" tf:"uplink_teaming_policy_names,omitempty"`
}

type PolicyTransportZoneParameters struct {

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name of this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the enforcement point this Transport Zone belongs to
	// +kubebuilder:validation:Optional
	EnforcementPoint *string `json:"enforcementPoint,omitempty" tf:"enforcement_point,omitempty"`

	// Indicates whether the transport zone is default
	// +kubebuilder:validation:Optional
	IsDefault *bool `json:"isDefault,omitempty" tf:"is_default,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Path to the site this Transport Zone belongs to
	// +kubebuilder:validation:Optional
	SitePath *string `json:"sitePath,omitempty" tf:"site_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Type of Transport Zone
	// +kubebuilder:validation:Optional
	TransportType *string `json:"transportType,omitempty" tf:"transport_type,omitempty"`

	// Names of the switching uplink teaming policies that are supported by this transport zone.
	// +kubebuilder:validation:Optional
	UplinkTeamingPolicyNames []*string `json:"uplinkTeamingPolicyNames,omitempty" tf:"uplink_teaming_policy_names,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyTransportZoneSpec defines the desired state of PolicyTransportZone
type PolicyTransportZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyTransportZoneParameters `json:"forProvider"`
}

// PolicyTransportZoneStatus defines the observed state of PolicyTransportZone.
type PolicyTransportZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyTransportZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyTransportZone is the Schema for the PolicyTransportZones API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyTransportZone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.transportType)",message="transportType is a required parameter"
	Spec   PolicyTransportZoneSpec   `json:"spec"`
	Status PolicyTransportZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyTransportZoneList contains a list of PolicyTransportZones
type PolicyTransportZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyTransportZone `json:"items"`
}

// Repository type metadata.
var (
	PolicyTransportZone_Kind             = "PolicyTransportZone"
	PolicyTransportZone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyTransportZone_Kind}.String()
	PolicyTransportZone_KindAPIVersion   = PolicyTransportZone_Kind + "." + CRDGroupVersion.String()
	PolicyTransportZone_GroupVersionKind = CRDGroupVersion.WithKind(PolicyTransportZone_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyTransportZone{}, &PolicyTransportZoneList{})
}
