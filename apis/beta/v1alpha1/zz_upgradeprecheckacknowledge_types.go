/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrecheckWarningsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsAcknowledged *bool `json:"isAcknowledged,omitempty" tf:"is_acknowledged,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`
}

type PrecheckWarningsParameters struct {
}

type UpgradePrecheckAcknowledgeObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IDs of precheck warnings that need to be acknowledged
	PrecheckIds []*string `json:"precheckIds,omitempty" tf:"precheck_ids,omitempty"`

	// List of warnings from precheck
	PrecheckWarnings []PrecheckWarningsObservation `json:"precheckWarnings,omitempty" tf:"precheck_warnings,omitempty"`

	// Target system version
	TargetVersion *string `json:"targetVersion,omitempty" tf:"target_version,omitempty"`
}

type UpgradePrecheckAcknowledgeParameters struct {

	// IDs of precheck warnings that need to be acknowledged
	// +kubebuilder:validation:Optional
	PrecheckIds []*string `json:"precheckIds,omitempty" tf:"precheck_ids,omitempty"`

	// Target system version
	// +kubebuilder:validation:Optional
	TargetVersion *string `json:"targetVersion,omitempty" tf:"target_version,omitempty"`
}

// UpgradePrecheckAcknowledgeSpec defines the desired state of UpgradePrecheckAcknowledge
type UpgradePrecheckAcknowledgeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UpgradePrecheckAcknowledgeParameters `json:"forProvider"`
}

// UpgradePrecheckAcknowledgeStatus defines the observed state of UpgradePrecheckAcknowledge.
type UpgradePrecheckAcknowledgeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UpgradePrecheckAcknowledgeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UpgradePrecheckAcknowledge is the Schema for the UpgradePrecheckAcknowledges API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type UpgradePrecheckAcknowledge struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.precheckIds)",message="precheckIds is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.targetVersion)",message="targetVersion is a required parameter"
	Spec   UpgradePrecheckAcknowledgeSpec   `json:"spec"`
	Status UpgradePrecheckAcknowledgeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UpgradePrecheckAcknowledgeList contains a list of UpgradePrecheckAcknowledges
type UpgradePrecheckAcknowledgeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UpgradePrecheckAcknowledge `json:"items"`
}

// Repository type metadata.
var (
	UpgradePrecheckAcknowledge_Kind             = "UpgradePrecheckAcknowledge"
	UpgradePrecheckAcknowledge_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UpgradePrecheckAcknowledge_Kind}.String()
	UpgradePrecheckAcknowledge_KindAPIVersion   = UpgradePrecheckAcknowledge_Kind + "." + CRDGroupVersion.String()
	UpgradePrecheckAcknowledge_GroupVersionKind = CRDGroupVersion.WithKind(UpgradePrecheckAcknowledge_Kind)
)

func init() {
	SchemeBuilder.Register(&UpgradePrecheckAcknowledge{}, &UpgradePrecheckAcknowledgeList{})
}
