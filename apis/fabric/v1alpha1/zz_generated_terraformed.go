/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this EdgeHighAvailabilityProfile
func (mg *EdgeHighAvailabilityProfile) GetTerraformResourceType() string {
	return "nsxt_edge_high_availability_profile"
}

// GetConnectionDetailsMapping for this EdgeHighAvailabilityProfile
func (tr *EdgeHighAvailabilityProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this EdgeHighAvailabilityProfile
func (tr *EdgeHighAvailabilityProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this EdgeHighAvailabilityProfile
func (tr *EdgeHighAvailabilityProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this EdgeHighAvailabilityProfile
func (tr *EdgeHighAvailabilityProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this EdgeHighAvailabilityProfile
func (tr *EdgeHighAvailabilityProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this EdgeHighAvailabilityProfile
func (tr *EdgeHighAvailabilityProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this EdgeHighAvailabilityProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *EdgeHighAvailabilityProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &EdgeHighAvailabilityProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *EdgeHighAvailabilityProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this EdgeTransportNode
func (mg *EdgeTransportNode) GetTerraformResourceType() string {
	return "nsxt_edge_transport_node"
}

// GetConnectionDetailsMapping for this EdgeTransportNode
func (tr *EdgeTransportNode) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"deployment_config[*].node_user_settings[*].audit_password": "spec.forProvider.deploymentConfig[*].nodeUserSettings[*].auditPasswordSecretRef", "deployment_config[*].node_user_settings[*].cli_password": "spec.forProvider.deploymentConfig[*].nodeUserSettings[*].cliPasswordSecretRef", "deployment_config[*].node_user_settings[*].root_password": "spec.forProvider.deploymentConfig[*].nodeUserSettings[*].rootPasswordSecretRef"}
}

// GetObservation of this EdgeTransportNode
func (tr *EdgeTransportNode) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this EdgeTransportNode
func (tr *EdgeTransportNode) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this EdgeTransportNode
func (tr *EdgeTransportNode) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this EdgeTransportNode
func (tr *EdgeTransportNode) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this EdgeTransportNode
func (tr *EdgeTransportNode) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this EdgeTransportNode using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *EdgeTransportNode) LateInitialize(attrs []byte) (bool, error) {
	params := &EdgeTransportNodeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *EdgeTransportNode) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyComputeSubCluster
func (mg *PolicyComputeSubCluster) GetTerraformResourceType() string {
	return "nsxt_policy_compute_sub_cluster"
}

// GetConnectionDetailsMapping for this PolicyComputeSubCluster
func (tr *PolicyComputeSubCluster) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyComputeSubCluster
func (tr *PolicyComputeSubCluster) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyComputeSubCluster
func (tr *PolicyComputeSubCluster) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyComputeSubCluster
func (tr *PolicyComputeSubCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyComputeSubCluster
func (tr *PolicyComputeSubCluster) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyComputeSubCluster
func (tr *PolicyComputeSubCluster) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyComputeSubCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyComputeSubCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyComputeSubClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyComputeSubCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyHostTransportNode
func (mg *PolicyHostTransportNode) GetTerraformResourceType() string {
	return "nsxt_policy_host_transport_node"
}

// GetConnectionDetailsMapping for this PolicyHostTransportNode
func (tr *PolicyHostTransportNode) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyHostTransportNode
func (tr *PolicyHostTransportNode) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyHostTransportNode
func (tr *PolicyHostTransportNode) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyHostTransportNode
func (tr *PolicyHostTransportNode) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyHostTransportNode
func (tr *PolicyHostTransportNode) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyHostTransportNode
func (tr *PolicyHostTransportNode) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyHostTransportNode using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyHostTransportNode) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyHostTransportNodeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyHostTransportNode) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyHostTransportNodeCollection
func (mg *PolicyHostTransportNodeCollection) GetTerraformResourceType() string {
	return "nsxt_policy_host_transport_node_collection"
}

// GetConnectionDetailsMapping for this PolicyHostTransportNodeCollection
func (tr *PolicyHostTransportNodeCollection) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyHostTransportNodeCollection
func (tr *PolicyHostTransportNodeCollection) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyHostTransportNodeCollection
func (tr *PolicyHostTransportNodeCollection) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyHostTransportNodeCollection
func (tr *PolicyHostTransportNodeCollection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyHostTransportNodeCollection
func (tr *PolicyHostTransportNodeCollection) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyHostTransportNodeCollection
func (tr *PolicyHostTransportNodeCollection) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyHostTransportNodeCollection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyHostTransportNodeCollection) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyHostTransportNodeCollectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyHostTransportNodeCollection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyUplinkHostSwitchProfile
func (mg *PolicyUplinkHostSwitchProfile) GetTerraformResourceType() string {
	return "nsxt_policy_uplink_host_switch_profile"
}

// GetConnectionDetailsMapping for this PolicyUplinkHostSwitchProfile
func (tr *PolicyUplinkHostSwitchProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyUplinkHostSwitchProfile
func (tr *PolicyUplinkHostSwitchProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyUplinkHostSwitchProfile
func (tr *PolicyUplinkHostSwitchProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyUplinkHostSwitchProfile
func (tr *PolicyUplinkHostSwitchProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyUplinkHostSwitchProfile
func (tr *PolicyUplinkHostSwitchProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyUplinkHostSwitchProfile
func (tr *PolicyUplinkHostSwitchProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyUplinkHostSwitchProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyUplinkHostSwitchProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyUplinkHostSwitchProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyUplinkHostSwitchProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyVtepHaHostSwitchProfile
func (mg *PolicyVtepHaHostSwitchProfile) GetTerraformResourceType() string {
	return "nsxt_policy_vtep_ha_host_switch_profile"
}

// GetConnectionDetailsMapping for this PolicyVtepHaHostSwitchProfile
func (tr *PolicyVtepHaHostSwitchProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyVtepHaHostSwitchProfile
func (tr *PolicyVtepHaHostSwitchProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyVtepHaHostSwitchProfile
func (tr *PolicyVtepHaHostSwitchProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyVtepHaHostSwitchProfile
func (tr *PolicyVtepHaHostSwitchProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyVtepHaHostSwitchProfile
func (tr *PolicyVtepHaHostSwitchProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyVtepHaHostSwitchProfile
func (tr *PolicyVtepHaHostSwitchProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyVtepHaHostSwitchProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyVtepHaHostSwitchProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyVtepHaHostSwitchProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyVtepHaHostSwitchProfile) GetTerraformSchemaVersion() int {
	return 0
}
