/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyComputeSubClusterObservation struct {

	// Compute collection ID under which subcluster is created
	ComputeCollectionID *string `json:"computeCollectionId,omitempty" tf:"compute_collection_id,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Discovered node IDs under this subcluster
	DiscoveredNodeIds []*string `json:"discoveredNodeIds,omitempty" tf:"discovered_node_ids,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the enforcement point this subcluster belongs to
	EnforcementPoint *string `json:"enforcementPoint,omitempty" tf:"enforcement_point,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Path to the site this subcluster belongs to
	SitePath *string `json:"sitePath,omitempty" tf:"site_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyComputeSubClusterTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyComputeSubClusterParameters struct {

	// Compute collection ID under which subcluster is created
	// +kubebuilder:validation:Optional
	ComputeCollectionID *string `json:"computeCollectionId,omitempty" tf:"compute_collection_id,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Discovered node IDs under this subcluster
	// +kubebuilder:validation:Optional
	DiscoveredNodeIds []*string `json:"discoveredNodeIds,omitempty" tf:"discovered_node_ids,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the enforcement point this subcluster belongs to
	// +kubebuilder:validation:Optional
	EnforcementPoint *string `json:"enforcementPoint,omitempty" tf:"enforcement_point,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Path to the site this subcluster belongs to
	// +kubebuilder:validation:Optional
	SitePath *string `json:"sitePath,omitempty" tf:"site_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyComputeSubClusterTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyComputeSubClusterTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyComputeSubClusterTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyComputeSubClusterSpec defines the desired state of PolicyComputeSubCluster
type PolicyComputeSubClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyComputeSubClusterParameters `json:"forProvider"`
}

// PolicyComputeSubClusterStatus defines the observed state of PolicyComputeSubCluster.
type PolicyComputeSubClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyComputeSubClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyComputeSubCluster is the Schema for the PolicyComputeSubClusters API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyComputeSubCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.computeCollectionId)",message="computeCollectionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   PolicyComputeSubClusterSpec   `json:"spec"`
	Status PolicyComputeSubClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyComputeSubClusterList contains a list of PolicyComputeSubClusters
type PolicyComputeSubClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyComputeSubCluster `json:"items"`
}

// Repository type metadata.
var (
	PolicyComputeSubCluster_Kind             = "PolicyComputeSubCluster"
	PolicyComputeSubCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyComputeSubCluster_Kind}.String()
	PolicyComputeSubCluster_KindAPIVersion   = PolicyComputeSubCluster_Kind + "." + CRDGroupVersion.String()
	PolicyComputeSubCluster_GroupVersionKind = CRDGroupVersion.WithKind(PolicyComputeSubCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyComputeSubCluster{}, &PolicyComputeSubClusterList{})
}
