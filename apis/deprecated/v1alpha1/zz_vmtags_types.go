/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VmTagsLogicalPortTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VmTagsLogicalPortTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VmTagsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Instance id
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	LogicalPortTag []VmTagsLogicalPortTagObservation `json:"logicalPortTag,omitempty" tf:"logical_port_tag,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []VmTagsTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VmTagsParameters struct {

	// Instance id
	// +kubebuilder:validation:Optional
	InstanceID *string `json:"instanceId,omitempty" tf:"instance_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	LogicalPortTag []VmTagsLogicalPortTagParameters `json:"logicalPortTag,omitempty" tf:"logical_port_tag,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []VmTagsTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VmTagsTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VmTagsTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// VmTagsSpec defines the desired state of VmTags
type VmTagsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VmTagsParameters `json:"forProvider"`
}

// VmTagsStatus defines the observed state of VmTags.
type VmTagsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VmTagsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VmTags is the Schema for the VmTagss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type VmTags struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.instanceId)",message="instanceId is a required parameter"
	Spec   VmTagsSpec   `json:"spec"`
	Status VmTagsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VmTagsList contains a list of VmTagss
type VmTagsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VmTags `json:"items"`
}

// Repository type metadata.
var (
	VmTags_Kind             = "VmTags"
	VmTags_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VmTags_Kind}.String()
	VmTags_KindAPIVersion   = VmTags_Kind + "." + CRDGroupVersion.String()
	VmTags_GroupVersionKind = CRDGroupVersion.WithKind(VmTags_Kind)
)

func init() {
	SchemeBuilder.Register(&VmTags{}, &VmTagsList{})
}
