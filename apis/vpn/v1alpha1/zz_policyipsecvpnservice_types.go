/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BypassRuleObservation struct {

	// PROTECT - Protect rules are defined per policy based IPSec VPN session. BYPASS - Bypass rules are defined per IPSec VPN service and affects all policy based IPSec VPN sessions. Bypass rules are prioritized over protect rules.
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// List of remote subnets
	Destinations []*string `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// List of local subnets. Specifying no value is interpreted as 0.0.0.0/0.
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type BypassRuleParameters struct {

	// PROTECT - Protect rules are defined per policy based IPSec VPN session. BYPASS - Bypass rules are defined per IPSec VPN service and affects all policy based IPSec VPN sessions. Bypass rules are prioritized over protect rules.
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// List of remote subnets
	// +kubebuilder:validation:Optional
	Destinations []*string `json:"destinations,omitempty" tf:"destinations,omitempty"`

	// List of local subnets. Specifying no value is interpreted as 0.0.0.0/0.
	// +kubebuilder:validation:Optional
	Sources []*string `json:"sources,omitempty" tf:"sources,omitempty"`
}

type PolicyIpsecVpnServiceObservation struct {

	// For policy-based IPsec VPNs, a security policy specifies as its action the VPN tunnel to be used for transit traffic that meets the policy match criteria
	BypassRule []BypassRuleObservation `json:"bypassRule,omitempty" tf:"bypass_rule,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Enable/Disable IPSec VPN service.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Policy path for the gateway.
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	// Enable/Disable IPSec VPN service HA state sync.
	HaSync *bool `json:"haSync,omitempty" tf:"ha_sync,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Log level for internet key exchange (IKE).
	IkeLogLevel *string `json:"ikeLogLevel,omitempty" tf:"ike_log_level,omitempty"`

	// Polciy path for the locale service.
	LocaleServicePath *string `json:"localeServicePath,omitempty" tf:"locale_service_path,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyIpsecVpnServiceTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyIpsecVpnServiceParameters struct {

	// For policy-based IPsec VPNs, a security policy specifies as its action the VPN tunnel to be used for transit traffic that meets the policy match criteria
	// +kubebuilder:validation:Optional
	BypassRule []BypassRuleParameters `json:"bypassRule,omitempty" tf:"bypass_rule,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Enable/Disable IPSec VPN service.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Policy path for the gateway.
	// +kubebuilder:validation:Optional
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	// Enable/Disable IPSec VPN service HA state sync.
	// +kubebuilder:validation:Optional
	HaSync *bool `json:"haSync,omitempty" tf:"ha_sync,omitempty"`

	// Log level for internet key exchange (IKE).
	// +kubebuilder:validation:Optional
	IkeLogLevel *string `json:"ikeLogLevel,omitempty" tf:"ike_log_level,omitempty"`

	// Polciy path for the locale service.
	// +kubebuilder:validation:Optional
	LocaleServicePath *string `json:"localeServicePath,omitempty" tf:"locale_service_path,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyIpsecVpnServiceTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyIpsecVpnServiceTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyIpsecVpnServiceTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyIpsecVpnServiceSpec defines the desired state of PolicyIpsecVpnService
type PolicyIpsecVpnServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyIpsecVpnServiceParameters `json:"forProvider"`
}

// PolicyIpsecVpnServiceStatus defines the observed state of PolicyIpsecVpnService.
type PolicyIpsecVpnServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyIpsecVpnServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyIpsecVpnService is the Schema for the PolicyIpsecVpnServices API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyIpsecVpnService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   PolicyIpsecVpnServiceSpec   `json:"spec"`
	Status PolicyIpsecVpnServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyIpsecVpnServiceList contains a list of PolicyIpsecVpnServices
type PolicyIpsecVpnServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyIpsecVpnService `json:"items"`
}

// Repository type metadata.
var (
	PolicyIpsecVpnService_Kind             = "PolicyIpsecVpnService"
	PolicyIpsecVpnService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyIpsecVpnService_Kind}.String()
	PolicyIpsecVpnService_KindAPIVersion   = PolicyIpsecVpnService_Kind + "." + CRDGroupVersion.String()
	PolicyIpsecVpnService_GroupVersionKind = CRDGroupVersion.WithKind(PolicyIpsecVpnService_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyIpsecVpnService{}, &PolicyIpsecVpnServiceList{})
}
