/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type PolicyDnsForwarderZoneObservation struct {

	// Resource context
	Context []ContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// Domain names
	DNSDomainNames []*string `json:"dnsDomainNames,omitempty" tf:"dns_domain_names,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// The source IP used by the DNS Forwarder zone
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// DNS servers to which the DNS request needs to be forwarded
	UpstreamServers []*string `json:"upstreamServers,omitempty" tf:"upstream_servers,omitempty"`
}

type PolicyDnsForwarderZoneParameters struct {

	// Resource context
	// +kubebuilder:validation:Optional
	Context []ContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// Domain names
	// +kubebuilder:validation:Optional
	DNSDomainNames []*string `json:"dnsDomainNames,omitempty" tf:"dns_domain_names,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// The source IP used by the DNS Forwarder zone
	// +kubebuilder:validation:Optional
	SourceIP *string `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// DNS servers to which the DNS request needs to be forwarded
	// +kubebuilder:validation:Optional
	UpstreamServers []*string `json:"upstreamServers,omitempty" tf:"upstream_servers,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyDnsForwarderZoneSpec defines the desired state of PolicyDnsForwarderZone
type PolicyDnsForwarderZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyDnsForwarderZoneParameters `json:"forProvider"`
}

// PolicyDnsForwarderZoneStatus defines the observed state of PolicyDnsForwarderZone.
type PolicyDnsForwarderZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyDnsForwarderZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyDnsForwarderZone is the Schema for the PolicyDnsForwarderZones API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyDnsForwarderZone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.upstreamServers)",message="upstreamServers is a required parameter"
	Spec   PolicyDnsForwarderZoneSpec   `json:"spec"`
	Status PolicyDnsForwarderZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyDnsForwarderZoneList contains a list of PolicyDnsForwarderZones
type PolicyDnsForwarderZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyDnsForwarderZone `json:"items"`
}

// Repository type metadata.
var (
	PolicyDnsForwarderZone_Kind             = "PolicyDnsForwarderZone"
	PolicyDnsForwarderZone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyDnsForwarderZone_Kind}.String()
	PolicyDnsForwarderZone_KindAPIVersion   = PolicyDnsForwarderZone_Kind + "." + CRDGroupVersion.String()
	PolicyDnsForwarderZone_GroupVersionKind = CRDGroupVersion.WithKind(PolicyDnsForwarderZone_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyDnsForwarderZone{}, &PolicyDnsForwarderZoneList{})
}
