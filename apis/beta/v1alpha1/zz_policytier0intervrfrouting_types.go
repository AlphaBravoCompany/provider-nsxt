/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdvertisementRuleObservation struct {

	// Action to advertise routes
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Display name for rule
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Prefix operator to match subnets
	PrefixOperator *string `json:"prefixOperator,omitempty" tf:"prefix_operator,omitempty"`

	// Enable different types of route advertisements
	RouteAdvertisementTypes []*string `json:"routeAdvertisementTypes,omitempty" tf:"route_advertisement_types,omitempty"`

	// Network CIDRs
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type AdvertisementRuleParameters struct {

	// Action to advertise routes
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Display name for rule
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Prefix operator to match subnets
	// +kubebuilder:validation:Optional
	PrefixOperator *string `json:"prefixOperator,omitempty" tf:"prefix_operator,omitempty"`

	// Enable different types of route advertisements
	// +kubebuilder:validation:Optional
	RouteAdvertisementTypes []*string `json:"routeAdvertisementTypes,omitempty" tf:"route_advertisement_types,omitempty"`

	// Network CIDRs
	// +kubebuilder:validation:Optional
	Subnets []*string `json:"subnets,omitempty" tf:"subnets,omitempty"`
}

type BGPRouteLeakingObservation struct {

	// Address family type
	AddressFamily *string `json:"addressFamily,omitempty" tf:"address_family,omitempty"`

	// route map path for IN direction
	InFilter []*string `json:"inFilter,omitempty" tf:"in_filter,omitempty"`

	// route map path for OUT direction
	OutFilter []*string `json:"outFilter,omitempty" tf:"out_filter,omitempty"`
}

type BGPRouteLeakingParameters struct {

	// Address family type
	// +kubebuilder:validation:Optional
	AddressFamily *string `json:"addressFamily,omitempty" tf:"address_family,omitempty"`

	// route map path for IN direction
	// +kubebuilder:validation:Optional
	InFilter []*string `json:"inFilter,omitempty" tf:"in_filter,omitempty"`

	// route map path for OUT direction
	// +kubebuilder:validation:Optional
	OutFilter []*string `json:"outFilter,omitempty" tf:"out_filter,omitempty"`
}

type PolicyTier0InterVrfRoutingObservation struct {

	// Import / export BGP routes
	BGPRouteLeaking []BGPRouteLeakingObservation `json:"bgpRouteLeaking,omitempty" tf:"bgp_route_leaking,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Policy path for the Gateway
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Advertise subnet to target peers as static routes
	StaticRouteAdvertisement []StaticRouteAdvertisementObservation `json:"staticRouteAdvertisement,omitempty" tf:"static_route_advertisement,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyTier0InterVrfRoutingTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Policy path to tier0/vrf belongs to the same parent tier0
	TargetPath *string `json:"targetPath,omitempty" tf:"target_path,omitempty"`
}

type PolicyTier0InterVrfRoutingParameters struct {

	// Import / export BGP routes
	// +kubebuilder:validation:Optional
	BGPRouteLeaking []BGPRouteLeakingParameters `json:"bgpRouteLeaking,omitempty" tf:"bgp_route_leaking,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Policy path for the Gateway
	// +kubebuilder:validation:Optional
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Advertise subnet to target peers as static routes
	// +kubebuilder:validation:Optional
	StaticRouteAdvertisement []StaticRouteAdvertisementParameters `json:"staticRouteAdvertisement,omitempty" tf:"static_route_advertisement,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyTier0InterVrfRoutingTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Policy path to tier0/vrf belongs to the same parent tier0
	// +kubebuilder:validation:Optional
	TargetPath *string `json:"targetPath,omitempty" tf:"target_path,omitempty"`
}

type PolicyTier0InterVrfRoutingTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyTier0InterVrfRoutingTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type StaticRouteAdvertisementObservation struct {

	// Route advertisement rules
	AdvertisementRule []AdvertisementRuleObservation `json:"advertisementRule,omitempty" tf:"advertisement_rule,omitempty"`

	// Paths of ordered Prefix list
	InFilterPrefixList []*string `json:"inFilterPrefixList,omitempty" tf:"in_filter_prefix_list,omitempty"`
}

type StaticRouteAdvertisementParameters struct {

	// Route advertisement rules
	// +kubebuilder:validation:Optional
	AdvertisementRule []AdvertisementRuleParameters `json:"advertisementRule,omitempty" tf:"advertisement_rule,omitempty"`

	// Paths of ordered Prefix list
	// +kubebuilder:validation:Optional
	InFilterPrefixList []*string `json:"inFilterPrefixList,omitempty" tf:"in_filter_prefix_list,omitempty"`
}

// PolicyTier0InterVrfRoutingSpec defines the desired state of PolicyTier0InterVrfRouting
type PolicyTier0InterVrfRoutingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyTier0InterVrfRoutingParameters `json:"forProvider"`
}

// PolicyTier0InterVrfRoutingStatus defines the observed state of PolicyTier0InterVrfRouting.
type PolicyTier0InterVrfRoutingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyTier0InterVrfRoutingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyTier0InterVrfRouting is the Schema for the PolicyTier0InterVrfRoutings API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyTier0InterVrfRouting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.gatewayPath)",message="gatewayPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.targetPath)",message="targetPath is a required parameter"
	Spec   PolicyTier0InterVrfRoutingSpec   `json:"spec"`
	Status PolicyTier0InterVrfRoutingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyTier0InterVrfRoutingList contains a list of PolicyTier0InterVrfRoutings
type PolicyTier0InterVrfRoutingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyTier0InterVrfRouting `json:"items"`
}

// Repository type metadata.
var (
	PolicyTier0InterVrfRouting_Kind             = "PolicyTier0InterVrfRouting"
	PolicyTier0InterVrfRouting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyTier0InterVrfRouting_Kind}.String()
	PolicyTier0InterVrfRouting_KindAPIVersion   = PolicyTier0InterVrfRouting_Kind + "." + CRDGroupVersion.String()
	PolicyTier0InterVrfRouting_GroupVersionKind = CRDGroupVersion.WithKind(PolicyTier0InterVrfRouting_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyTier0InterVrfRouting{}, &PolicyTier0InterVrfRoutingList{})
}
