/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbServerSslProfileObservation struct {

	// Supported SSL cipher list
	Ciphers []*string `json:"ciphers,omitempty" tf:"ciphers,omitempty"`

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure
	IsSecure *bool `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Reuse previously negotiated security parameters during handshake
	SessionCacheEnabled *bool `json:"sessionCacheEnabled,omitempty" tf:"session_cache_enabled,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []LbServerSslProfileTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbServerSslProfileParameters struct {

	// Supported SSL cipher list
	// +kubebuilder:validation:Optional
	Ciphers []*string `json:"ciphers,omitempty" tf:"ciphers,omitempty"`

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default
	// +kubebuilder:validation:Optional
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// Reuse previously negotiated security parameters during handshake
	// +kubebuilder:validation:Optional
	SessionCacheEnabled *bool `json:"sessionCacheEnabled,omitempty" tf:"session_cache_enabled,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []LbServerSslProfileTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbServerSslProfileTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbServerSslProfileTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LbServerSslProfileSpec defines the desired state of LbServerSslProfile
type LbServerSslProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbServerSslProfileParameters `json:"forProvider"`
}

// LbServerSslProfileStatus defines the observed state of LbServerSslProfile.
type LbServerSslProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbServerSslProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbServerSslProfile is the Schema for the LbServerSslProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LbServerSslProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbServerSslProfileSpec   `json:"spec"`
	Status            LbServerSslProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbServerSslProfileList contains a list of LbServerSslProfiles
type LbServerSslProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbServerSslProfile `json:"items"`
}

// Repository type metadata.
var (
	LbServerSslProfile_Kind             = "LbServerSslProfile"
	LbServerSslProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbServerSslProfile_Kind}.String()
	LbServerSslProfile_KindAPIVersion   = LbServerSslProfile_Kind + "." + CRDGroupVersion.String()
	LbServerSslProfile_GroupVersionKind = CRDGroupVersion.WithKind(LbServerSslProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&LbServerSslProfile{}, &LbServerSslProfileList{})
}
