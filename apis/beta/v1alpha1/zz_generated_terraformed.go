/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this ClusterVirtualIp
func (mg *ClusterVirtualIp) GetTerraformResourceType() string {
	return "nsxt_cluster_virtual_ip"
}

// GetConnectionDetailsMapping for this ClusterVirtualIp
func (tr *ClusterVirtualIp) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ClusterVirtualIp
func (tr *ClusterVirtualIp) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ClusterVirtualIp
func (tr *ClusterVirtualIp) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ClusterVirtualIp
func (tr *ClusterVirtualIp) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ClusterVirtualIp
func (tr *ClusterVirtualIp) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ClusterVirtualIp
func (tr *ClusterVirtualIp) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ClusterVirtualIp using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ClusterVirtualIp) LateInitialize(attrs []byte) (bool, error) {
	params := &ClusterVirtualIpParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ClusterVirtualIp) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ComputeManager
func (mg *ComputeManager) GetTerraformResourceType() string {
	return "nsxt_compute_manager"
}

// GetConnectionDetailsMapping for this ComputeManager
func (tr *ComputeManager) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"credential[*].saml_login[*].token": "spec.forProvider.credential[*].samlLogin[*].tokenSecretRef", "credential[*].session_login[*].session_id": "spec.forProvider.credential[*].sessionLogin[*].sessionIdSecretRef", "credential[*].username_password_login[*].password": "spec.forProvider.credential[*].usernamePasswordLogin[*].passwordSecretRef", "credential[*].verifiable_asymmetric_login[*].asymmetric_credential": "spec.forProvider.credential[*].verifiableAsymmetricLogin[*].asymmetricCredentialSecretRef", "credential[*].verifiable_asymmetric_login[*].credential_key": "spec.forProvider.credential[*].verifiableAsymmetricLogin[*].credentialKeySecretRef", "credential[*].verifiable_asymmetric_login[*].credential_verifier": "spec.forProvider.credential[*].verifiableAsymmetricLogin[*].credentialVerifierSecretRef", "extension_certificate[*].private_key": "spec.forProvider.extensionCertificate[*].privateKeySecretRef"}
}

// GetObservation of this ComputeManager
func (tr *ComputeManager) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ComputeManager
func (tr *ComputeManager) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ComputeManager
func (tr *ComputeManager) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ComputeManager
func (tr *ComputeManager) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ComputeManager
func (tr *ComputeManager) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ComputeManager using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ComputeManager) LateInitialize(attrs []byte) (bool, error) {
	params := &ComputeManagerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ComputeManager) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this EdgeCluster
func (mg *EdgeCluster) GetTerraformResourceType() string {
	return "nsxt_edge_cluster"
}

// GetConnectionDetailsMapping for this EdgeCluster
func (tr *EdgeCluster) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this EdgeCluster
func (tr *EdgeCluster) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this EdgeCluster
func (tr *EdgeCluster) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this EdgeCluster
func (tr *EdgeCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this EdgeCluster
func (tr *EdgeCluster) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this EdgeCluster
func (tr *EdgeCluster) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this EdgeCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *EdgeCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &EdgeClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *EdgeCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this EdgeTransportNodeRtep
func (mg *EdgeTransportNodeRtep) GetTerraformResourceType() string {
	return "nsxt_edge_transport_node_rtep"
}

// GetConnectionDetailsMapping for this EdgeTransportNodeRtep
func (tr *EdgeTransportNodeRtep) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this EdgeTransportNodeRtep
func (tr *EdgeTransportNodeRtep) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this EdgeTransportNodeRtep
func (tr *EdgeTransportNodeRtep) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this EdgeTransportNodeRtep
func (tr *EdgeTransportNodeRtep) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this EdgeTransportNodeRtep
func (tr *EdgeTransportNodeRtep) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this EdgeTransportNodeRtep
func (tr *EdgeTransportNodeRtep) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this EdgeTransportNodeRtep using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *EdgeTransportNodeRtep) LateInitialize(attrs []byte) (bool, error) {
	params := &EdgeTransportNodeRtepParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *EdgeTransportNodeRtep) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FailureDomain
func (mg *FailureDomain) GetTerraformResourceType() string {
	return "nsxt_failure_domain"
}

// GetConnectionDetailsMapping for this FailureDomain
func (tr *FailureDomain) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FailureDomain
func (tr *FailureDomain) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FailureDomain
func (tr *FailureDomain) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FailureDomain
func (tr *FailureDomain) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FailureDomain
func (tr *FailureDomain) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FailureDomain
func (tr *FailureDomain) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FailureDomain using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FailureDomain) LateInitialize(attrs []byte) (bool, error) {
	params := &FailureDomainParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FailureDomain) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ManagerCluster
func (mg *ManagerCluster) GetTerraformResourceType() string {
	return "nsxt_manager_cluster"
}

// GetConnectionDetailsMapping for this ManagerCluster
func (tr *ManagerCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"node[*].password": "spec.forProvider.node[*].passwordSecretRef"}
}

// GetObservation of this ManagerCluster
func (tr *ManagerCluster) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ManagerCluster
func (tr *ManagerCluster) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ManagerCluster
func (tr *ManagerCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ManagerCluster
func (tr *ManagerCluster) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ManagerCluster
func (tr *ManagerCluster) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ManagerCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ManagerCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &ManagerClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ManagerCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyDistributedFloodProtectionProfile
func (mg *PolicyDistributedFloodProtectionProfile) GetTerraformResourceType() string {
	return "nsxt_policy_distributed_flood_protection_profile"
}

// GetConnectionDetailsMapping for this PolicyDistributedFloodProtectionProfile
func (tr *PolicyDistributedFloodProtectionProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyDistributedFloodProtectionProfile
func (tr *PolicyDistributedFloodProtectionProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyDistributedFloodProtectionProfile
func (tr *PolicyDistributedFloodProtectionProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyDistributedFloodProtectionProfile
func (tr *PolicyDistributedFloodProtectionProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyDistributedFloodProtectionProfile
func (tr *PolicyDistributedFloodProtectionProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyDistributedFloodProtectionProfile
func (tr *PolicyDistributedFloodProtectionProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyDistributedFloodProtectionProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyDistributedFloodProtectionProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyDistributedFloodProtectionProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyDistributedFloodProtectionProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyDistributedFloodProtectionProfileBinding
func (mg *PolicyDistributedFloodProtectionProfileBinding) GetTerraformResourceType() string {
	return "nsxt_policy_distributed_flood_protection_profile_binding"
}

// GetConnectionDetailsMapping for this PolicyDistributedFloodProtectionProfileBinding
func (tr *PolicyDistributedFloodProtectionProfileBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyDistributedFloodProtectionProfileBinding
func (tr *PolicyDistributedFloodProtectionProfileBinding) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyDistributedFloodProtectionProfileBinding
func (tr *PolicyDistributedFloodProtectionProfileBinding) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyDistributedFloodProtectionProfileBinding
func (tr *PolicyDistributedFloodProtectionProfileBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyDistributedFloodProtectionProfileBinding
func (tr *PolicyDistributedFloodProtectionProfileBinding) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyDistributedFloodProtectionProfileBinding
func (tr *PolicyDistributedFloodProtectionProfileBinding) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyDistributedFloodProtectionProfileBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyDistributedFloodProtectionProfileBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyDistributedFloodProtectionProfileBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyDistributedFloodProtectionProfileBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyGatewayFloodProtectionProfile
func (mg *PolicyGatewayFloodProtectionProfile) GetTerraformResourceType() string {
	return "nsxt_policy_gateway_flood_protection_profile"
}

// GetConnectionDetailsMapping for this PolicyGatewayFloodProtectionProfile
func (tr *PolicyGatewayFloodProtectionProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyGatewayFloodProtectionProfile
func (tr *PolicyGatewayFloodProtectionProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyGatewayFloodProtectionProfile
func (tr *PolicyGatewayFloodProtectionProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyGatewayFloodProtectionProfile
func (tr *PolicyGatewayFloodProtectionProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyGatewayFloodProtectionProfile
func (tr *PolicyGatewayFloodProtectionProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyGatewayFloodProtectionProfile
func (tr *PolicyGatewayFloodProtectionProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyGatewayFloodProtectionProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyGatewayFloodProtectionProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyGatewayFloodProtectionProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyGatewayFloodProtectionProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyGatewayFloodProtectionProfileBinding
func (mg *PolicyGatewayFloodProtectionProfileBinding) GetTerraformResourceType() string {
	return "nsxt_policy_gateway_flood_protection_profile_binding"
}

// GetConnectionDetailsMapping for this PolicyGatewayFloodProtectionProfileBinding
func (tr *PolicyGatewayFloodProtectionProfileBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyGatewayFloodProtectionProfileBinding
func (tr *PolicyGatewayFloodProtectionProfileBinding) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyGatewayFloodProtectionProfileBinding
func (tr *PolicyGatewayFloodProtectionProfileBinding) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyGatewayFloodProtectionProfileBinding
func (tr *PolicyGatewayFloodProtectionProfileBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyGatewayFloodProtectionProfileBinding
func (tr *PolicyGatewayFloodProtectionProfileBinding) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyGatewayFloodProtectionProfileBinding
func (tr *PolicyGatewayFloodProtectionProfileBinding) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyGatewayFloodProtectionProfileBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyGatewayFloodProtectionProfileBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyGatewayFloodProtectionProfileBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyGatewayFloodProtectionProfileBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyGlobalManager
func (mg *PolicyGlobalManager) GetTerraformResourceType() string {
	return "nsxt_policy_global_manager"
}

// GetConnectionDetailsMapping for this PolicyGlobalManager
func (tr *PolicyGlobalManager) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"connection_info[*].password": "spec.forProvider.connectionInfo[*].passwordSecretRef"}
}

// GetObservation of this PolicyGlobalManager
func (tr *PolicyGlobalManager) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyGlobalManager
func (tr *PolicyGlobalManager) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyGlobalManager
func (tr *PolicyGlobalManager) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyGlobalManager
func (tr *PolicyGlobalManager) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyGlobalManager
func (tr *PolicyGlobalManager) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyGlobalManager using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyGlobalManager) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyGlobalManagerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyGlobalManager) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyHostTransportNodeProfile
func (mg *PolicyHostTransportNodeProfile) GetTerraformResourceType() string {
	return "nsxt_policy_host_transport_node_profile"
}

// GetConnectionDetailsMapping for this PolicyHostTransportNodeProfile
func (tr *PolicyHostTransportNodeProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyHostTransportNodeProfile
func (tr *PolicyHostTransportNodeProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyHostTransportNodeProfile
func (tr *PolicyHostTransportNodeProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyHostTransportNodeProfile
func (tr *PolicyHostTransportNodeProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyHostTransportNodeProfile
func (tr *PolicyHostTransportNodeProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyHostTransportNodeProfile
func (tr *PolicyHostTransportNodeProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyHostTransportNodeProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyHostTransportNodeProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyHostTransportNodeProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyHostTransportNodeProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyLbClientSslProfile
func (mg *PolicyLbClientSslProfile) GetTerraformResourceType() string {
	return "nsxt_policy_lb_client_ssl_profile"
}

// GetConnectionDetailsMapping for this PolicyLbClientSslProfile
func (tr *PolicyLbClientSslProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyLbClientSslProfile
func (tr *PolicyLbClientSslProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyLbClientSslProfile
func (tr *PolicyLbClientSslProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyLbClientSslProfile
func (tr *PolicyLbClientSslProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyLbClientSslProfile
func (tr *PolicyLbClientSslProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyLbClientSslProfile
func (tr *PolicyLbClientSslProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyLbClientSslProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyLbClientSslProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyLbClientSslProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyLbClientSslProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyLbHttpApplicationProfile
func (mg *PolicyLbHttpApplicationProfile) GetTerraformResourceType() string {
	return "nsxt_policy_lb_http_application_profile"
}

// GetConnectionDetailsMapping for this PolicyLbHttpApplicationProfile
func (tr *PolicyLbHttpApplicationProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyLbHttpApplicationProfile
func (tr *PolicyLbHttpApplicationProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyLbHttpApplicationProfile
func (tr *PolicyLbHttpApplicationProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyLbHttpApplicationProfile
func (tr *PolicyLbHttpApplicationProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyLbHttpApplicationProfile
func (tr *PolicyLbHttpApplicationProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyLbHttpApplicationProfile
func (tr *PolicyLbHttpApplicationProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyLbHttpApplicationProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyLbHttpApplicationProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyLbHttpApplicationProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyLbHttpApplicationProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyLbHttpMonitorProfile
func (mg *PolicyLbHttpMonitorProfile) GetTerraformResourceType() string {
	return "nsxt_policy_lb_http_monitor_profile"
}

// GetConnectionDetailsMapping for this PolicyLbHttpMonitorProfile
func (tr *PolicyLbHttpMonitorProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyLbHttpMonitorProfile
func (tr *PolicyLbHttpMonitorProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyLbHttpMonitorProfile
func (tr *PolicyLbHttpMonitorProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyLbHttpMonitorProfile
func (tr *PolicyLbHttpMonitorProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyLbHttpMonitorProfile
func (tr *PolicyLbHttpMonitorProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyLbHttpMonitorProfile
func (tr *PolicyLbHttpMonitorProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyLbHttpMonitorProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyLbHttpMonitorProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyLbHttpMonitorProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyLbHttpMonitorProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyLbHttpsMonitorProfile
func (mg *PolicyLbHttpsMonitorProfile) GetTerraformResourceType() string {
	return "nsxt_policy_lb_https_monitor_profile"
}

// GetConnectionDetailsMapping for this PolicyLbHttpsMonitorProfile
func (tr *PolicyLbHttpsMonitorProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyLbHttpsMonitorProfile
func (tr *PolicyLbHttpsMonitorProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyLbHttpsMonitorProfile
func (tr *PolicyLbHttpsMonitorProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyLbHttpsMonitorProfile
func (tr *PolicyLbHttpsMonitorProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyLbHttpsMonitorProfile
func (tr *PolicyLbHttpsMonitorProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyLbHttpsMonitorProfile
func (tr *PolicyLbHttpsMonitorProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyLbHttpsMonitorProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyLbHttpsMonitorProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyLbHttpsMonitorProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyLbHttpsMonitorProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyLbIcmpMonitorProfile
func (mg *PolicyLbIcmpMonitorProfile) GetTerraformResourceType() string {
	return "nsxt_policy_lb_icmp_monitor_profile"
}

// GetConnectionDetailsMapping for this PolicyLbIcmpMonitorProfile
func (tr *PolicyLbIcmpMonitorProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyLbIcmpMonitorProfile
func (tr *PolicyLbIcmpMonitorProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyLbIcmpMonitorProfile
func (tr *PolicyLbIcmpMonitorProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyLbIcmpMonitorProfile
func (tr *PolicyLbIcmpMonitorProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyLbIcmpMonitorProfile
func (tr *PolicyLbIcmpMonitorProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyLbIcmpMonitorProfile
func (tr *PolicyLbIcmpMonitorProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyLbIcmpMonitorProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyLbIcmpMonitorProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyLbIcmpMonitorProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyLbIcmpMonitorProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyLbPassiveMonitorProfile
func (mg *PolicyLbPassiveMonitorProfile) GetTerraformResourceType() string {
	return "nsxt_policy_lb_passive_monitor_profile"
}

// GetConnectionDetailsMapping for this PolicyLbPassiveMonitorProfile
func (tr *PolicyLbPassiveMonitorProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyLbPassiveMonitorProfile
func (tr *PolicyLbPassiveMonitorProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyLbPassiveMonitorProfile
func (tr *PolicyLbPassiveMonitorProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyLbPassiveMonitorProfile
func (tr *PolicyLbPassiveMonitorProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyLbPassiveMonitorProfile
func (tr *PolicyLbPassiveMonitorProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyLbPassiveMonitorProfile
func (tr *PolicyLbPassiveMonitorProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyLbPassiveMonitorProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyLbPassiveMonitorProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyLbPassiveMonitorProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyLbPassiveMonitorProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyLbTcpMonitorProfile
func (mg *PolicyLbTcpMonitorProfile) GetTerraformResourceType() string {
	return "nsxt_policy_lb_tcp_monitor_profile"
}

// GetConnectionDetailsMapping for this PolicyLbTcpMonitorProfile
func (tr *PolicyLbTcpMonitorProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyLbTcpMonitorProfile
func (tr *PolicyLbTcpMonitorProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyLbTcpMonitorProfile
func (tr *PolicyLbTcpMonitorProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyLbTcpMonitorProfile
func (tr *PolicyLbTcpMonitorProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyLbTcpMonitorProfile
func (tr *PolicyLbTcpMonitorProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyLbTcpMonitorProfile
func (tr *PolicyLbTcpMonitorProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyLbTcpMonitorProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyLbTcpMonitorProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyLbTcpMonitorProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyLbTcpMonitorProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyLbUdpMonitorProfile
func (mg *PolicyLbUdpMonitorProfile) GetTerraformResourceType() string {
	return "nsxt_policy_lb_udp_monitor_profile"
}

// GetConnectionDetailsMapping for this PolicyLbUdpMonitorProfile
func (tr *PolicyLbUdpMonitorProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyLbUdpMonitorProfile
func (tr *PolicyLbUdpMonitorProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyLbUdpMonitorProfile
func (tr *PolicyLbUdpMonitorProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyLbUdpMonitorProfile
func (tr *PolicyLbUdpMonitorProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyLbUdpMonitorProfile
func (tr *PolicyLbUdpMonitorProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyLbUdpMonitorProfile
func (tr *PolicyLbUdpMonitorProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyLbUdpMonitorProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyLbUdpMonitorProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyLbUdpMonitorProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyLbUdpMonitorProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyMetadataProxy
func (mg *PolicyMetadataProxy) GetTerraformResourceType() string {
	return "nsxt_policy_metadata_proxy"
}

// GetConnectionDetailsMapping for this PolicyMetadataProxy
func (tr *PolicyMetadataProxy) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"secret": "spec.forProvider.secretSecretRef", "server_certificates[*]": "spec.forProvider.serverCertificates[*]SecretRef"}
}

// GetObservation of this PolicyMetadataProxy
func (tr *PolicyMetadataProxy) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyMetadataProxy
func (tr *PolicyMetadataProxy) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyMetadataProxy
func (tr *PolicyMetadataProxy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyMetadataProxy
func (tr *PolicyMetadataProxy) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyMetadataProxy
func (tr *PolicyMetadataProxy) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyMetadataProxy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyMetadataProxy) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyMetadataProxyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyMetadataProxy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicySite
func (mg *PolicySite) GetTerraformResourceType() string {
	return "nsxt_policy_site"
}

// GetConnectionDetailsMapping for this PolicySite
func (tr *PolicySite) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"site_connection_info[*].password": "spec.forProvider.siteConnectionInfo[*].passwordSecretRef"}
}

// GetObservation of this PolicySite
func (tr *PolicySite) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicySite
func (tr *PolicySite) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicySite
func (tr *PolicySite) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicySite
func (tr *PolicySite) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicySite
func (tr *PolicySite) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicySite using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicySite) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicySiteParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicySite) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyTier0GatewayGreTunnel
func (mg *PolicyTier0GatewayGreTunnel) GetTerraformResourceType() string {
	return "nsxt_policy_tier0_gateway_gre_tunnel"
}

// GetConnectionDetailsMapping for this PolicyTier0GatewayGreTunnel
func (tr *PolicyTier0GatewayGreTunnel) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyTier0GatewayGreTunnel
func (tr *PolicyTier0GatewayGreTunnel) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyTier0GatewayGreTunnel
func (tr *PolicyTier0GatewayGreTunnel) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyTier0GatewayGreTunnel
func (tr *PolicyTier0GatewayGreTunnel) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyTier0GatewayGreTunnel
func (tr *PolicyTier0GatewayGreTunnel) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyTier0GatewayGreTunnel
func (tr *PolicyTier0GatewayGreTunnel) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyTier0GatewayGreTunnel using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyTier0GatewayGreTunnel) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyTier0GatewayGreTunnelParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyTier0GatewayGreTunnel) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyTier0InterVrfRouting
func (mg *PolicyTier0InterVrfRouting) GetTerraformResourceType() string {
	return "nsxt_policy_tier0_inter_vrf_routing"
}

// GetConnectionDetailsMapping for this PolicyTier0InterVrfRouting
func (tr *PolicyTier0InterVrfRouting) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyTier0InterVrfRouting
func (tr *PolicyTier0InterVrfRouting) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyTier0InterVrfRouting
func (tr *PolicyTier0InterVrfRouting) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyTier0InterVrfRouting
func (tr *PolicyTier0InterVrfRouting) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyTier0InterVrfRouting
func (tr *PolicyTier0InterVrfRouting) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyTier0InterVrfRouting
func (tr *PolicyTier0InterVrfRouting) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyTier0InterVrfRouting using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyTier0InterVrfRouting) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyTier0InterVrfRoutingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyTier0InterVrfRouting) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyTransportZone
func (mg *PolicyTransportZone) GetTerraformResourceType() string {
	return "nsxt_policy_transport_zone"
}

// GetConnectionDetailsMapping for this PolicyTransportZone
func (tr *PolicyTransportZone) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyTransportZone
func (tr *PolicyTransportZone) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyTransportZone
func (tr *PolicyTransportZone) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyTransportZone
func (tr *PolicyTransportZone) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyTransportZone
func (tr *PolicyTransportZone) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyTransportZone
func (tr *PolicyTransportZone) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyTransportZone using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyTransportZone) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyTransportZoneParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyTransportZone) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this UpgradePrecheckAcknowledge
func (mg *UpgradePrecheckAcknowledge) GetTerraformResourceType() string {
	return "nsxt_upgrade_precheck_acknowledge"
}

// GetConnectionDetailsMapping for this UpgradePrecheckAcknowledge
func (tr *UpgradePrecheckAcknowledge) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this UpgradePrecheckAcknowledge
func (tr *UpgradePrecheckAcknowledge) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this UpgradePrecheckAcknowledge
func (tr *UpgradePrecheckAcknowledge) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this UpgradePrecheckAcknowledge
func (tr *UpgradePrecheckAcknowledge) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this UpgradePrecheckAcknowledge
func (tr *UpgradePrecheckAcknowledge) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this UpgradePrecheckAcknowledge
func (tr *UpgradePrecheckAcknowledge) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this UpgradePrecheckAcknowledge using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *UpgradePrecheckAcknowledge) LateInitialize(attrs []byte) (bool, error) {
	params := &UpgradePrecheckAcknowledgeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *UpgradePrecheckAcknowledge) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this UpgradePrepare
func (mg *UpgradePrepare) GetTerraformResourceType() string {
	return "nsxt_upgrade_prepare"
}

// GetConnectionDetailsMapping for this UpgradePrepare
func (tr *UpgradePrepare) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this UpgradePrepare
func (tr *UpgradePrepare) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this UpgradePrepare
func (tr *UpgradePrepare) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this UpgradePrepare
func (tr *UpgradePrepare) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this UpgradePrepare
func (tr *UpgradePrepare) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this UpgradePrepare
func (tr *UpgradePrepare) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this UpgradePrepare using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *UpgradePrepare) LateInitialize(attrs []byte) (bool, error) {
	params := &UpgradePrepareParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *UpgradePrepare) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this UpgradeRun
func (mg *UpgradeRun) GetTerraformResourceType() string {
	return "nsxt_upgrade_run"
}

// GetConnectionDetailsMapping for this UpgradeRun
func (tr *UpgradeRun) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this UpgradeRun
func (tr *UpgradeRun) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this UpgradeRun
func (tr *UpgradeRun) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this UpgradeRun
func (tr *UpgradeRun) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this UpgradeRun
func (tr *UpgradeRun) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this UpgradeRun
func (tr *UpgradeRun) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this UpgradeRun using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *UpgradeRun) LateInitialize(attrs []byte) (bool, error) {
	params := &UpgradeRunParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *UpgradeRun) GetTerraformSchemaVersion() int {
	return 0
}
