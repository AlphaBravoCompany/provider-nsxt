/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PrincipalIdentityObservation struct {

	// Id of the imported certificate pem
	CertificateID *string `json:"certificateId,omitempty" tf:"certificate_id,omitempty"`

	// PEM encoding of the new certificate
	CertificatePem *string `json:"certificatePem,omitempty" tf:"certificate_pem,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates whether the entities created by this principal should be protected
	IsProtected *bool `json:"isProtected,omitempty" tf:"is_protected,omitempty"`

	// Name of the principal
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Unique node-id of a principal
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`

	// List of roles that are associated with the user, limiting them to a path
	RolesForPath []PrincipalIdentityRolesForPathObservation `json:"rolesForPath,omitempty" tf:"roles_for_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PrincipalIdentityTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PrincipalIdentityParameters struct {

	// PEM encoding of the new certificate
	// +kubebuilder:validation:Optional
	CertificatePem *string `json:"certificatePem,omitempty" tf:"certificate_pem,omitempty"`

	// Indicates whether the entities created by this principal should be protected
	// +kubebuilder:validation:Optional
	IsProtected *bool `json:"isProtected,omitempty" tf:"is_protected,omitempty"`

	// Name of the principal
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Unique node-id of a principal
	// +kubebuilder:validation:Optional
	NodeID *string `json:"nodeId,omitempty" tf:"node_id,omitempty"`

	// List of roles that are associated with the user, limiting them to a path
	// +kubebuilder:validation:Optional
	RolesForPath []PrincipalIdentityRolesForPathParameters `json:"rolesForPath,omitempty" tf:"roles_for_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PrincipalIdentityTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PrincipalIdentityRolesForPathObservation struct {

	// Path of the entity in parent hierarchy.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Applicable roles
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type PrincipalIdentityRolesForPathParameters struct {

	// Path of the entity in parent hierarchy.
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// Applicable roles
	// +kubebuilder:validation:Required
	Roles []*string `json:"roles" tf:"roles,omitempty"`
}

type PrincipalIdentityTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PrincipalIdentityTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PrincipalIdentitySpec defines the desired state of PrincipalIdentity
type PrincipalIdentitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PrincipalIdentityParameters `json:"forProvider"`
}

// PrincipalIdentityStatus defines the observed state of PrincipalIdentity.
type PrincipalIdentityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PrincipalIdentityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PrincipalIdentity is the Schema for the PrincipalIdentitys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PrincipalIdentity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.certificatePem)",message="certificatePem is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.nodeId)",message="nodeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.rolesForPath)",message="rolesForPath is a required parameter"
	Spec   PrincipalIdentitySpec   `json:"spec"`
	Status PrincipalIdentityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PrincipalIdentityList contains a list of PrincipalIdentitys
type PrincipalIdentityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PrincipalIdentity `json:"items"`
}

// Repository type metadata.
var (
	PrincipalIdentity_Kind             = "PrincipalIdentity"
	PrincipalIdentity_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PrincipalIdentity_Kind}.String()
	PrincipalIdentity_KindAPIVersion   = PrincipalIdentity_Kind + "." + CRDGroupVersion.String()
	PrincipalIdentity_GroupVersionKind = CRDGroupVersion.WithKind(PrincipalIdentity_Kind)
)

func init() {
	SchemeBuilder.Register(&PrincipalIdentity{}, &PrincipalIdentityList{})
}
