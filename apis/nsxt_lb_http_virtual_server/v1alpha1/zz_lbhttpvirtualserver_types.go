/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClientSSLObservation struct {

	// List of CA ids for client authentication
	CAIds []*string `json:"caIds,omitempty" tf:"ca_ids,omitempty"`

	// Verification depth in the server certificate chain
	CertificateChainDepth *float64 `json:"certificateChainDepth,omitempty" tf:"certificate_chain_depth,omitempty"`

	// Whether client certificate authentication is mandatory
	ClientAuth *bool `json:"clientAuth,omitempty" tf:"client_auth,omitempty"`

	// Id of client SSL profile that defines reusable properties
	ClientSSLProfileID *string `json:"clientSslProfileId,omitempty" tf:"client_ssl_profile_id,omitempty"`

	// List of CRL ids for client authentication
	CrlIds []*string `json:"crlIds,omitempty" tf:"crl_ids,omitempty"`

	// Id of certificate that will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension
	DefaultCertificateID *string `json:"defaultCertificateId,omitempty" tf:"default_certificate_id,omitempty"`

	// List of certificates to serve different hostnames
	SniCertificateIds []*string `json:"sniCertificateIds,omitempty" tf:"sni_certificate_ids,omitempty"`
}

type ClientSSLParameters struct {

	// List of CA ids for client authentication
	// +kubebuilder:validation:Optional
	CAIds []*string `json:"caIds,omitempty" tf:"ca_ids,omitempty"`

	// Verification depth in the server certificate chain
	// +kubebuilder:validation:Optional
	CertificateChainDepth *float64 `json:"certificateChainDepth,omitempty" tf:"certificate_chain_depth,omitempty"`

	// Whether client certificate authentication is mandatory
	// +kubebuilder:validation:Optional
	ClientAuth *bool `json:"clientAuth,omitempty" tf:"client_auth,omitempty"`

	// Id of client SSL profile that defines reusable properties
	// +kubebuilder:validation:Required
	ClientSSLProfileID *string `json:"clientSslProfileId" tf:"client_ssl_profile_id,omitempty"`

	// List of CRL ids for client authentication
	// +kubebuilder:validation:Optional
	CrlIds []*string `json:"crlIds,omitempty" tf:"crl_ids,omitempty"`

	// Id of certificate that will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension
	// +kubebuilder:validation:Required
	DefaultCertificateID *string `json:"defaultCertificateId" tf:"default_certificate_id,omitempty"`

	// List of certificates to serve different hostnames
	// +kubebuilder:validation:Optional
	SniCertificateIds []*string `json:"sniCertificateIds,omitempty" tf:"sni_certificate_ids,omitempty"`
}

type LbHttpVirtualServerObservation struct {

	// Whether access log is enabled
	AccessLogEnabled *bool `json:"accessLogEnabled,omitempty" tf:"access_log_enabled,omitempty"`

	// The http application profile defines the application protocol characteristics
	ApplicationProfileID *string `json:"applicationProfileId,omitempty" tf:"application_profile_id,omitempty"`

	// Client SSL settings for Virtual Server
	ClientSSL []ClientSSLObservation `json:"clientSsl,omitempty" tf:"client_ssl,omitempty"`

	// Default pool member port
	DefaultPoolMemberPort *string `json:"defaultPoolMemberPort,omitempty" tf:"default_pool_member_port,omitempty"`

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Whether the virtual server is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Virtual server IP address
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// If not specified, connections are unlimited
	MaxConcurrentConnections *float64 `json:"maxConcurrentConnections,omitempty" tf:"max_concurrent_connections,omitempty"`

	// If not specified, connection rate is unlimited
	MaxNewConnectionRate *float64 `json:"maxNewConnectionRate,omitempty" tf:"max_new_connection_rate,omitempty"`

	// Persistence profile is used to allow related client connections to be sent to the same backend server
	PersistenceProfileID *string `json:"persistenceProfileId,omitempty" tf:"persistence_profile_id,omitempty"`

	// Server pool for backend connections
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Virtual server port
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Customization of load balancing behavior using match/action rules
	RuleIds []*string `json:"ruleIds,omitempty" tf:"rule_ids,omitempty"`

	// Server SSL settings for Virtual Server
	ServerSSL []ServerSSLObservation `json:"serverSsl,omitempty" tf:"server_ssl,omitempty"`

	// When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool
	SorryPoolID *string `json:"sorryPoolId,omitempty" tf:"sorry_pool_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbHttpVirtualServerParameters struct {

	// Whether access log is enabled
	// +kubebuilder:validation:Optional
	AccessLogEnabled *bool `json:"accessLogEnabled,omitempty" tf:"access_log_enabled,omitempty"`

	// The http application profile defines the application protocol characteristics
	// +kubebuilder:validation:Optional
	ApplicationProfileID *string `json:"applicationProfileId,omitempty" tf:"application_profile_id,omitempty"`

	// Client SSL settings for Virtual Server
	// +kubebuilder:validation:Optional
	ClientSSL []ClientSSLParameters `json:"clientSsl,omitempty" tf:"client_ssl,omitempty"`

	// Default pool member port
	// +kubebuilder:validation:Optional
	DefaultPoolMemberPort *string `json:"defaultPoolMemberPort,omitempty" tf:"default_pool_member_port,omitempty"`

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Whether the virtual server is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Virtual server IP address
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// If not specified, connections are unlimited
	// +kubebuilder:validation:Optional
	MaxConcurrentConnections *float64 `json:"maxConcurrentConnections,omitempty" tf:"max_concurrent_connections,omitempty"`

	// If not specified, connection rate is unlimited
	// +kubebuilder:validation:Optional
	MaxNewConnectionRate *float64 `json:"maxNewConnectionRate,omitempty" tf:"max_new_connection_rate,omitempty"`

	// Persistence profile is used to allow related client connections to be sent to the same backend server
	// +kubebuilder:validation:Optional
	PersistenceProfileID *string `json:"persistenceProfileId,omitempty" tf:"persistence_profile_id,omitempty"`

	// Server pool for backend connections
	// +kubebuilder:validation:Optional
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Virtual server port
	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// Customization of load balancing behavior using match/action rules
	// +kubebuilder:validation:Optional
	RuleIds []*string `json:"ruleIds,omitempty" tf:"rule_ids,omitempty"`

	// Server SSL settings for Virtual Server
	// +kubebuilder:validation:Optional
	ServerSSL []ServerSSLParameters `json:"serverSsl,omitempty" tf:"server_ssl,omitempty"`

	// When load balancer can not select a backend server to serve the request in default pool or pool in rules, the request would be served by sorry server pool
	// +kubebuilder:validation:Optional
	SorryPoolID *string `json:"sorryPoolId,omitempty" tf:"sorry_pool_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ServerSSLObservation struct {

	// List of CA ids for server authentication
	CAIds []*string `json:"caIds,omitempty" tf:"ca_ids,omitempty"`

	// Verification depth in the server certificate chain
	CertificateChainDepth *float64 `json:"certificateChainDepth,omitempty" tf:"certificate_chain_depth,omitempty"`

	// Id of certificate that will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension
	ClientCertificateID *string `json:"clientCertificateId,omitempty" tf:"client_certificate_id,omitempty"`

	// List of CRL ids for server authentication
	CrlIds []*string `json:"crlIds,omitempty" tf:"crl_ids,omitempty"`

	// Server authentication mode
	ServerAuth *bool `json:"serverAuth,omitempty" tf:"server_auth,omitempty"`

	// Id of server SSL profile that defines reusable properties
	ServerSSLProfileID *string `json:"serverSslProfileId,omitempty" tf:"server_ssl_profile_id,omitempty"`
}

type ServerSSLParameters struct {

	// List of CA ids for server authentication
	// +kubebuilder:validation:Optional
	CAIds []*string `json:"caIds,omitempty" tf:"ca_ids,omitempty"`

	// Verification depth in the server certificate chain
	// +kubebuilder:validation:Optional
	CertificateChainDepth *float64 `json:"certificateChainDepth,omitempty" tf:"certificate_chain_depth,omitempty"`

	// Id of certificate that will be used if the server does not host multiple hostnames on the same IP address or if the client does not support SNI extension
	// +kubebuilder:validation:Optional
	ClientCertificateID *string `json:"clientCertificateId,omitempty" tf:"client_certificate_id,omitempty"`

	// List of CRL ids for server authentication
	// +kubebuilder:validation:Optional
	CrlIds []*string `json:"crlIds,omitempty" tf:"crl_ids,omitempty"`

	// Server authentication mode
	// +kubebuilder:validation:Optional
	ServerAuth *bool `json:"serverAuth,omitempty" tf:"server_auth,omitempty"`

	// Id of server SSL profile that defines reusable properties
	// +kubebuilder:validation:Required
	ServerSSLProfileID *string `json:"serverSslProfileId" tf:"server_ssl_profile_id,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LbHttpVirtualServerSpec defines the desired state of LbHttpVirtualServer
type LbHttpVirtualServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbHttpVirtualServerParameters `json:"forProvider"`
}

// LbHttpVirtualServerStatus defines the observed state of LbHttpVirtualServer.
type LbHttpVirtualServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbHttpVirtualServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbHttpVirtualServer is the Schema for the LbHttpVirtualServers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LbHttpVirtualServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.applicationProfileId)",message="applicationProfileId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ipAddress)",message="ipAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.port)",message="port is a required parameter"
	Spec   LbHttpVirtualServerSpec   `json:"spec"`
	Status LbHttpVirtualServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbHttpVirtualServerList contains a list of LbHttpVirtualServers
type LbHttpVirtualServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbHttpVirtualServer `json:"items"`
}

// Repository type metadata.
var (
	LbHttpVirtualServer_Kind             = "LbHttpVirtualServer"
	LbHttpVirtualServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbHttpVirtualServer_Kind}.String()
	LbHttpVirtualServer_KindAPIVersion   = LbHttpVirtualServer_Kind + "." + CRDGroupVersion.String()
	LbHttpVirtualServer_GroupVersionKind = CRDGroupVersion.WithKind(LbHttpVirtualServer_Kind)
)

func init() {
	SchemeBuilder.Register(&LbHttpVirtualServer{}, &LbHttpVirtualServerList{})
}
