/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MacLearningObservation struct {

	// Allowing source MAC address learning
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The maximum number of MAC addresses that can be learned on this port
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The policy after MAC Limit is exceeded
	LimitPolicy *string `json:"limitPolicy,omitempty" tf:"limit_policy,omitempty"`

	// Allowing flooding for unlearned MAC for ingress traffic
	UnicastFloodingAllowed *bool `json:"unicastFloodingAllowed,omitempty" tf:"unicast_flooding_allowed,omitempty"`
}

type MacLearningParameters struct {

	// Allowing source MAC address learning
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The maximum number of MAC addresses that can be learned on this port
	// +kubebuilder:validation:Optional
	Limit *float64 `json:"limit,omitempty" tf:"limit,omitempty"`

	// The policy after MAC Limit is exceeded
	// +kubebuilder:validation:Optional
	LimitPolicy *string `json:"limitPolicy,omitempty" tf:"limit_policy,omitempty"`

	// Allowing flooding for unlearned MAC for ingress traffic
	// +kubebuilder:validation:Optional
	UnicastFloodingAllowed *bool `json:"unicastFloodingAllowed,omitempty" tf:"unicast_flooding_allowed,omitempty"`
}

type MacManagementSwitchingProfileObservation struct {

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Allowing source MAC address change
	MacChangeAllowed *bool `json:"macChangeAllowed,omitempty" tf:"mac_change_allowed,omitempty"`

	MacLearning []MacLearningObservation `json:"macLearning,omitempty" tf:"mac_learning,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type MacManagementSwitchingProfileParameters struct {

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Allowing source MAC address change
	// +kubebuilder:validation:Optional
	MacChangeAllowed *bool `json:"macChangeAllowed,omitempty" tf:"mac_change_allowed,omitempty"`

	// +kubebuilder:validation:Optional
	MacLearning []MacLearningParameters `json:"macLearning,omitempty" tf:"mac_learning,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// MacManagementSwitchingProfileSpec defines the desired state of MacManagementSwitchingProfile
type MacManagementSwitchingProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MacManagementSwitchingProfileParameters `json:"forProvider"`
}

// MacManagementSwitchingProfileStatus defines the observed state of MacManagementSwitchingProfile.
type MacManagementSwitchingProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MacManagementSwitchingProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MacManagementSwitchingProfile is the Schema for the MacManagementSwitchingProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type MacManagementSwitchingProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MacManagementSwitchingProfileSpec   `json:"spec"`
	Status            MacManagementSwitchingProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MacManagementSwitchingProfileList contains a list of MacManagementSwitchingProfiles
type MacManagementSwitchingProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MacManagementSwitchingProfile `json:"items"`
}

// Repository type metadata.
var (
	MacManagementSwitchingProfile_Kind             = "MacManagementSwitchingProfile"
	MacManagementSwitchingProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MacManagementSwitchingProfile_Kind}.String()
	MacManagementSwitchingProfile_KindAPIVersion   = MacManagementSwitchingProfile_Kind + "." + CRDGroupVersion.String()
	MacManagementSwitchingProfile_GroupVersionKind = CRDGroupVersion.WithKind(MacManagementSwitchingProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&MacManagementSwitchingProfile{}, &MacManagementSwitchingProfileList{})
}
