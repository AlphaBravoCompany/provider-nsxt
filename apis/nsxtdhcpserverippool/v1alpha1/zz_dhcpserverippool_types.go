/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DHCPGenericOptionObservation struct {

	// DHCP option code, [0-255]
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// DHCP option values
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type DHCPGenericOptionParameters struct {

	// DHCP option code, [0-255]
	// +kubebuilder:validation:Required
	Code *float64 `json:"code" tf:"code,omitempty"`

	// DHCP option values
	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type DHCPOption121Observation struct {

	// Destination in cidr
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Next hop IP
	NextHop *string `json:"nextHop,omitempty" tf:"next_hop,omitempty"`
}

type DHCPOption121Parameters struct {

	// Destination in cidr
	// +kubebuilder:validation:Required
	Network *string `json:"network" tf:"network,omitempty"`

	// Next hop IP
	// +kubebuilder:validation:Required
	NextHop *string `json:"nextHop" tf:"next_hop,omitempty"`
}

type DhcpServerIpPoolObservation struct {

	// Generic DHCP options
	DHCPGenericOption []DHCPGenericOptionObservation `json:"dhcpGenericOption,omitempty" tf:"dhcp_generic_option,omitempty"`

	// DHCP classless static routes
	DHCPOption121 []DHCPOption121Observation `json:"dhcpOption121,omitempty" tf:"dhcp_option_121,omitempty"`

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Error threshold
	ErrorThreshold *float64 `json:"errorThreshold,omitempty" tf:"error_threshold,omitempty"`

	// Gateway ip
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of IP Ranges
	IPRange []IPRangeObservation `json:"ipRange,omitempty" tf:"ip_range,omitempty"`

	// Lease time, in seconds
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// Id of dhcp server this pool is serving
	LogicalDHCPServerID *string `json:"logicalDhcpServerId,omitempty" tf:"logical_dhcp_server_id,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Warning threshold
	WarningThreshold *float64 `json:"warningThreshold,omitempty" tf:"warning_threshold,omitempty"`
}

type DhcpServerIpPoolParameters struct {

	// Generic DHCP options
	// +kubebuilder:validation:Optional
	DHCPGenericOption []DHCPGenericOptionParameters `json:"dhcpGenericOption,omitempty" tf:"dhcp_generic_option,omitempty"`

	// DHCP classless static routes
	// +kubebuilder:validation:Optional
	DHCPOption121 []DHCPOption121Parameters `json:"dhcpOption121,omitempty" tf:"dhcp_option_121,omitempty"`

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Error threshold
	// +kubebuilder:validation:Optional
	ErrorThreshold *float64 `json:"errorThreshold,omitempty" tf:"error_threshold,omitempty"`

	// Gateway ip
	// +kubebuilder:validation:Optional
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// List of IP Ranges
	// +kubebuilder:validation:Optional
	IPRange []IPRangeParameters `json:"ipRange,omitempty" tf:"ip_range,omitempty"`

	// Lease time, in seconds
	// +kubebuilder:validation:Optional
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// Id of dhcp server this pool is serving
	// +kubebuilder:validation:Optional
	LogicalDHCPServerID *string `json:"logicalDhcpServerId,omitempty" tf:"logical_dhcp_server_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Warning threshold
	// +kubebuilder:validation:Optional
	WarningThreshold *float64 `json:"warningThreshold,omitempty" tf:"warning_threshold,omitempty"`
}

type IPRangeObservation struct {
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type IPRangeParameters struct {

	// +kubebuilder:validation:Required
	End *string `json:"end" tf:"end,omitempty"`

	// +kubebuilder:validation:Required
	Start *string `json:"start" tf:"start,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// DhcpServerIpPoolSpec defines the desired state of DhcpServerIpPool
type DhcpServerIpPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DhcpServerIpPoolParameters `json:"forProvider"`
}

// DhcpServerIpPoolStatus defines the observed state of DhcpServerIpPool.
type DhcpServerIpPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DhcpServerIpPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DhcpServerIpPool is the Schema for the DhcpServerIpPools API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type DhcpServerIpPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.logicalDhcpServerId)",message="logicalDhcpServerId is a required parameter"
	Spec   DhcpServerIpPoolSpec   `json:"spec"`
	Status DhcpServerIpPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DhcpServerIpPoolList contains a list of DhcpServerIpPools
type DhcpServerIpPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DhcpServerIpPool `json:"items"`
}

// Repository type metadata.
var (
	DhcpServerIpPool_Kind             = "DhcpServerIpPool"
	DhcpServerIpPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DhcpServerIpPool_Kind}.String()
	DhcpServerIpPool_KindAPIVersion   = DhcpServerIpPool_Kind + "." + CRDGroupVersion.String()
	DhcpServerIpPool_GroupVersionKind = CRDGroupVersion.WithKind(DhcpServerIpPool_Kind)
)

func init() {
	SchemeBuilder.Register(&DhcpServerIpPool{}, &DhcpServerIpPoolList{})
}
