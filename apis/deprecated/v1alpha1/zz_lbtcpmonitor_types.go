/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbTcpMonitorObservation struct {

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Number of consecutive checks that must fail before marking it down
	FallCount *float64 `json:"fallCount,omitempty" tf:"fall_count,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The frequency at which the system issues the monitor check (in seconds)
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not supported
	MonitorPort *string `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	// Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not supported
	Receive *string `json:"receive,omitempty" tf:"receive,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Number of consecutive checks that must pass before marking it up
	RiseCount *float64 `json:"riseCount,omitempty" tf:"rise_count,omitempty"`

	// If both send and receive are not specified, then just a TCP connection is established (3-way handshake) to validate server is healthy, no data is sent.
	Send *string `json:"send,omitempty" tf:"send,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []LbTcpMonitorTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Number of seconds the target has to respond to the monitor request
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type LbTcpMonitorParameters struct {

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Number of consecutive checks that must fail before marking it down
	// +kubebuilder:validation:Optional
	FallCount *float64 `json:"fallCount,omitempty" tf:"fall_count,omitempty"`

	// The frequency at which the system issues the monitor check (in seconds)
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// If the monitor port is specified, it would override pool member port setting for healthcheck. A port range is not supported
	// +kubebuilder:validation:Optional
	MonitorPort *string `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	// Expected data, if specified, can be anywhere in the response and it has to be a string, regular expressions are not supported
	// +kubebuilder:validation:Optional
	Receive *string `json:"receive,omitempty" tf:"receive,omitempty"`

	// Number of consecutive checks that must pass before marking it up
	// +kubebuilder:validation:Optional
	RiseCount *float64 `json:"riseCount,omitempty" tf:"rise_count,omitempty"`

	// If both send and receive are not specified, then just a TCP connection is established (3-way handshake) to validate server is healthy, no data is sent.
	// +kubebuilder:validation:Optional
	Send *string `json:"send,omitempty" tf:"send,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []LbTcpMonitorTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Number of seconds the target has to respond to the monitor request
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type LbTcpMonitorTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbTcpMonitorTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LbTcpMonitorSpec defines the desired state of LbTcpMonitor
type LbTcpMonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbTcpMonitorParameters `json:"forProvider"`
}

// LbTcpMonitorStatus defines the observed state of LbTcpMonitor.
type LbTcpMonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbTcpMonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbTcpMonitor is the Schema for the LbTcpMonitors API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LbTcpMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbTcpMonitorSpec   `json:"spec"`
	Status            LbTcpMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbTcpMonitorList contains a list of LbTcpMonitors
type LbTcpMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbTcpMonitor `json:"items"`
}

// Repository type metadata.
var (
	LbTcpMonitor_Kind             = "LbTcpMonitor"
	LbTcpMonitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbTcpMonitor_Kind}.String()
	LbTcpMonitor_KindAPIVersion   = LbTcpMonitor_Kind + "." + CRDGroupVersion.String()
	LbTcpMonitor_GroupVersionKind = CRDGroupVersion.WithKind(LbTcpMonitor_Kind)
)

func init() {
	SchemeBuilder.Register(&LbTcpMonitor{}, &LbTcpMonitorList{})
}
