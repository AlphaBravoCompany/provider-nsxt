/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyVtepHaHostSwitchProfileObservation struct {

	// Enabled status of autonomous recovery option
	AutoRecovery *bool `json:"autoRecovery,omitempty" tf:"auto_recovery,omitempty"`

	// Start time of autonomous recovery (in seconds)
	AutoRecoveryInitialWait *float64 `json:"autoRecoveryInitialWait,omitempty" tf:"auto_recovery_initial_wait,omitempty"`

	// Maximum backoff time for autonomous recovery (in seconds)
	AutoRecoveryMaxBackoff *float64 `json:"autoRecoveryMaxBackoff,omitempty" tf:"auto_recovery_max_backoff,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Enabled status of VTEP High Availability feature
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// VTEP High Availability failover timeout (in seconds)
	FailoverTimeout *float64 `json:"failoverTimeout,omitempty" tf:"failover_timeout,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Computed ID of the realized object
	RealizedID *string `json:"realizedId,omitempty" tf:"realized_id,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyVtepHaHostSwitchProfileTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyVtepHaHostSwitchProfileParameters struct {

	// Enabled status of autonomous recovery option
	// +kubebuilder:validation:Optional
	AutoRecovery *bool `json:"autoRecovery,omitempty" tf:"auto_recovery,omitempty"`

	// Start time of autonomous recovery (in seconds)
	// +kubebuilder:validation:Optional
	AutoRecoveryInitialWait *float64 `json:"autoRecoveryInitialWait,omitempty" tf:"auto_recovery_initial_wait,omitempty"`

	// Maximum backoff time for autonomous recovery (in seconds)
	// +kubebuilder:validation:Optional
	AutoRecoveryMaxBackoff *float64 `json:"autoRecoveryMaxBackoff,omitempty" tf:"auto_recovery_max_backoff,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Enabled status of VTEP High Availability feature
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// VTEP High Availability failover timeout (in seconds)
	// +kubebuilder:validation:Optional
	FailoverTimeout *float64 `json:"failoverTimeout,omitempty" tf:"failover_timeout,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyVtepHaHostSwitchProfileTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyVtepHaHostSwitchProfileTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyVtepHaHostSwitchProfileTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyVtepHaHostSwitchProfileSpec defines the desired state of PolicyVtepHaHostSwitchProfile
type PolicyVtepHaHostSwitchProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyVtepHaHostSwitchProfileParameters `json:"forProvider"`
}

// PolicyVtepHaHostSwitchProfileStatus defines the observed state of PolicyVtepHaHostSwitchProfile.
type PolicyVtepHaHostSwitchProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyVtepHaHostSwitchProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyVtepHaHostSwitchProfile is the Schema for the PolicyVtepHaHostSwitchProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyVtepHaHostSwitchProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   PolicyVtepHaHostSwitchProfileSpec   `json:"spec"`
	Status PolicyVtepHaHostSwitchProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyVtepHaHostSwitchProfileList contains a list of PolicyVtepHaHostSwitchProfiles
type PolicyVtepHaHostSwitchProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyVtepHaHostSwitchProfile `json:"items"`
}

// Repository type metadata.
var (
	PolicyVtepHaHostSwitchProfile_Kind             = "PolicyVtepHaHostSwitchProfile"
	PolicyVtepHaHostSwitchProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyVtepHaHostSwitchProfile_Kind}.String()
	PolicyVtepHaHostSwitchProfile_KindAPIVersion   = PolicyVtepHaHostSwitchProfile_Kind + "." + CRDGroupVersion.String()
	PolicyVtepHaHostSwitchProfile_GroupVersionKind = CRDGroupVersion.WithKind(PolicyVtepHaHostSwitchProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyVtepHaHostSwitchProfile{}, &PolicyVtepHaHostSwitchProfileList{})
}
