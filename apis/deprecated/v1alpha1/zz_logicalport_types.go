/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogicalPortObservation struct {

	// Represents Desired state of the object
	AdminState *string `json:"adminState,omitempty" tf:"admin_state,omitempty"`

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Id of the Logical switch that this port belongs to
	LogicalSwitchID *string `json:"logicalSwitchId,omitempty" tf:"logical_switch_id,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// List of IDs of switching profiles (of various types) to be associated with this object. Default switching profiles will be used if not specified
	SwitchingProfileID []SwitchingProfileIDObservation `json:"switchingProfileId,omitempty" tf:"switching_profile_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []LogicalPortTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LogicalPortParameters struct {

	// Represents Desired state of the object
	// +kubebuilder:validation:Optional
	AdminState *string `json:"adminState,omitempty" tf:"admin_state,omitempty"`

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Id of the Logical switch that this port belongs to
	// +kubebuilder:validation:Optional
	LogicalSwitchID *string `json:"logicalSwitchId,omitempty" tf:"logical_switch_id,omitempty"`

	// List of IDs of switching profiles (of various types) to be associated with this object. Default switching profiles will be used if not specified
	// +kubebuilder:validation:Optional
	SwitchingProfileID []SwitchingProfileIDParameters `json:"switchingProfileId,omitempty" tf:"switching_profile_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []LogicalPortTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LogicalPortTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LogicalPortTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type SwitchingProfileIDObservation struct {

	// The resource type of this profile
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The ID of this profile
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SwitchingProfileIDParameters struct {

	// The resource type of this profile
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// The ID of this profile
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// LogicalPortSpec defines the desired state of LogicalPort
type LogicalPortSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogicalPortParameters `json:"forProvider"`
}

// LogicalPortStatus defines the observed state of LogicalPort.
type LogicalPortStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogicalPortObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalPort is the Schema for the LogicalPorts API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LogicalPort struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.logicalSwitchId)",message="logicalSwitchId is a required parameter"
	Spec   LogicalPortSpec   `json:"spec"`
	Status LogicalPortStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalPortList contains a list of LogicalPorts
type LogicalPortList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicalPort `json:"items"`
}

// Repository type metadata.
var (
	LogicalPort_Kind             = "LogicalPort"
	LogicalPort_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogicalPort_Kind}.String()
	LogicalPort_KindAPIVersion   = LogicalPort_Kind + "." + CRDGroupVersion.String()
	LogicalPort_GroupVersionKind = CRDGroupVersion.WithKind(LogicalPort_Kind)
)

func init() {
	SchemeBuilder.Register(&LogicalPort{}, &LogicalPortList{})
}
