/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyGatewayDnsForwarderContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type PolicyGatewayDnsForwarderContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type PolicyGatewayDnsForwarderObservation struct {

	// Cache size in KB
	CacheSize *float64 `json:"cacheSize,omitempty" tf:"cache_size,omitempty"`

	// List of conditional (FQDN) forwarder zone paths
	ConditionalForwarderZonePaths []*string `json:"conditionalForwarderZonePaths,omitempty" tf:"conditional_forwarder_zone_paths,omitempty"`

	// Resource context
	Context []PolicyGatewayDnsForwarderContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// Zone to which DNS requests are forwarded by default
	DefaultForwarderZonePath *string `json:"defaultForwarderZonePath,omitempty" tf:"default_forwarder_zone_path,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Policy path for the Gateway
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP on which the DNS Forwarder listens
	ListenerIP *string `json:"listenerIp,omitempty" tf:"listener_ip,omitempty"`

	// Log level
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyGatewayDnsForwarderTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyGatewayDnsForwarderParameters struct {

	// Cache size in KB
	// +kubebuilder:validation:Optional
	CacheSize *float64 `json:"cacheSize,omitempty" tf:"cache_size,omitempty"`

	// List of conditional (FQDN) forwarder zone paths
	// +kubebuilder:validation:Optional
	ConditionalForwarderZonePaths []*string `json:"conditionalForwarderZonePaths,omitempty" tf:"conditional_forwarder_zone_paths,omitempty"`

	// Resource context
	// +kubebuilder:validation:Optional
	Context []PolicyGatewayDnsForwarderContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// Zone to which DNS requests are forwarded by default
	// +kubebuilder:validation:Optional
	DefaultForwarderZonePath *string `json:"defaultForwarderZonePath,omitempty" tf:"default_forwarder_zone_path,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Policy path for the Gateway
	// +kubebuilder:validation:Optional
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	// IP on which the DNS Forwarder listens
	// +kubebuilder:validation:Optional
	ListenerIP *string `json:"listenerIp,omitempty" tf:"listener_ip,omitempty"`

	// Log level
	// +kubebuilder:validation:Optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyGatewayDnsForwarderTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyGatewayDnsForwarderTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyGatewayDnsForwarderTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyGatewayDnsForwarderSpec defines the desired state of PolicyGatewayDnsForwarder
type PolicyGatewayDnsForwarderSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyGatewayDnsForwarderParameters `json:"forProvider"`
}

// PolicyGatewayDnsForwarderStatus defines the observed state of PolicyGatewayDnsForwarder.
type PolicyGatewayDnsForwarderStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyGatewayDnsForwarderObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyGatewayDnsForwarder is the Schema for the PolicyGatewayDnsForwarders API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyGatewayDnsForwarder struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.defaultForwarderZonePath)",message="defaultForwarderZonePath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.gatewayPath)",message="gatewayPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.listenerIp)",message="listenerIp is a required parameter"
	Spec   PolicyGatewayDnsForwarderSpec   `json:"spec"`
	Status PolicyGatewayDnsForwarderStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyGatewayDnsForwarderList contains a list of PolicyGatewayDnsForwarders
type PolicyGatewayDnsForwarderList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyGatewayDnsForwarder `json:"items"`
}

// Repository type metadata.
var (
	PolicyGatewayDnsForwarder_Kind             = "PolicyGatewayDnsForwarder"
	PolicyGatewayDnsForwarder_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyGatewayDnsForwarder_Kind}.String()
	PolicyGatewayDnsForwarder_KindAPIVersion   = PolicyGatewayDnsForwarder_Kind + "." + CRDGroupVersion.String()
	PolicyGatewayDnsForwarder_GroupVersionKind = CRDGroupVersion.WithKind(PolicyGatewayDnsForwarder_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyGatewayDnsForwarder{}, &PolicyGatewayDnsForwarderList{})
}
