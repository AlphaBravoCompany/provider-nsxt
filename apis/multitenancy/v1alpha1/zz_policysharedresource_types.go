/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicySharedResourceObservation struct {

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// List of resources to be shared
	ResourceObject []ResourceObjectObservation `json:"resourceObject,omitempty" tf:"resource_object,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Share ID to associate the resource to
	SharePath *string `json:"sharePath,omitempty" tf:"share_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicySharedResourceTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicySharedResourceParameters struct {

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// List of resources to be shared
	// +kubebuilder:validation:Optional
	ResourceObject []ResourceObjectParameters `json:"resourceObject,omitempty" tf:"resource_object,omitempty"`

	// Share ID to associate the resource to
	// +kubebuilder:validation:Optional
	SharePath *string `json:"sharePath,omitempty" tf:"share_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicySharedResourceTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicySharedResourceTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicySharedResourceTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ResourceObjectObservation struct {

	// Denotes if the children of the shared path are also shared
	IncludeChildren *bool `json:"includeChildren,omitempty" tf:"include_children,omitempty"`

	// Path of the resource to be shared
	ResourcePath *string `json:"resourcePath,omitempty" tf:"resource_path,omitempty"`
}

type ResourceObjectParameters struct {

	// Denotes if the children of the shared path are also shared
	// +kubebuilder:validation:Optional
	IncludeChildren *bool `json:"includeChildren,omitempty" tf:"include_children,omitempty"`

	// Path of the resource to be shared
	// +kubebuilder:validation:Required
	ResourcePath *string `json:"resourcePath" tf:"resource_path,omitempty"`
}

// PolicySharedResourceSpec defines the desired state of PolicySharedResource
type PolicySharedResourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicySharedResourceParameters `json:"forProvider"`
}

// PolicySharedResourceStatus defines the observed state of PolicySharedResource.
type PolicySharedResourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicySharedResourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicySharedResource is the Schema for the PolicySharedResources API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicySharedResource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.resourceObject)",message="resourceObject is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.sharePath)",message="sharePath is a required parameter"
	Spec   PolicySharedResourceSpec   `json:"spec"`
	Status PolicySharedResourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicySharedResourceList contains a list of PolicySharedResources
type PolicySharedResourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicySharedResource `json:"items"`
}

// Repository type metadata.
var (
	PolicySharedResource_Kind             = "PolicySharedResource"
	PolicySharedResource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicySharedResource_Kind}.String()
	PolicySharedResource_KindAPIVersion   = PolicySharedResource_Kind + "." + CRDGroupVersion.String()
	PolicySharedResource_GroupVersionKind = CRDGroupVersion.WithKind(PolicySharedResource_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicySharedResource{}, &PolicySharedResourceList{})
}
