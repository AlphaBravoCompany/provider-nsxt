/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyL2VpnServiceObservation struct {

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// This property applies only in SERVER mode. If set to true, traffic from any client will be replicated to all other clients. If set to false, traffic received from clients is only replicated to the local VPN endpoint.
	EnableHub *bool `json:"enableHub,omitempty" tf:"enable_hub,omitempty"`

	// IP Pool to allocate local and peer endpoint IPs.
	EncapIPPool []*string `json:"encapIpPool,omitempty" tf:"encap_ip_pool,omitempty"`

	// Policy path for the gateway.
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Polciy path for the locale service.
	LocaleServicePath *string `json:"localeServicePath,omitempty" tf:"locale_service_path,omitempty"`

	// Specify an L2VPN service mode as SERVER or CLIENT.
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyL2VpnServiceTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyL2VpnServiceParameters struct {

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// This property applies only in SERVER mode. If set to true, traffic from any client will be replicated to all other clients. If set to false, traffic received from clients is only replicated to the local VPN endpoint.
	// +kubebuilder:validation:Optional
	EnableHub *bool `json:"enableHub,omitempty" tf:"enable_hub,omitempty"`

	// IP Pool to allocate local and peer endpoint IPs.
	// +kubebuilder:validation:Optional
	EncapIPPool []*string `json:"encapIpPool,omitempty" tf:"encap_ip_pool,omitempty"`

	// Policy path for the gateway.
	// +kubebuilder:validation:Optional
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	// Polciy path for the locale service.
	// +kubebuilder:validation:Optional
	LocaleServicePath *string `json:"localeServicePath,omitempty" tf:"locale_service_path,omitempty"`

	// Specify an L2VPN service mode as SERVER or CLIENT.
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyL2VpnServiceTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyL2VpnServiceTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyL2VpnServiceTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyL2VpnServiceSpec defines the desired state of PolicyL2VpnService
type PolicyL2VpnServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyL2VpnServiceParameters `json:"forProvider"`
}

// PolicyL2VpnServiceStatus defines the observed state of PolicyL2VpnService.
type PolicyL2VpnServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyL2VpnServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyL2VpnService is the Schema for the PolicyL2VpnServices API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyL2VpnService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   PolicyL2VpnServiceSpec   `json:"spec"`
	Status PolicyL2VpnServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyL2VpnServiceList contains a list of PolicyL2VpnServices
type PolicyL2VpnServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyL2VpnService `json:"items"`
}

// Repository type metadata.
var (
	PolicyL2VpnService_Kind             = "PolicyL2VpnService"
	PolicyL2VpnService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyL2VpnService_Kind}.String()
	PolicyL2VpnService_KindAPIVersion   = PolicyL2VpnService_Kind + "." + CRDGroupVersion.String()
	PolicyL2VpnService_GroupVersionKind = CRDGroupVersion.WithKind(PolicyL2VpnService_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyL2VpnService{}, &PolicyL2VpnServiceList{})
}
