/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogicalDhcpServerDHCPGenericOptionObservation struct {

	// DHCP option code, [0-255]
	Code *float64 `json:"code,omitempty" tf:"code,omitempty"`

	// DHCP option values
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type LogicalDhcpServerDHCPGenericOptionParameters struct {

	// DHCP option code, [0-255]
	// +kubebuilder:validation:Required
	Code *float64 `json:"code" tf:"code,omitempty"`

	// DHCP option values
	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type LogicalDhcpServerDHCPOption121Observation struct {

	// Destination in cidr
	Network *string `json:"network,omitempty" tf:"network,omitempty"`

	// Next hop IP
	NextHop *string `json:"nextHop,omitempty" tf:"next_hop,omitempty"`
}

type LogicalDhcpServerDHCPOption121Parameters struct {

	// Destination in cidr
	// +kubebuilder:validation:Required
	Network *string `json:"network" tf:"network,omitempty"`

	// Next hop IP
	// +kubebuilder:validation:Required
	NextHop *string `json:"nextHop" tf:"next_hop,omitempty"`
}

type LogicalDhcpServerObservation struct {

	// Id of attached logical port
	AttachedLogicalPortID *string `json:"attachedLogicalPortId,omitempty" tf:"attached_logical_port_id,omitempty"`

	// Generic DHCP options
	DHCPGenericOption []LogicalDhcpServerDHCPGenericOptionObservation `json:"dhcpGenericOption,omitempty" tf:"dhcp_generic_option,omitempty"`

	// DHCP classless static routes
	DHCPOption121 []LogicalDhcpServerDHCPOption121Observation `json:"dhcpOption121,omitempty" tf:"dhcp_option_121,omitempty"`

	// DHCP profile uuid
	DHCPProfileID *string `json:"dhcpProfileId,omitempty" tf:"dhcp_profile_id,omitempty"`

	// DHCP server ip in cidr format
	DHCPServerIP *string `json:"dhcpServerIp,omitempty" tf:"dhcp_server_ip,omitempty"`

	// DNS IPs
	DNSNameServers []*string `json:"dnsNameServers,omitempty" tf:"dns_name_servers,omitempty"`

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Domain name
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Gateway IP
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []LogicalDhcpServerTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LogicalDhcpServerParameters struct {

	// Generic DHCP options
	// +kubebuilder:validation:Optional
	DHCPGenericOption []LogicalDhcpServerDHCPGenericOptionParameters `json:"dhcpGenericOption,omitempty" tf:"dhcp_generic_option,omitempty"`

	// DHCP classless static routes
	// +kubebuilder:validation:Optional
	DHCPOption121 []LogicalDhcpServerDHCPOption121Parameters `json:"dhcpOption121,omitempty" tf:"dhcp_option_121,omitempty"`

	// DHCP profile uuid
	// +kubebuilder:validation:Optional
	DHCPProfileID *string `json:"dhcpProfileId,omitempty" tf:"dhcp_profile_id,omitempty"`

	// DHCP server ip in cidr format
	// +kubebuilder:validation:Optional
	DHCPServerIP *string `json:"dhcpServerIp,omitempty" tf:"dhcp_server_ip,omitempty"`

	// DNS IPs
	// +kubebuilder:validation:Optional
	DNSNameServers []*string `json:"dnsNameServers,omitempty" tf:"dns_name_servers,omitempty"`

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Domain name
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// Gateway IP
	// +kubebuilder:validation:Optional
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []LogicalDhcpServerTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LogicalDhcpServerTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LogicalDhcpServerTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LogicalDhcpServerSpec defines the desired state of LogicalDhcpServer
type LogicalDhcpServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogicalDhcpServerParameters `json:"forProvider"`
}

// LogicalDhcpServerStatus defines the observed state of LogicalDhcpServer.
type LogicalDhcpServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogicalDhcpServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalDhcpServer is the Schema for the LogicalDhcpServers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LogicalDhcpServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.dhcpProfileId)",message="dhcpProfileId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.dhcpServerIp)",message="dhcpServerIp is a required parameter"
	Spec   LogicalDhcpServerSpec   `json:"spec"`
	Status LogicalDhcpServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalDhcpServerList contains a list of LogicalDhcpServers
type LogicalDhcpServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicalDhcpServer `json:"items"`
}

// Repository type metadata.
var (
	LogicalDhcpServer_Kind             = "LogicalDhcpServer"
	LogicalDhcpServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogicalDhcpServer_Kind}.String()
	LogicalDhcpServer_KindAPIVersion   = LogicalDhcpServer_Kind + "." + CRDGroupVersion.String()
	LogicalDhcpServer_GroupVersionKind = CRDGroupVersion.WithKind(LogicalDhcpServer_Kind)
)

func init() {
	SchemeBuilder.Register(&LogicalDhcpServer{}, &LogicalDhcpServerList{})
}
