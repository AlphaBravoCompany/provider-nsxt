/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdvancedConfigurationObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AdvancedConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type CPUConfigObservation struct {

	// Number of Logical cpu cores (Lcores) to be placed on a specified NUMA node
	NumLcores *float64 `json:"numLcores,omitempty" tf:"num_lcores,omitempty"`

	// Unique index of the Non Uniform Memory Access (NUMA) node
	NumaNodeIndex *float64 `json:"numaNodeIndex,omitempty" tf:"numa_node_index,omitempty"`
}

type CPUConfigParameters struct {

	// Number of Logical cpu cores (Lcores) to be placed on a specified NUMA node
	// +kubebuilder:validation:Required
	NumLcores *float64 `json:"numLcores" tf:"num_lcores,omitempty"`

	// Unique index of the Non Uniform Memory Access (NUMA) node
	// +kubebuilder:validation:Required
	NumaNodeIndex *float64 `json:"numaNodeIndex" tf:"numa_node_index,omitempty"`
}

type DeploymentConfigNodeUserSettingsObservation struct {

	// CLI "audit" username
	AuditUsername *string `json:"auditUsername,omitempty" tf:"audit_username,omitempty"`

	// CLI "admin" username
	CliUsername *string `json:"cliUsername,omitempty" tf:"cli_username,omitempty"`
}

type DeploymentConfigNodeUserSettingsParameters struct {

	// Node audit user password
	// +kubebuilder:validation:Optional
	AuditPasswordSecretRef *v1.SecretKeySelector `json:"auditPasswordSecretRef,omitempty" tf:"-"`

	// CLI "audit" username
	// +kubebuilder:validation:Optional
	AuditUsername *string `json:"auditUsername,omitempty" tf:"audit_username,omitempty"`

	// Node cli password
	// +kubebuilder:validation:Required
	CliPasswordSecretRef v1.SecretKeySelector `json:"cliPasswordSecretRef" tf:"-"`

	// CLI "admin" username
	// +kubebuilder:validation:Optional
	CliUsername *string `json:"cliUsername,omitempty" tf:"cli_username,omitempty"`

	// Node root user password
	// +kubebuilder:validation:Required
	RootPasswordSecretRef v1.SecretKeySelector `json:"rootPasswordSecretRef" tf:"-"`
}

type DeploymentConfigObservation struct {
	FormFactor *string `json:"formFactor,omitempty" tf:"form_factor,omitempty"`

	// Node user settings
	NodeUserSettings []NodeUserSettingsObservation `json:"nodeUserSettings,omitempty" tf:"node_user_settings,omitempty"`

	// The vSphere deployment configuration determines where to deploy the edge node
	VMDeploymentConfig []VMDeploymentConfigObservation `json:"vmDeploymentConfig,omitempty" tf:"vm_deployment_config,omitempty"`
}

type DeploymentConfigParameters struct {

	// +kubebuilder:validation:Optional
	FormFactor *string `json:"formFactor,omitempty" tf:"form_factor,omitempty"`

	// Node user settings
	// +kubebuilder:validation:Required
	NodeUserSettings []NodeUserSettingsParameters `json:"nodeUserSettings" tf:"node_user_settings,omitempty"`

	// The vSphere deployment configuration determines where to deploy the edge node
	// +kubebuilder:validation:Required
	VMDeploymentConfig []VMDeploymentConfigParameters `json:"vmDeploymentConfig" tf:"vm_deployment_config,omitempty"`
}

type DeploymentConfigVMDeploymentConfigObservation struct {

	// Compute folder identifier in the specified vcenter server
	ComputeFolderID *string `json:"computeFolderId,omitempty" tf:"compute_folder_id,omitempty"`

	// Cluster identifier or resourcepool identifier for specified vcenter server
	ComputeID *string `json:"computeId,omitempty" tf:"compute_id,omitempty"`

	// List of portgroups, logical switch identifiers or segment paths for datapath connectivity
	DataNetworkIds []*string `json:"dataNetworkIds,omitempty" tf:"data_network_ids,omitempty"`

	// Default gateway for the node
	DefaultGatewayAddress []*string `json:"defaultGatewayAddress,omitempty" tf:"default_gateway_address,omitempty"`

	// Host identifier in the specified vcenter server
	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	// This flag represents whether IPv4 configuration is enabled or not
	IPv4AssignmentEnabled *bool `json:"ipv4AssignmentEnabled,omitempty" tf:"ipv4_assignment_enabled,omitempty"`

	// Portgroup, logical switch identifier or segment path for management network connectivity
	ManagementNetworkID *string `json:"managementNetworkId,omitempty" tf:"management_network_id,omitempty"`

	// Port subnets for management port. IPv4, IPv6 and Dual Stack Address is supported
	ManagementPortSubnet []VMDeploymentConfigManagementPortSubnetObservation `json:"managementPortSubnet,omitempty" tf:"management_port_subnet,omitempty"`

	// Resource reservation settings
	ReservationInfo []VMDeploymentConfigReservationInfoObservation `json:"reservationInfo,omitempty" tf:"reservation_info,omitempty"`

	// Storage/datastore identifier in the specified vcenter server
	StorageID *string `json:"storageId,omitempty" tf:"storage_id,omitempty"`

	// Vsphere compute identifier for identifying the vcenter server
	VcID *string `json:"vcId,omitempty" tf:"vc_id,omitempty"`
}

type DeploymentConfigVMDeploymentConfigParameters struct {

	// Compute folder identifier in the specified vcenter server
	// +kubebuilder:validation:Optional
	ComputeFolderID *string `json:"computeFolderId,omitempty" tf:"compute_folder_id,omitempty"`

	// Cluster identifier or resourcepool identifier for specified vcenter server
	// +kubebuilder:validation:Required
	ComputeID *string `json:"computeId" tf:"compute_id,omitempty"`

	// List of portgroups, logical switch identifiers or segment paths for datapath connectivity
	// +kubebuilder:validation:Required
	DataNetworkIds []*string `json:"dataNetworkIds" tf:"data_network_ids,omitempty"`

	// Default gateway for the node
	// +kubebuilder:validation:Optional
	DefaultGatewayAddress []*string `json:"defaultGatewayAddress,omitempty" tf:"default_gateway_address,omitempty"`

	// Host identifier in the specified vcenter server
	// +kubebuilder:validation:Optional
	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	// This flag represents whether IPv4 configuration is enabled or not
	// +kubebuilder:validation:Optional
	IPv4AssignmentEnabled *bool `json:"ipv4AssignmentEnabled,omitempty" tf:"ipv4_assignment_enabled,omitempty"`

	// Portgroup, logical switch identifier or segment path for management network connectivity
	// +kubebuilder:validation:Required
	ManagementNetworkID *string `json:"managementNetworkId" tf:"management_network_id,omitempty"`

	// Port subnets for management port. IPv4, IPv6 and Dual Stack Address is supported
	// +kubebuilder:validation:Optional
	ManagementPortSubnet []VMDeploymentConfigManagementPortSubnetParameters `json:"managementPortSubnet,omitempty" tf:"management_port_subnet,omitempty"`

	// Resource reservation settings
	// +kubebuilder:validation:Optional
	ReservationInfo []VMDeploymentConfigReservationInfoParameters `json:"reservationInfo,omitempty" tf:"reservation_info,omitempty"`

	// Storage/datastore identifier in the specified vcenter server
	// +kubebuilder:validation:Required
	StorageID *string `json:"storageId" tf:"storage_id,omitempty"`

	// Vsphere compute identifier for identifying the vcenter server
	// +kubebuilder:validation:Required
	VcID *string `json:"vcId" tf:"vc_id,omitempty"`
}

type EdgeNodeObservation struct {

	// Config for automatic deployment of edge node virtual machine
	DeploymentConfig []DeploymentConfigObservation `json:"deploymentConfig,omitempty" tf:"deployment_config,omitempty"`

	// ID of the Node
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Fully qualified domain name of the fabric node
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// NSX ID for this resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP Addresses of the Node, version 4 or 6
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Current configuration on edge node
	NodeSettings []NodeSettingsObservation `json:"nodeSettings,omitempty" tf:"node_settings,omitempty"`
}

type EdgeNodeParameters struct {

	// Config for automatic deployment of edge node virtual machine
	// +kubebuilder:validation:Optional
	DeploymentConfig []DeploymentConfigParameters `json:"deploymentConfig,omitempty" tf:"deployment_config,omitempty"`

	// ID of the Node
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP Addresses of the Node, version 4 or 6
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Current configuration on edge node
	// +kubebuilder:validation:Required
	NodeSettings []NodeSettingsParameters `json:"nodeSettings" tf:"node_settings,omitempty"`
}

type HostCredentialObservation struct {

	// ESXi thumbprint or SSH key fingerprint of the host node
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// The username of the account on the host node
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type HostCredentialParameters struct {

	// The authentication password of the host node
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// ESXi thumbprint or SSH key fingerprint of the host node
	// +kubebuilder:validation:Optional
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// The username of the account on the host node
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

type HostNodeObservation struct {

	// ID of the Node
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Fully qualified domain name of the fabric node
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// Host login credentials
	HostCredential []HostCredentialObservation `json:"hostCredential,omitempty" tf:"host_credential,omitempty"`

	// NSX ID for this resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP Addresses of the Node, version 4 or 6
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Hypervisor OS type
	OsType *string `json:"osType,omitempty" tf:"os_type,omitempty"`

	// Hypervisor OS version
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`

	// Install location of Windows Server on baremetal being managed by NSX
	WindowsInstallLocation *string `json:"windowsInstallLocation,omitempty" tf:"windows_install_location,omitempty"`
}

type HostNodeParameters struct {

	// ID of the Node
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Host login credentials
	// +kubebuilder:validation:Optional
	HostCredential []HostCredentialParameters `json:"hostCredential,omitempty" tf:"host_credential,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP Addresses of the Node, version 4 or 6
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Hypervisor OS type
	// +kubebuilder:validation:Required
	OsType *string `json:"osType" tf:"os_type,omitempty"`

	// Hypervisor OS version
	// +kubebuilder:validation:Optional
	OsVersion *string `json:"osVersion,omitempty" tf:"os_version,omitempty"`

	// Install location of Windows Server on baremetal being managed by NSX
	// +kubebuilder:validation:Optional
	WindowsInstallLocation *string `json:"windowsInstallLocation,omitempty" tf:"windows_install_location,omitempty"`
}

type HostSwitchConfigOptionIPAssignmentObservation struct {

	// Enables DHCP assignment
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	StaticIP []HostSwitchConfigOptionIPAssignmentStaticIPObservation `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP and MAC assignment specification for Static IP List
	StaticIPMac []HostSwitchConfigOptionIPAssignmentStaticIPMacObservation `json:"staticIpMac,omitempty" tf:"static_ip_mac,omitempty"`

	// IP assignment specification for Static IP Pool
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type HostSwitchConfigOptionIPAssignmentParameters struct {

	// Enables DHCP assignment
	// +kubebuilder:validation:Optional
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	// +kubebuilder:validation:Optional
	StaticIP []HostSwitchConfigOptionIPAssignmentStaticIPParameters `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP and MAC assignment specification for Static IP List
	// +kubebuilder:validation:Optional
	StaticIPMac []HostSwitchConfigOptionIPAssignmentStaticIPMacParameters `json:"staticIpMac,omitempty" tf:"static_ip_mac,omitempty"`

	// IP assignment specification for Static IP Pool
	// +kubebuilder:validation:Optional
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type HostSwitchConfigOptionIPAssignmentStaticIPMacObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs and MACs for transport node host switch virtual tunnel endpoints
	IPMacPair []IPAssignmentStaticIPMacIPMacPairObservation `json:"ipMacPair,omitempty" tf:"ip_mac_pair,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type HostSwitchConfigOptionIPAssignmentStaticIPMacParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs and MACs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPMacPair []IPAssignmentStaticIPMacIPMacPairParameters `json:"ipMacPair" tf:"ip_mac_pair,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

type HostSwitchConfigOptionIPAssignmentStaticIPObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type HostSwitchConfigOptionIPAssignmentStaticIPParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAddresses []*string `json:"ipAddresses" tf:"ip_addresses,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

type HostSwitchConfigOptionObservation struct {

	// The host switch id. This ID will be used to reference a host switch
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Identifiers of host switch profiles to be associated with this host switch
	HostSwitchProfile []*string `json:"hostSwitchProfile,omitempty" tf:"host_switch_profile,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	IPAssignment []HostSwitchConfigOptionIPAssignmentObservation `json:"ipAssignment,omitempty" tf:"ip_assignment,omitempty"`

	// Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch
	Uplink []UplinkObservation `json:"uplink,omitempty" tf:"uplink,omitempty"`
}

type HostSwitchConfigOptionParameters struct {

	// The host switch id. This ID will be used to reference a host switch
	// +kubebuilder:validation:Optional
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Identifiers of host switch profiles to be associated with this host switch
	// +kubebuilder:validation:Optional
	HostSwitchProfile []*string `json:"hostSwitchProfile,omitempty" tf:"host_switch_profile,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAssignment []HostSwitchConfigOptionIPAssignmentParameters `json:"ipAssignment" tf:"ip_assignment,omitempty"`

	// Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch
	// +kubebuilder:validation:Optional
	Uplink []UplinkParameters `json:"uplink,omitempty" tf:"uplink,omitempty"`
}

type IPAssignmentObservation struct {

	// Enables DHCP assignment
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	StaticIP []StaticIPObservation `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP and MAC assignment specification for Static IP List
	StaticIPMac []StaticIPMacObservation `json:"staticIpMac,omitempty" tf:"static_ip_mac,omitempty"`

	// IP assignment specification for Static IP Pool
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type IPAssignmentParameters struct {

	// Enables DHCP assignment
	// +kubebuilder:validation:Optional
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	// +kubebuilder:validation:Optional
	StaticIP []StaticIPParameters `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP and MAC assignment specification for Static IP List
	// +kubebuilder:validation:Optional
	StaticIPMac []StaticIPMacParameters `json:"staticIpMac,omitempty" tf:"static_ip_mac,omitempty"`

	// IP assignment specification for Static IP Pool
	// +kubebuilder:validation:Optional
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type IPAssignmentStaticIPMacIPMacPairObservation struct {

	// IP address
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// MAC address
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type IPAssignmentStaticIPMacIPMacPairParameters struct {

	// IP address
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// MAC address
	// +kubebuilder:validation:Optional
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type IPAssignmentStaticIPMacObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs and MACs for transport node host switch virtual tunnel endpoints
	IPMacPair []StaticIPMacIPMacPairObservation `json:"ipMacPair,omitempty" tf:"ip_mac_pair,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type IPAssignmentStaticIPMacParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs and MACs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPMacPair []StaticIPMacIPMacPairParameters `json:"ipMacPair" tf:"ip_mac_pair,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

type IPAssignmentStaticIPObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type IPAssignmentStaticIPParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAddresses []*string `json:"ipAddresses" tf:"ip_addresses,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

type IPMacPairObservation struct {

	// IP address
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// MAC address
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type IPMacPairParameters struct {

	// IP address
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// MAC address
	// +kubebuilder:validation:Optional
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type ManagementPortSubnetObservation struct {

	// IP Addresses
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Subnet Prefix Length
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`
}

type ManagementPortSubnetParameters struct {

	// IP Addresses
	// +kubebuilder:validation:Required
	IPAddresses []*string `json:"ipAddresses" tf:"ip_addresses,omitempty"`

	// Subnet Prefix Length
	// +kubebuilder:validation:Required
	PrefixLength *float64 `json:"prefixLength" tf:"prefix_length,omitempty"`
}

type NodeObservation struct {

	// ID of the Node
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Fully qualified domain name of the fabric node
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// NSX ID for this resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP Addresses of the Node, version 4 or 6
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`
}

type NodeParameters struct {

	// ID of the Node
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP Addresses of the Node, version 4 or 6
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`
}

type NodeSettingsAdvancedConfigurationObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NodeSettingsAdvancedConfigurationParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type NodeSettingsObservation struct {

	// Advanced configuration
	AdvancedConfiguration []AdvancedConfigurationObservation `json:"advancedConfiguration,omitempty" tf:"advanced_configuration,omitempty"`

	// Allow root SSH logins
	AllowSSHRootLogin *bool `json:"allowSshRootLogin,omitempty" tf:"allow_ssh_root_login,omitempty"`

	// DNS servers
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// Enable SSH
	EnableSSH *bool `json:"enableSsh,omitempty" tf:"enable_ssh,omitempty"`

	// Enable Uniform Passthrough mode
	EnableUptMode *bool `json:"enableUptMode,omitempty" tf:"enable_upt_mode,omitempty"`

	// Host name or FQDN for edge node
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// NTP servers
	NtpServers []*string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	// Search domain names
	SearchDomains []*string `json:"searchDomains,omitempty" tf:"search_domains,omitempty"`

	// Syslog servers
	SyslogServer []SyslogServerObservation `json:"syslogServer,omitempty" tf:"syslog_server,omitempty"`
}

type NodeSettingsParameters struct {

	// Advanced configuration
	// +kubebuilder:validation:Optional
	AdvancedConfiguration []AdvancedConfigurationParameters `json:"advancedConfiguration,omitempty" tf:"advanced_configuration,omitempty"`

	// Allow root SSH logins
	// +kubebuilder:validation:Optional
	AllowSSHRootLogin *bool `json:"allowSshRootLogin,omitempty" tf:"allow_ssh_root_login,omitempty"`

	// DNS servers
	// +kubebuilder:validation:Optional
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// Enable SSH
	// +kubebuilder:validation:Optional
	EnableSSH *bool `json:"enableSsh,omitempty" tf:"enable_ssh,omitempty"`

	// Enable Uniform Passthrough mode
	// +kubebuilder:validation:Optional
	EnableUptMode *bool `json:"enableUptMode,omitempty" tf:"enable_upt_mode,omitempty"`

	// Host name or FQDN for edge node
	// +kubebuilder:validation:Required
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// NTP servers
	// +kubebuilder:validation:Optional
	NtpServers []*string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	// Search domain names
	// +kubebuilder:validation:Optional
	SearchDomains []*string `json:"searchDomains,omitempty" tf:"search_domains,omitempty"`

	// Syslog servers
	// +kubebuilder:validation:Optional
	SyslogServer []SyslogServerParameters `json:"syslogServer,omitempty" tf:"syslog_server,omitempty"`
}

type NodeSettingsSyslogServerObservation struct {

	// Log level to be redirected
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Display name of the syslog server
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Syslog server port
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Syslog protocol
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Server IP or fqdn
	Server *string `json:"server,omitempty" tf:"server,omitempty"`
}

type NodeSettingsSyslogServerParameters struct {

	// Log level to be redirected
	// +kubebuilder:validation:Optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Display name of the syslog server
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Syslog server port
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Syslog protocol
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Server IP or fqdn
	// +kubebuilder:validation:Required
	Server *string `json:"server" tf:"server,omitempty"`
}

type NodeUserSettingsObservation struct {

	// CLI "audit" username
	AuditUsername *string `json:"auditUsername,omitempty" tf:"audit_username,omitempty"`

	// CLI "admin" username
	CliUsername *string `json:"cliUsername,omitempty" tf:"cli_username,omitempty"`
}

type NodeUserSettingsParameters struct {

	// Node audit user password
	// +kubebuilder:validation:Optional
	AuditPasswordSecretRef *v1.SecretKeySelector `json:"auditPasswordSecretRef,omitempty" tf:"-"`

	// CLI "audit" username
	// +kubebuilder:validation:Optional
	AuditUsername *string `json:"auditUsername,omitempty" tf:"audit_username,omitempty"`

	// Node cli password
	// +kubebuilder:validation:Required
	CliPasswordSecretRef v1.SecretKeySelector `json:"cliPasswordSecretRef" tf:"-"`

	// CLI "admin" username
	// +kubebuilder:validation:Optional
	CliUsername *string `json:"cliUsername,omitempty" tf:"cli_username,omitempty"`

	// Node root user password
	// +kubebuilder:validation:Required
	RootPasswordSecretRef v1.SecretKeySelector `json:"rootPasswordSecretRef" tf:"-"`
}

type PnicObservation struct {

	// Device name or key
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// Uplink name for this Pnic
	UplinkName *string `json:"uplinkName,omitempty" tf:"uplink_name,omitempty"`
}

type PnicParameters struct {

	// Device name or key
	// +kubebuilder:validation:Required
	DeviceName *string `json:"deviceName" tf:"device_name,omitempty"`

	// Uplink name for this Pnic
	// +kubebuilder:validation:Required
	UplinkName *string `json:"uplinkName" tf:"uplink_name,omitempty"`
}

type PreconfiguredHostSwitchObservation struct {

	// Name of the virtual tunnel endpoint
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// External Id of the preconfigured host switch
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Transport zone endpoints
	TransportZoneEndpoint []TransportZoneEndpointObservation `json:"transportZoneEndpoint,omitempty" tf:"transport_zone_endpoint,omitempty"`
}

type PreconfiguredHostSwitchParameters struct {

	// Name of the virtual tunnel endpoint
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// External Id of the preconfigured host switch
	// +kubebuilder:validation:Required
	HostSwitchID *string `json:"hostSwitchId" tf:"host_switch_id,omitempty"`

	// Transport zone endpoints
	// +kubebuilder:validation:Optional
	TransportZoneEndpoint []TransportZoneEndpointParameters `json:"transportZoneEndpoint,omitempty" tf:"transport_zone_endpoint,omitempty"`
}

type PublicCloudGatewayNodeDeploymentConfigObservation struct {
	FormFactor *string `json:"formFactor,omitempty" tf:"form_factor,omitempty"`

	// Node user settings
	NodeUserSettings []DeploymentConfigNodeUserSettingsObservation `json:"nodeUserSettings,omitempty" tf:"node_user_settings,omitempty"`

	// The vSphere deployment configuration determines where to deploy the edge node
	VMDeploymentConfig []DeploymentConfigVMDeploymentConfigObservation `json:"vmDeploymentConfig,omitempty" tf:"vm_deployment_config,omitempty"`
}

type PublicCloudGatewayNodeDeploymentConfigParameters struct {

	// +kubebuilder:validation:Optional
	FormFactor *string `json:"formFactor,omitempty" tf:"form_factor,omitempty"`

	// Node user settings
	// +kubebuilder:validation:Required
	NodeUserSettings []DeploymentConfigNodeUserSettingsParameters `json:"nodeUserSettings" tf:"node_user_settings,omitempty"`

	// The vSphere deployment configuration determines where to deploy the edge node
	// +kubebuilder:validation:Required
	VMDeploymentConfig []DeploymentConfigVMDeploymentConfigParameters `json:"vmDeploymentConfig" tf:"vm_deployment_config,omitempty"`
}

type PublicCloudGatewayNodeNodeSettingsObservation struct {

	// Advanced configuration
	AdvancedConfiguration []NodeSettingsAdvancedConfigurationObservation `json:"advancedConfiguration,omitempty" tf:"advanced_configuration,omitempty"`

	// Allow root SSH logins
	AllowSSHRootLogin *bool `json:"allowSshRootLogin,omitempty" tf:"allow_ssh_root_login,omitempty"`

	// DNS servers
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// Enable SSH
	EnableSSH *bool `json:"enableSsh,omitempty" tf:"enable_ssh,omitempty"`

	// Enable Uniform Passthrough mode
	EnableUptMode *bool `json:"enableUptMode,omitempty" tf:"enable_upt_mode,omitempty"`

	// Host name or FQDN for edge node
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// NTP servers
	NtpServers []*string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	// Search domain names
	SearchDomains []*string `json:"searchDomains,omitempty" tf:"search_domains,omitempty"`

	// Syslog servers
	SyslogServer []NodeSettingsSyslogServerObservation `json:"syslogServer,omitempty" tf:"syslog_server,omitempty"`
}

type PublicCloudGatewayNodeNodeSettingsParameters struct {

	// Advanced configuration
	// +kubebuilder:validation:Optional
	AdvancedConfiguration []NodeSettingsAdvancedConfigurationParameters `json:"advancedConfiguration,omitempty" tf:"advanced_configuration,omitempty"`

	// Allow root SSH logins
	// +kubebuilder:validation:Optional
	AllowSSHRootLogin *bool `json:"allowSshRootLogin,omitempty" tf:"allow_ssh_root_login,omitempty"`

	// DNS servers
	// +kubebuilder:validation:Optional
	DNSServers []*string `json:"dnsServers,omitempty" tf:"dns_servers,omitempty"`

	// Enable SSH
	// +kubebuilder:validation:Optional
	EnableSSH *bool `json:"enableSsh,omitempty" tf:"enable_ssh,omitempty"`

	// Enable Uniform Passthrough mode
	// +kubebuilder:validation:Optional
	EnableUptMode *bool `json:"enableUptMode,omitempty" tf:"enable_upt_mode,omitempty"`

	// Host name or FQDN for edge node
	// +kubebuilder:validation:Required
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// NTP servers
	// +kubebuilder:validation:Optional
	NtpServers []*string `json:"ntpServers,omitempty" tf:"ntp_servers,omitempty"`

	// Search domain names
	// +kubebuilder:validation:Optional
	SearchDomains []*string `json:"searchDomains,omitempty" tf:"search_domains,omitempty"`

	// Syslog servers
	// +kubebuilder:validation:Optional
	SyslogServer []NodeSettingsSyslogServerParameters `json:"syslogServer,omitempty" tf:"syslog_server,omitempty"`
}

type PublicCloudGatewayNodeObservation struct {

	// Config for automatic deployment of edge node virtual machine
	DeploymentConfig []PublicCloudGatewayNodeDeploymentConfigObservation `json:"deploymentConfig,omitempty" tf:"deployment_config,omitempty"`

	// ID of the Node
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// Fully qualified domain name of the fabric node
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// NSX ID for this resource
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP Addresses of the Node, version 4 or 6
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Current configuration on edge node
	NodeSettings []PublicCloudGatewayNodeNodeSettingsObservation `json:"nodeSettings,omitempty" tf:"node_settings,omitempty"`
}

type PublicCloudGatewayNodeParameters struct {

	// Config for automatic deployment of edge node virtual machine
	// +kubebuilder:validation:Optional
	DeploymentConfig []PublicCloudGatewayNodeDeploymentConfigParameters `json:"deploymentConfig,omitempty" tf:"deployment_config,omitempty"`

	// ID of the Node
	// +kubebuilder:validation:Optional
	ExternalID *string `json:"externalId,omitempty" tf:"external_id,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP Addresses of the Node, version 4 or 6
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Current configuration on edge node
	// +kubebuilder:validation:Required
	NodeSettings []PublicCloudGatewayNodeNodeSettingsParameters `json:"nodeSettings" tf:"node_settings,omitempty"`
}

type RemoteTunnelEndpointObservation struct {

	// The host switch name to be used for the remote tunnel endpoint
	HostSwitchName *string `json:"hostSwitchName,omitempty" tf:"host_switch_name,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	IPAssignment []IPAssignmentObservation `json:"ipAssignment,omitempty" tf:"ip_assignment,omitempty"`

	// The named teaming policy to be used by the remote tunnel endpoint
	NamedTeamingPolicy *string `json:"namedTeamingPolicy,omitempty" tf:"named_teaming_policy,omitempty"`

	// VLAN id for remote tunnel endpoint
	RtepVlan *float64 `json:"rtepVlan,omitempty" tf:"rtep_vlan,omitempty"`
}

type RemoteTunnelEndpointParameters struct {

	// The host switch name to be used for the remote tunnel endpoint
	// +kubebuilder:validation:Required
	HostSwitchName *string `json:"hostSwitchName" tf:"host_switch_name,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAssignment []IPAssignmentParameters `json:"ipAssignment" tf:"ip_assignment,omitempty"`

	// The named teaming policy to be used by the remote tunnel endpoint
	// +kubebuilder:validation:Optional
	NamedTeamingPolicy *string `json:"namedTeamingPolicy,omitempty" tf:"named_teaming_policy,omitempty"`

	// VLAN id for remote tunnel endpoint
	// +kubebuilder:validation:Required
	RtepVlan *float64 `json:"rtepVlan" tf:"rtep_vlan,omitempty"`
}

type ReservationInfoObservation struct {

	// CPU reservation in MHz
	CPUReservationInMhz *float64 `json:"cpuReservationInMhz,omitempty" tf:"cpu_reservation_in_mhz,omitempty"`

	// CPU reservation in shares
	CPUReservationInShares *string `json:"cpuReservationInShares,omitempty" tf:"cpu_reservation_in_shares,omitempty"`

	// Memory reservation percentage
	MemoryReservationPercentage *float64 `json:"memoryReservationPercentage,omitempty" tf:"memory_reservation_percentage,omitempty"`
}

type ReservationInfoParameters struct {

	// CPU reservation in MHz
	// +kubebuilder:validation:Optional
	CPUReservationInMhz *float64 `json:"cpuReservationInMhz,omitempty" tf:"cpu_reservation_in_mhz,omitempty"`

	// CPU reservation in shares
	// +kubebuilder:validation:Optional
	CPUReservationInShares *string `json:"cpuReservationInShares,omitempty" tf:"cpu_reservation_in_shares,omitempty"`

	// Memory reservation percentage
	// +kubebuilder:validation:Optional
	MemoryReservationPercentage *float64 `json:"memoryReservationPercentage,omitempty" tf:"memory_reservation_percentage,omitempty"`
}

type StandardHostSwitchIPAssignmentObservation struct {

	// Enables DHCP assignment
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	StaticIP []IPAssignmentStaticIPObservation `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP and MAC assignment specification for Static IP List
	StaticIPMac []IPAssignmentStaticIPMacObservation `json:"staticIpMac,omitempty" tf:"static_ip_mac,omitempty"`

	// IP assignment specification for Static IP Pool
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type StandardHostSwitchIPAssignmentParameters struct {

	// Enables DHCP assignment
	// +kubebuilder:validation:Optional
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	// +kubebuilder:validation:Optional
	StaticIP []IPAssignmentStaticIPParameters `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP and MAC assignment specification for Static IP List
	// +kubebuilder:validation:Optional
	StaticIPMac []IPAssignmentStaticIPMacParameters `json:"staticIpMac,omitempty" tf:"static_ip_mac,omitempty"`

	// IP assignment specification for Static IP Pool
	// +kubebuilder:validation:Optional
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type StandardHostSwitchObservation struct {

	// Enhanced Networking Stack enabled HostSwitch CPU configuration
	CPUConfig []CPUConfigObservation `json:"cpuConfig,omitempty" tf:"cpu_config,omitempty"`

	// The host switch id. This ID will be used to reference a host switch
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Operational mode of a HostSwitch
	HostSwitchMode *string `json:"hostSwitchMode,omitempty" tf:"host_switch_mode,omitempty"`

	// Identifiers of host switch profiles to be associated with this host switch
	HostSwitchProfile []*string `json:"hostSwitchProfile,omitempty" tf:"host_switch_profile,omitempty"`

	// Type of HostSwitch
	HostSwitchType *string `json:"hostSwitchType,omitempty" tf:"host_switch_type,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	IPAssignment []StandardHostSwitchIPAssignmentObservation `json:"ipAssignment,omitempty" tf:"ip_assignment,omitempty"`

	// Migrate any pnics which are in use
	IsMigratePnics *bool `json:"isMigratePnics,omitempty" tf:"is_migrate_pnics,omitempty"`

	// Physical NICs connected to the host switch
	Pnic []PnicObservation `json:"pnic,omitempty" tf:"pnic,omitempty"`

	// Transport Zone ID representing the DVS used in NSX on DVPG
	PortgroupTransportZone *string `json:"portgroupTransportZone,omitempty" tf:"portgroup_transport_zone,omitempty"`

	// Transport Node Profile sub-configuration Options
	TransportNodeProfileSubConfig []TransportNodeProfileSubConfigObservation `json:"transportNodeProfileSubConfig,omitempty" tf:"transport_node_profile_sub_config,omitempty"`

	// Transport zone endpoints
	TransportZoneEndpoint []StandardHostSwitchTransportZoneEndpointObservation `json:"transportZoneEndpoint,omitempty" tf:"transport_zone_endpoint,omitempty"`

	// Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch
	Uplink []StandardHostSwitchUplinkObservation `json:"uplink,omitempty" tf:"uplink,omitempty"`

	// The vmknic and logical switch mappings
	VmkInstallMigration []VmkInstallMigrationObservation `json:"vmkInstallMigration,omitempty" tf:"vmk_install_migration,omitempty"`
}

type StandardHostSwitchParameters struct {

	// Enhanced Networking Stack enabled HostSwitch CPU configuration
	// +kubebuilder:validation:Optional
	CPUConfig []CPUConfigParameters `json:"cpuConfig,omitempty" tf:"cpu_config,omitempty"`

	// The host switch id. This ID will be used to reference a host switch
	// +kubebuilder:validation:Optional
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Operational mode of a HostSwitch
	// +kubebuilder:validation:Optional
	HostSwitchMode *string `json:"hostSwitchMode,omitempty" tf:"host_switch_mode,omitempty"`

	// Identifiers of host switch profiles to be associated with this host switch
	// +kubebuilder:validation:Optional
	HostSwitchProfile []*string `json:"hostSwitchProfile,omitempty" tf:"host_switch_profile,omitempty"`

	// Type of HostSwitch
	// +kubebuilder:validation:Optional
	HostSwitchType *string `json:"hostSwitchType,omitempty" tf:"host_switch_type,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAssignment []StandardHostSwitchIPAssignmentParameters `json:"ipAssignment" tf:"ip_assignment,omitempty"`

	// Migrate any pnics which are in use
	// +kubebuilder:validation:Optional
	IsMigratePnics *bool `json:"isMigratePnics,omitempty" tf:"is_migrate_pnics,omitempty"`

	// Physical NICs connected to the host switch
	// +kubebuilder:validation:Optional
	Pnic []PnicParameters `json:"pnic,omitempty" tf:"pnic,omitempty"`

	// Transport Zone ID representing the DVS used in NSX on DVPG
	// +kubebuilder:validation:Optional
	PortgroupTransportZone *string `json:"portgroupTransportZone,omitempty" tf:"portgroup_transport_zone,omitempty"`

	// Transport Node Profile sub-configuration Options
	// +kubebuilder:validation:Optional
	TransportNodeProfileSubConfig []TransportNodeProfileSubConfigParameters `json:"transportNodeProfileSubConfig,omitempty" tf:"transport_node_profile_sub_config,omitempty"`

	// Transport zone endpoints
	// +kubebuilder:validation:Optional
	TransportZoneEndpoint []StandardHostSwitchTransportZoneEndpointParameters `json:"transportZoneEndpoint,omitempty" tf:"transport_zone_endpoint,omitempty"`

	// Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch
	// +kubebuilder:validation:Optional
	Uplink []StandardHostSwitchUplinkParameters `json:"uplink,omitempty" tf:"uplink,omitempty"`

	// The vmknic and logical switch mappings
	// +kubebuilder:validation:Optional
	VmkInstallMigration []VmkInstallMigrationParameters `json:"vmkInstallMigration,omitempty" tf:"vmk_install_migration,omitempty"`
}

type StandardHostSwitchTransportZoneEndpointObservation struct {

	// Unique ID identifying the transport zone for this endpoint
	TransportZone *string `json:"transportZone,omitempty" tf:"transport_zone,omitempty"`

	// Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node
	TransportZoneProfile []*string `json:"transportZoneProfile,omitempty" tf:"transport_zone_profile,omitempty"`
}

type StandardHostSwitchTransportZoneEndpointParameters struct {

	// Unique ID identifying the transport zone for this endpoint
	// +kubebuilder:validation:Required
	TransportZone *string `json:"transportZone" tf:"transport_zone,omitempty"`

	// Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node
	// +kubebuilder:validation:Optional
	TransportZoneProfile []*string `json:"transportZoneProfile,omitempty" tf:"transport_zone_profile,omitempty"`
}

type StandardHostSwitchUplinkObservation struct {

	// Uplink name from UplinkHostSwitch profile
	UplinkName *string `json:"uplinkName,omitempty" tf:"uplink_name,omitempty"`

	// Link Aggregation Group (LAG) name of Virtual Distributed Switch
	VdsLagName *string `json:"vdsLagName,omitempty" tf:"vds_lag_name,omitempty"`

	// Uplink name of VMware vSphere Distributed Switch (VDS)
	VdsUplinkName *string `json:"vdsUplinkName,omitempty" tf:"vds_uplink_name,omitempty"`
}

type StandardHostSwitchUplinkParameters struct {

	// Uplink name from UplinkHostSwitch profile
	// +kubebuilder:validation:Required
	UplinkName *string `json:"uplinkName" tf:"uplink_name,omitempty"`

	// Link Aggregation Group (LAG) name of Virtual Distributed Switch
	// +kubebuilder:validation:Optional
	VdsLagName *string `json:"vdsLagName,omitempty" tf:"vds_lag_name,omitempty"`

	// Uplink name of VMware vSphere Distributed Switch (VDS)
	// +kubebuilder:validation:Optional
	VdsUplinkName *string `json:"vdsUplinkName,omitempty" tf:"vds_uplink_name,omitempty"`
}

type StaticIPMacIPMacPairObservation struct {

	// IP address
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// MAC address
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type StaticIPMacIPMacPairParameters struct {

	// IP address
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// MAC address
	// +kubebuilder:validation:Optional
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type StaticIPMacObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs and MACs for transport node host switch virtual tunnel endpoints
	IPMacPair []IPMacPairObservation `json:"ipMacPair,omitempty" tf:"ip_mac_pair,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type StaticIPMacParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs and MACs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPMacPair []IPMacPairParameters `json:"ipMacPair" tf:"ip_mac_pair,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

type StaticIPObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type StaticIPParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAddresses []*string `json:"ipAddresses" tf:"ip_addresses,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

type SyslogServerObservation struct {

	// Log level to be redirected
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Display name of the syslog server
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Syslog server port
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Syslog protocol
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Server IP or fqdn
	Server *string `json:"server,omitempty" tf:"server,omitempty"`
}

type SyslogServerParameters struct {

	// Log level to be redirected
	// +kubebuilder:validation:Optional
	LogLevel *string `json:"logLevel,omitempty" tf:"log_level,omitempty"`

	// Display name of the syslog server
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Syslog server port
	// +kubebuilder:validation:Optional
	Port *float64 `json:"port,omitempty" tf:"port,omitempty"`

	// Syslog protocol
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Server IP or fqdn
	// +kubebuilder:validation:Required
	Server *string `json:"server" tf:"server,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TransportNodeObservation struct {

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	EdgeNode []EdgeNodeObservation `json:"edgeNode,omitempty" tf:"edge_node,omitempty"`

	// Id of the failure domain
	FailureDomain *string `json:"failureDomain,omitempty" tf:"failure_domain,omitempty"`

	HostNode []HostNodeObservation `json:"hostNode,omitempty" tf:"host_node,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Node []NodeObservation `json:"node,omitempty" tf:"node,omitempty"`

	// Preconfigured host switch
	PreconfiguredHostSwitch []PreconfiguredHostSwitchObservation `json:"preconfiguredHostSwitch,omitempty" tf:"preconfigured_host_switch,omitempty"`

	PublicCloudGatewayNode []PublicCloudGatewayNodeObservation `json:"publicCloudGatewayNode,omitempty" tf:"public_cloud_gateway_node,omitempty"`

	// Configuration for a remote tunnel endpoint
	RemoteTunnelEndpoint []RemoteTunnelEndpointObservation `json:"remoteTunnelEndpoint,omitempty" tf:"remote_tunnel_endpoint,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Standard host switch specification
	StandardHostSwitch []StandardHostSwitchObservation `json:"standardHostSwitch,omitempty" tf:"standard_host_switch,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TransportNodeParameters struct {

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	EdgeNode []EdgeNodeParameters `json:"edgeNode,omitempty" tf:"edge_node,omitempty"`

	// Id of the failure domain
	// +kubebuilder:validation:Optional
	FailureDomain *string `json:"failureDomain,omitempty" tf:"failure_domain,omitempty"`

	// +kubebuilder:validation:Optional
	HostNode []HostNodeParameters `json:"hostNode,omitempty" tf:"host_node,omitempty"`

	// +kubebuilder:validation:Optional
	Node []NodeParameters `json:"node,omitempty" tf:"node,omitempty"`

	// Preconfigured host switch
	// +kubebuilder:validation:Optional
	PreconfiguredHostSwitch []PreconfiguredHostSwitchParameters `json:"preconfiguredHostSwitch,omitempty" tf:"preconfigured_host_switch,omitempty"`

	// +kubebuilder:validation:Optional
	PublicCloudGatewayNode []PublicCloudGatewayNodeParameters `json:"publicCloudGatewayNode,omitempty" tf:"public_cloud_gateway_node,omitempty"`

	// Configuration for a remote tunnel endpoint
	// +kubebuilder:validation:Optional
	RemoteTunnelEndpoint []RemoteTunnelEndpointParameters `json:"remoteTunnelEndpoint,omitempty" tf:"remote_tunnel_endpoint,omitempty"`

	// Standard host switch specification
	// +kubebuilder:validation:Optional
	StandardHostSwitch []StandardHostSwitchParameters `json:"standardHostSwitch,omitempty" tf:"standard_host_switch,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TransportNodeProfileSubConfigObservation struct {

	// Subset of the host switch configuration
	HostSwitchConfigOption []HostSwitchConfigOptionObservation `json:"hostSwitchConfigOption,omitempty" tf:"host_switch_config_option,omitempty"`

	// Name of the transport node profile config option
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TransportNodeProfileSubConfigParameters struct {

	// Subset of the host switch configuration
	// +kubebuilder:validation:Required
	HostSwitchConfigOption []HostSwitchConfigOptionParameters `json:"hostSwitchConfigOption" tf:"host_switch_config_option,omitempty"`

	// Name of the transport node profile config option
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type TransportZoneEndpointObservation struct {

	// Unique ID identifying the transport zone for this endpoint
	TransportZone *string `json:"transportZone,omitempty" tf:"transport_zone,omitempty"`

	// Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node
	TransportZoneProfile []*string `json:"transportZoneProfile,omitempty" tf:"transport_zone_profile,omitempty"`
}

type TransportZoneEndpointParameters struct {

	// Unique ID identifying the transport zone for this endpoint
	// +kubebuilder:validation:Required
	TransportZone *string `json:"transportZone" tf:"transport_zone,omitempty"`

	// Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node
	// +kubebuilder:validation:Optional
	TransportZoneProfile []*string `json:"transportZoneProfile,omitempty" tf:"transport_zone_profile,omitempty"`
}

type UplinkObservation struct {

	// Uplink name from UplinkHostSwitch profile
	UplinkName *string `json:"uplinkName,omitempty" tf:"uplink_name,omitempty"`

	// Link Aggregation Group (LAG) name of Virtual Distributed Switch
	VdsLagName *string `json:"vdsLagName,omitempty" tf:"vds_lag_name,omitempty"`

	// Uplink name of VMware vSphere Distributed Switch (VDS)
	VdsUplinkName *string `json:"vdsUplinkName,omitempty" tf:"vds_uplink_name,omitempty"`
}

type UplinkParameters struct {

	// Uplink name from UplinkHostSwitch profile
	// +kubebuilder:validation:Required
	UplinkName *string `json:"uplinkName" tf:"uplink_name,omitempty"`

	// Link Aggregation Group (LAG) name of Virtual Distributed Switch
	// +kubebuilder:validation:Optional
	VdsLagName *string `json:"vdsLagName,omitempty" tf:"vds_lag_name,omitempty"`

	// Uplink name of VMware vSphere Distributed Switch (VDS)
	// +kubebuilder:validation:Optional
	VdsUplinkName *string `json:"vdsUplinkName,omitempty" tf:"vds_uplink_name,omitempty"`
}

type VMDeploymentConfigManagementPortSubnetObservation struct {

	// IP Addresses
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Subnet Prefix Length
	PrefixLength *float64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`
}

type VMDeploymentConfigManagementPortSubnetParameters struct {

	// IP Addresses
	// +kubebuilder:validation:Required
	IPAddresses []*string `json:"ipAddresses" tf:"ip_addresses,omitempty"`

	// Subnet Prefix Length
	// +kubebuilder:validation:Required
	PrefixLength *float64 `json:"prefixLength" tf:"prefix_length,omitempty"`
}

type VMDeploymentConfigObservation struct {

	// Compute folder identifier in the specified vcenter server
	ComputeFolderID *string `json:"computeFolderId,omitempty" tf:"compute_folder_id,omitempty"`

	// Cluster identifier or resourcepool identifier for specified vcenter server
	ComputeID *string `json:"computeId,omitempty" tf:"compute_id,omitempty"`

	// List of portgroups, logical switch identifiers or segment paths for datapath connectivity
	DataNetworkIds []*string `json:"dataNetworkIds,omitempty" tf:"data_network_ids,omitempty"`

	// Default gateway for the node
	DefaultGatewayAddress []*string `json:"defaultGatewayAddress,omitempty" tf:"default_gateway_address,omitempty"`

	// Host identifier in the specified vcenter server
	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	// This flag represents whether IPv4 configuration is enabled or not
	IPv4AssignmentEnabled *bool `json:"ipv4AssignmentEnabled,omitempty" tf:"ipv4_assignment_enabled,omitempty"`

	// Portgroup, logical switch identifier or segment path for management network connectivity
	ManagementNetworkID *string `json:"managementNetworkId,omitempty" tf:"management_network_id,omitempty"`

	// Port subnets for management port. IPv4, IPv6 and Dual Stack Address is supported
	ManagementPortSubnet []ManagementPortSubnetObservation `json:"managementPortSubnet,omitempty" tf:"management_port_subnet,omitempty"`

	// Resource reservation settings
	ReservationInfo []ReservationInfoObservation `json:"reservationInfo,omitempty" tf:"reservation_info,omitempty"`

	// Storage/datastore identifier in the specified vcenter server
	StorageID *string `json:"storageId,omitempty" tf:"storage_id,omitempty"`

	// Vsphere compute identifier for identifying the vcenter server
	VcID *string `json:"vcId,omitempty" tf:"vc_id,omitempty"`
}

type VMDeploymentConfigParameters struct {

	// Compute folder identifier in the specified vcenter server
	// +kubebuilder:validation:Optional
	ComputeFolderID *string `json:"computeFolderId,omitempty" tf:"compute_folder_id,omitempty"`

	// Cluster identifier or resourcepool identifier for specified vcenter server
	// +kubebuilder:validation:Required
	ComputeID *string `json:"computeId" tf:"compute_id,omitempty"`

	// List of portgroups, logical switch identifiers or segment paths for datapath connectivity
	// +kubebuilder:validation:Required
	DataNetworkIds []*string `json:"dataNetworkIds" tf:"data_network_ids,omitempty"`

	// Default gateway for the node
	// +kubebuilder:validation:Optional
	DefaultGatewayAddress []*string `json:"defaultGatewayAddress,omitempty" tf:"default_gateway_address,omitempty"`

	// Host identifier in the specified vcenter server
	// +kubebuilder:validation:Optional
	HostID *string `json:"hostId,omitempty" tf:"host_id,omitempty"`

	// This flag represents whether IPv4 configuration is enabled or not
	// +kubebuilder:validation:Optional
	IPv4AssignmentEnabled *bool `json:"ipv4AssignmentEnabled,omitempty" tf:"ipv4_assignment_enabled,omitempty"`

	// Portgroup, logical switch identifier or segment path for management network connectivity
	// +kubebuilder:validation:Required
	ManagementNetworkID *string `json:"managementNetworkId" tf:"management_network_id,omitempty"`

	// Port subnets for management port. IPv4, IPv6 and Dual Stack Address is supported
	// +kubebuilder:validation:Optional
	ManagementPortSubnet []ManagementPortSubnetParameters `json:"managementPortSubnet,omitempty" tf:"management_port_subnet,omitempty"`

	// Resource reservation settings
	// +kubebuilder:validation:Optional
	ReservationInfo []ReservationInfoParameters `json:"reservationInfo,omitempty" tf:"reservation_info,omitempty"`

	// Storage/datastore identifier in the specified vcenter server
	// +kubebuilder:validation:Required
	StorageID *string `json:"storageId" tf:"storage_id,omitempty"`

	// Vsphere compute identifier for identifying the vcenter server
	// +kubebuilder:validation:Required
	VcID *string `json:"vcId" tf:"vc_id,omitempty"`
}

type VMDeploymentConfigReservationInfoObservation struct {

	// CPU reservation in MHz
	CPUReservationInMhz *float64 `json:"cpuReservationInMhz,omitempty" tf:"cpu_reservation_in_mhz,omitempty"`

	// CPU reservation in shares
	CPUReservationInShares *string `json:"cpuReservationInShares,omitempty" tf:"cpu_reservation_in_shares,omitempty"`

	// Memory reservation percentage
	MemoryReservationPercentage *float64 `json:"memoryReservationPercentage,omitempty" tf:"memory_reservation_percentage,omitempty"`
}

type VMDeploymentConfigReservationInfoParameters struct {

	// CPU reservation in MHz
	// +kubebuilder:validation:Optional
	CPUReservationInMhz *float64 `json:"cpuReservationInMhz,omitempty" tf:"cpu_reservation_in_mhz,omitempty"`

	// CPU reservation in shares
	// +kubebuilder:validation:Optional
	CPUReservationInShares *string `json:"cpuReservationInShares,omitempty" tf:"cpu_reservation_in_shares,omitempty"`

	// Memory reservation percentage
	// +kubebuilder:validation:Optional
	MemoryReservationPercentage *float64 `json:"memoryReservationPercentage,omitempty" tf:"memory_reservation_percentage,omitempty"`
}

type VmkInstallMigrationObservation struct {

	// The network id to which the ESX vmk interface will be migrated
	DestinationNetwork *string `json:"destinationNetwork,omitempty" tf:"destination_network,omitempty"`

	// ESX vmk interface name
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`
}

type VmkInstallMigrationParameters struct {

	// The network id to which the ESX vmk interface will be migrated
	// +kubebuilder:validation:Required
	DestinationNetwork *string `json:"destinationNetwork" tf:"destination_network,omitempty"`

	// ESX vmk interface name
	// +kubebuilder:validation:Required
	DeviceName *string `json:"deviceName" tf:"device_name,omitempty"`
}

// TransportNodeSpec defines the desired state of TransportNode
type TransportNodeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TransportNodeParameters `json:"forProvider"`
}

// TransportNodeStatus defines the observed state of TransportNode.
type TransportNodeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TransportNodeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TransportNode is the Schema for the TransportNodes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type TransportNode struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   TransportNodeSpec   `json:"spec"`
	Status TransportNodeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TransportNodeList contains a list of TransportNodes
type TransportNodeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TransportNode `json:"items"`
}

// Repository type metadata.
var (
	TransportNode_Kind             = "TransportNode"
	TransportNode_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TransportNode_Kind}.String()
	TransportNode_KindAPIVersion   = TransportNode_Kind + "." + CRDGroupVersion.String()
	TransportNode_GroupVersionKind = CRDGroupVersion.WithKind(TransportNode_Kind)
)

func init() {
	SchemeBuilder.Register(&TransportNode{}, &TransportNodeList{})
}
