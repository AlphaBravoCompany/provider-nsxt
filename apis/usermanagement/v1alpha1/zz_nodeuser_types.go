/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NodeUserObservation struct {

	// Boolean value that states if the user account is activated
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// Full name for the user
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Number of days since password was last changed
	LastPasswordChange *float64 `json:"lastPasswordChange,omitempty" tf:"last_password_change,omitempty"`

	// Number of days password is valid before it must be changed
	PasswordChangeFrequency *float64 `json:"passwordChangeFrequency,omitempty" tf:"password_change_frequency,omitempty"`

	// Number of days before user receives warning message of password expiration
	PasswordChangeWarning *float64 `json:"passwordChangeWarning,omitempty" tf:"password_change_warning,omitempty"`

	// Boolean value that states if a password reset is required
	PasswordResetRequired *bool `json:"passwordResetRequired,omitempty" tf:"password_reset_required,omitempty"`

	// User status
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// Numeric id for the user
	UserID *float64 `json:"userId,omitempty" tf:"user_id,omitempty"`

	// User login name
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type NodeUserParameters struct {

	// Boolean value that states if the user account is activated
	// +kubebuilder:validation:Optional
	Active *bool `json:"active,omitempty" tf:"active,omitempty"`

	// Full name for the user
	// +kubebuilder:validation:Optional
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// Number of days password is valid before it must be changed
	// +kubebuilder:validation:Optional
	PasswordChangeFrequency *float64 `json:"passwordChangeFrequency,omitempty" tf:"password_change_frequency,omitempty"`

	// Number of days before user receives warning message of password expiration
	// +kubebuilder:validation:Optional
	PasswordChangeWarning *float64 `json:"passwordChangeWarning,omitempty" tf:"password_change_warning,omitempty"`

	// Password for the user
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// User login name
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// NodeUserSpec defines the desired state of NodeUser
type NodeUserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NodeUserParameters `json:"forProvider"`
}

// NodeUserStatus defines the observed state of NodeUser.
type NodeUserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NodeUserObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NodeUser is the Schema for the NodeUsers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type NodeUser struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.fullName)",message="fullName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.username)",message="username is a required parameter"
	Spec   NodeUserSpec   `json:"spec"`
	Status NodeUserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NodeUserList contains a list of NodeUsers
type NodeUserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NodeUser `json:"items"`
}

// Repository type metadata.
var (
	NodeUser_Kind             = "NodeUser"
	NodeUser_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NodeUser_Kind}.String()
	NodeUser_KindAPIVersion   = NodeUser_Kind + "." + CRDGroupVersion.String()
	NodeUser_GroupVersionKind = CRDGroupVersion.WithKind(NodeUser_Kind)
)

func init() {
	SchemeBuilder.Register(&NodeUser{}, &NodeUserList{})
}
