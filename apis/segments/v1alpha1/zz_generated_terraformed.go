/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this PolicyFixedSegment
func (mg *PolicyFixedSegment) GetTerraformResourceType() string {
	return "nsxt_policy_fixed_segment"
}

// GetConnectionDetailsMapping for this PolicyFixedSegment
func (tr *PolicyFixedSegment) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyFixedSegment
func (tr *PolicyFixedSegment) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyFixedSegment
func (tr *PolicyFixedSegment) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyFixedSegment
func (tr *PolicyFixedSegment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyFixedSegment
func (tr *PolicyFixedSegment) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyFixedSegment
func (tr *PolicyFixedSegment) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyFixedSegment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyFixedSegment) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyFixedSegmentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyFixedSegment) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyIpDiscoveryProfile
func (mg *PolicyIpDiscoveryProfile) GetTerraformResourceType() string {
	return "nsxt_policy_ip_discovery_profile"
}

// GetConnectionDetailsMapping for this PolicyIpDiscoveryProfile
func (tr *PolicyIpDiscoveryProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpDiscoveryProfile
func (tr *PolicyIpDiscoveryProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpDiscoveryProfile
func (tr *PolicyIpDiscoveryProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpDiscoveryProfile
func (tr *PolicyIpDiscoveryProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpDiscoveryProfile
func (tr *PolicyIpDiscoveryProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpDiscoveryProfile
func (tr *PolicyIpDiscoveryProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpDiscoveryProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpDiscoveryProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpDiscoveryProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpDiscoveryProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyMacDiscoveryProfile
func (mg *PolicyMacDiscoveryProfile) GetTerraformResourceType() string {
	return "nsxt_policy_mac_discovery_profile"
}

// GetConnectionDetailsMapping for this PolicyMacDiscoveryProfile
func (tr *PolicyMacDiscoveryProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyMacDiscoveryProfile
func (tr *PolicyMacDiscoveryProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyMacDiscoveryProfile
func (tr *PolicyMacDiscoveryProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyMacDiscoveryProfile
func (tr *PolicyMacDiscoveryProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyMacDiscoveryProfile
func (tr *PolicyMacDiscoveryProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyMacDiscoveryProfile
func (tr *PolicyMacDiscoveryProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyMacDiscoveryProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyMacDiscoveryProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyMacDiscoveryProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyMacDiscoveryProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyQosProfile
func (mg *PolicyQosProfile) GetTerraformResourceType() string {
	return "nsxt_policy_qos_profile"
}

// GetConnectionDetailsMapping for this PolicyQosProfile
func (tr *PolicyQosProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyQosProfile
func (tr *PolicyQosProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyQosProfile
func (tr *PolicyQosProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyQosProfile
func (tr *PolicyQosProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyQosProfile
func (tr *PolicyQosProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyQosProfile
func (tr *PolicyQosProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyQosProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyQosProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyQosProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyQosProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicySegment
func (mg *PolicySegment) GetTerraformResourceType() string {
	return "nsxt_policy_segment"
}

// GetConnectionDetailsMapping for this PolicySegment
func (tr *PolicySegment) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicySegment
func (tr *PolicySegment) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicySegment
func (tr *PolicySegment) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicySegment
func (tr *PolicySegment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicySegment
func (tr *PolicySegment) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicySegment
func (tr *PolicySegment) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicySegment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicySegment) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicySegmentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicySegment) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicySegmentSecurityProfile
func (mg *PolicySegmentSecurityProfile) GetTerraformResourceType() string {
	return "nsxt_policy_segment_security_profile"
}

// GetConnectionDetailsMapping for this PolicySegmentSecurityProfile
func (tr *PolicySegmentSecurityProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicySegmentSecurityProfile
func (tr *PolicySegmentSecurityProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicySegmentSecurityProfile
func (tr *PolicySegmentSecurityProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicySegmentSecurityProfile
func (tr *PolicySegmentSecurityProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicySegmentSecurityProfile
func (tr *PolicySegmentSecurityProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicySegmentSecurityProfile
func (tr *PolicySegmentSecurityProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicySegmentSecurityProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicySegmentSecurityProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicySegmentSecurityProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicySegmentSecurityProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicySpoofGuardProfile
func (mg *PolicySpoofGuardProfile) GetTerraformResourceType() string {
	return "nsxt_policy_spoof_guard_profile"
}

// GetConnectionDetailsMapping for this PolicySpoofGuardProfile
func (tr *PolicySpoofGuardProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicySpoofGuardProfile
func (tr *PolicySpoofGuardProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicySpoofGuardProfile
func (tr *PolicySpoofGuardProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicySpoofGuardProfile
func (tr *PolicySpoofGuardProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicySpoofGuardProfile
func (tr *PolicySpoofGuardProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicySpoofGuardProfile
func (tr *PolicySpoofGuardProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicySpoofGuardProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicySpoofGuardProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicySpoofGuardProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicySpoofGuardProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyVlanSegment
func (mg *PolicyVlanSegment) GetTerraformResourceType() string {
	return "nsxt_policy_vlan_segment"
}

// GetConnectionDetailsMapping for this PolicyVlanSegment
func (tr *PolicyVlanSegment) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyVlanSegment
func (tr *PolicyVlanSegment) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyVlanSegment
func (tr *PolicyVlanSegment) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyVlanSegment
func (tr *PolicyVlanSegment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyVlanSegment
func (tr *PolicyVlanSegment) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyVlanSegment
func (tr *PolicyVlanSegment) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyVlanSegment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyVlanSegment) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyVlanSegmentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyVlanSegment) GetTerraformSchemaVersion() int {
	return 0
}
