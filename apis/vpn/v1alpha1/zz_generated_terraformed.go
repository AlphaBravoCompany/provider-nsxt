/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this PolicyIpsecVpnDpdProfile
func (mg *PolicyIpsecVpnDpdProfile) GetTerraformResourceType() string {
	return "nsxt_policy_ipsec_vpn_dpd_profile"
}

// GetConnectionDetailsMapping for this PolicyIpsecVpnDpdProfile
func (tr *PolicyIpsecVpnDpdProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpsecVpnDpdProfile
func (tr *PolicyIpsecVpnDpdProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpsecVpnDpdProfile
func (tr *PolicyIpsecVpnDpdProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpsecVpnDpdProfile
func (tr *PolicyIpsecVpnDpdProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpsecVpnDpdProfile
func (tr *PolicyIpsecVpnDpdProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpsecVpnDpdProfile
func (tr *PolicyIpsecVpnDpdProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpsecVpnDpdProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpsecVpnDpdProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpsecVpnDpdProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpsecVpnDpdProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyIpsecVpnIkeProfile
func (mg *PolicyIpsecVpnIkeProfile) GetTerraformResourceType() string {
	return "nsxt_policy_ipsec_vpn_ike_profile"
}

// GetConnectionDetailsMapping for this PolicyIpsecVpnIkeProfile
func (tr *PolicyIpsecVpnIkeProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpsecVpnIkeProfile
func (tr *PolicyIpsecVpnIkeProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpsecVpnIkeProfile
func (tr *PolicyIpsecVpnIkeProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpsecVpnIkeProfile
func (tr *PolicyIpsecVpnIkeProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpsecVpnIkeProfile
func (tr *PolicyIpsecVpnIkeProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpsecVpnIkeProfile
func (tr *PolicyIpsecVpnIkeProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpsecVpnIkeProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpsecVpnIkeProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpsecVpnIkeProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpsecVpnIkeProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyIpsecVpnLocalEndpoint
func (mg *PolicyIpsecVpnLocalEndpoint) GetTerraformResourceType() string {
	return "nsxt_policy_ipsec_vpn_local_endpoint"
}

// GetConnectionDetailsMapping for this PolicyIpsecVpnLocalEndpoint
func (tr *PolicyIpsecVpnLocalEndpoint) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpsecVpnLocalEndpoint
func (tr *PolicyIpsecVpnLocalEndpoint) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpsecVpnLocalEndpoint
func (tr *PolicyIpsecVpnLocalEndpoint) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpsecVpnLocalEndpoint
func (tr *PolicyIpsecVpnLocalEndpoint) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpsecVpnLocalEndpoint
func (tr *PolicyIpsecVpnLocalEndpoint) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpsecVpnLocalEndpoint
func (tr *PolicyIpsecVpnLocalEndpoint) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpsecVpnLocalEndpoint using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpsecVpnLocalEndpoint) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpsecVpnLocalEndpointParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpsecVpnLocalEndpoint) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyIpsecVpnService
func (mg *PolicyIpsecVpnService) GetTerraformResourceType() string {
	return "nsxt_policy_ipsec_vpn_service"
}

// GetConnectionDetailsMapping for this PolicyIpsecVpnService
func (tr *PolicyIpsecVpnService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpsecVpnService
func (tr *PolicyIpsecVpnService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpsecVpnService
func (tr *PolicyIpsecVpnService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpsecVpnService
func (tr *PolicyIpsecVpnService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpsecVpnService
func (tr *PolicyIpsecVpnService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpsecVpnService
func (tr *PolicyIpsecVpnService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpsecVpnService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpsecVpnService) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpsecVpnServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpsecVpnService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyIpsecVpnSession
func (mg *PolicyIpsecVpnSession) GetTerraformResourceType() string {
	return "nsxt_policy_ipsec_vpn_session"
}

// GetConnectionDetailsMapping for this PolicyIpsecVpnSession
func (tr *PolicyIpsecVpnSession) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"psk": "spec.forProvider.pskSecretRef"}
}

// GetObservation of this PolicyIpsecVpnSession
func (tr *PolicyIpsecVpnSession) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpsecVpnSession
func (tr *PolicyIpsecVpnSession) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpsecVpnSession
func (tr *PolicyIpsecVpnSession) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpsecVpnSession
func (tr *PolicyIpsecVpnSession) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpsecVpnSession
func (tr *PolicyIpsecVpnSession) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpsecVpnSession using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpsecVpnSession) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpsecVpnSessionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpsecVpnSession) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyIpsecVpnTunnelProfile
func (mg *PolicyIpsecVpnTunnelProfile) GetTerraformResourceType() string {
	return "nsxt_policy_ipsec_vpn_tunnel_profile"
}

// GetConnectionDetailsMapping for this PolicyIpsecVpnTunnelProfile
func (tr *PolicyIpsecVpnTunnelProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpsecVpnTunnelProfile
func (tr *PolicyIpsecVpnTunnelProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpsecVpnTunnelProfile
func (tr *PolicyIpsecVpnTunnelProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpsecVpnTunnelProfile
func (tr *PolicyIpsecVpnTunnelProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpsecVpnTunnelProfile
func (tr *PolicyIpsecVpnTunnelProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpsecVpnTunnelProfile
func (tr *PolicyIpsecVpnTunnelProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpsecVpnTunnelProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpsecVpnTunnelProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpsecVpnTunnelProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpsecVpnTunnelProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyL2VpnService
func (mg *PolicyL2VpnService) GetTerraformResourceType() string {
	return "nsxt_policy_l2_vpn_service"
}

// GetConnectionDetailsMapping for this PolicyL2VpnService
func (tr *PolicyL2VpnService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyL2VpnService
func (tr *PolicyL2VpnService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyL2VpnService
func (tr *PolicyL2VpnService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyL2VpnService
func (tr *PolicyL2VpnService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyL2VpnService
func (tr *PolicyL2VpnService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyL2VpnService
func (tr *PolicyL2VpnService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyL2VpnService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyL2VpnService) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyL2VpnServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyL2VpnService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyL2VpnSession
func (mg *PolicyL2VpnSession) GetTerraformResourceType() string {
	return "nsxt_policy_l2_vpn_session"
}

// GetConnectionDetailsMapping for this PolicyL2VpnSession
func (tr *PolicyL2VpnSession) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyL2VpnSession
func (tr *PolicyL2VpnSession) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyL2VpnSession
func (tr *PolicyL2VpnSession) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyL2VpnSession
func (tr *PolicyL2VpnSession) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyL2VpnSession
func (tr *PolicyL2VpnSession) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyL2VpnSession
func (tr *PolicyL2VpnSession) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyL2VpnSession using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyL2VpnSession) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyL2VpnSessionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyL2VpnSession) GetTerraformSchemaVersion() int {
	return 0
}
