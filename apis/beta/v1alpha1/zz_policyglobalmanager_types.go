/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConnectionInfoObservation struct {

	// Fully Qualified Domain Name of the Management Node
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// id of Site
	SiteUUID *string `json:"siteUuid,omitempty" tf:"site_uuid,omitempty"`

	// Thumbprint of Enforcement Point
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// Username
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type ConnectionInfoParameters struct {

	// Fully Qualified Domain Name of the Management Node
	// +kubebuilder:validation:Optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// Password
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// id of Site
	// +kubebuilder:validation:Optional
	SiteUUID *string `json:"siteUuid,omitempty" tf:"site_uuid,omitempty"`

	// Thumbprint of Enforcement Point
	// +kubebuilder:validation:Optional
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`

	// Username
	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type PolicyGlobalManagerObservation struct {

	// Connection information
	ConnectionInfo []ConnectionInfoObservation `json:"connectionInfo,omitempty" tf:"connection_info,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Fail onboarding if maximum RTT exceeded
	FailIfRttExceeded *bool `json:"failIfRttExceeded,omitempty" tf:"fail_if_rtt_exceeded,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Maximum acceptable packet round trip time (RTT)
	MaximumRtt *float64 `json:"maximumRtt,omitempty" tf:"maximum_rtt,omitempty"`

	// Mode of the global manager
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyGlobalManagerTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyGlobalManagerParameters struct {

	// Connection information
	// +kubebuilder:validation:Optional
	ConnectionInfo []ConnectionInfoParameters `json:"connectionInfo,omitempty" tf:"connection_info,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Fail onboarding if maximum RTT exceeded
	// +kubebuilder:validation:Optional
	FailIfRttExceeded *bool `json:"failIfRttExceeded,omitempty" tf:"fail_if_rtt_exceeded,omitempty"`

	// Maximum acceptable packet round trip time (RTT)
	// +kubebuilder:validation:Optional
	MaximumRtt *float64 `json:"maximumRtt,omitempty" tf:"maximum_rtt,omitempty"`

	// Mode of the global manager
	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyGlobalManagerTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyGlobalManagerTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyGlobalManagerTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyGlobalManagerSpec defines the desired state of PolicyGlobalManager
type PolicyGlobalManagerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyGlobalManagerParameters `json:"forProvider"`
}

// PolicyGlobalManagerStatus defines the observed state of PolicyGlobalManager.
type PolicyGlobalManagerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyGlobalManagerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyGlobalManager is the Schema for the PolicyGlobalManagers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyGlobalManager struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.mode)",message="mode is a required parameter"
	Spec   PolicyGlobalManagerSpec   `json:"spec"`
	Status PolicyGlobalManagerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyGlobalManagerList contains a list of PolicyGlobalManagers
type PolicyGlobalManagerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyGlobalManager `json:"items"`
}

// Repository type metadata.
var (
	PolicyGlobalManager_Kind             = "PolicyGlobalManager"
	PolicyGlobalManager_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyGlobalManager_Kind}.String()
	PolicyGlobalManager_KindAPIVersion   = PolicyGlobalManager_Kind + "." + CRDGroupVersion.String()
	PolicyGlobalManager_GroupVersionKind = CRDGroupVersion.WithKind(PolicyGlobalManager_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyGlobalManager{}, &PolicyGlobalManagerList{})
}
