/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyLbClientSslProfileObservation struct {

	// A label of cipher group which is mostly consumed by GUI. Default value is BALANCED.
	CipherGroupLabel *string `json:"cipherGroupLabel,omitempty" tf:"cipher_group_label,omitempty"`

	// Supported SSL cipher list
	Ciphers []*string `json:"ciphers,omitempty" tf:"ciphers,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// This flag is set to true when all the ciphers and protocols are FIPS compliant. It is set to false when one of the ciphers or protocols are not FIPS compliant.
	IsFips *bool `json:"isFips,omitempty" tf:"is_fips,omitempty"`

	// This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure
	IsSecure *bool `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// During SSL handshake as part of the SSL client Hello client sends an ordered list of ciphers that it can support (or prefers) and typically server selects the first one from the top of that list it can also support. For Perfect Forward Secrecy(PFS), server could override the client's preference.
	PreferServerCiphers *bool `json:"preferServerCiphers,omitempty" tf:"prefer_server_ciphers,omitempty"`

	// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// If set to true, SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake.
	SessionCacheEnabled *bool `json:"sessionCacheEnabled,omitempty" tf:"session_cache_enabled,omitempty"`

	// Session cache timeout specifies how long the SSL session parameters are held on to and can be reused. Default value is 300.
	SessionCacheTimeout *float64 `json:"sessionCacheTimeout,omitempty" tf:"session_cache_timeout,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyLbClientSslProfileTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyLbClientSslProfileParameters struct {

	// A label of cipher group which is mostly consumed by GUI. Default value is BALANCED.
	// +kubebuilder:validation:Optional
	CipherGroupLabel *string `json:"cipherGroupLabel,omitempty" tf:"cipher_group_label,omitempty"`

	// Supported SSL cipher list
	// +kubebuilder:validation:Optional
	Ciphers []*string `json:"ciphers,omitempty" tf:"ciphers,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// During SSL handshake as part of the SSL client Hello client sends an ordered list of ciphers that it can support (or prefers) and typically server selects the first one from the top of that list it can also support. For Perfect Forward Secrecy(PFS), server could override the client's preference.
	// +kubebuilder:validation:Optional
	PreferServerCiphers *bool `json:"preferServerCiphers,omitempty" tf:"prefer_server_ciphers,omitempty"`

	// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default
	// +kubebuilder:validation:Optional
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// If set to true, SSL session caching allows SSL client and server to reuse previously negotiated security parameters avoiding the expensive public key operation during handshake.
	// +kubebuilder:validation:Optional
	SessionCacheEnabled *bool `json:"sessionCacheEnabled,omitempty" tf:"session_cache_enabled,omitempty"`

	// Session cache timeout specifies how long the SSL session parameters are held on to and can be reused. Default value is 300.
	// +kubebuilder:validation:Optional
	SessionCacheTimeout *float64 `json:"sessionCacheTimeout,omitempty" tf:"session_cache_timeout,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyLbClientSslProfileTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyLbClientSslProfileTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyLbClientSslProfileTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyLbClientSslProfileSpec defines the desired state of PolicyLbClientSslProfile
type PolicyLbClientSslProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyLbClientSslProfileParameters `json:"forProvider"`
}

// PolicyLbClientSslProfileStatus defines the observed state of PolicyLbClientSslProfile.
type PolicyLbClientSslProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyLbClientSslProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyLbClientSslProfile is the Schema for the PolicyLbClientSslProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyLbClientSslProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   PolicyLbClientSslProfileSpec   `json:"spec"`
	Status PolicyLbClientSslProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyLbClientSslProfileList contains a list of PolicyLbClientSslProfiles
type PolicyLbClientSslProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyLbClientSslProfile `json:"items"`
}

// Repository type metadata.
var (
	PolicyLbClientSslProfile_Kind             = "PolicyLbClientSslProfile"
	PolicyLbClientSslProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyLbClientSslProfile_Kind}.String()
	PolicyLbClientSslProfile_KindAPIVersion   = PolicyLbClientSslProfile_Kind + "." + CRDGroupVersion.String()
	PolicyLbClientSslProfile_GroupVersionKind = CRDGroupVersion.WithKind(PolicyLbClientSslProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyLbClientSslProfile{}, &PolicyLbClientSslProfileList{})
}
