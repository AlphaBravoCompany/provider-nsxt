/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FirewallSectionsObservation struct {

	// A boolean flag which will be set to false if the referenced NSX resource has been deleted
	IsValid *bool `json:"isValid,omitempty" tf:"is_valid,omitempty"`

	// Display name of the NSX resource
	TargetDisplayName *string `json:"targetDisplayName,omitempty" tf:"target_display_name,omitempty"`

	// Identifier of the NSX resource
	TargetID *string `json:"targetId,omitempty" tf:"target_id,omitempty"`

	// Type of the NSX resource
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type FirewallSectionsParameters struct {

	// Identifier of the NSX resource
	// +kubebuilder:validation:Optional
	TargetID *string `json:"targetId,omitempty" tf:"target_id,omitempty"`

	// Type of the NSX resource
	// +kubebuilder:validation:Optional
	TargetType *string `json:"targetType,omitempty" tf:"target_type,omitempty"`
}

type LogicalTier1RouterObservation struct {

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	AdvertiseConfigRevision *float64 `json:"advertiseConfigRevision,omitempty" tf:"advertise_config_revision,omitempty"`

	// Enable connected NSX routes advertisement
	AdvertiseConnectedRoutes *bool `json:"advertiseConnectedRoutes,omitempty" tf:"advertise_connected_routes,omitempty"`

	// Enable LB SNAT IP routes advertisement
	AdvertiseLBSnatIPRoutes *bool `json:"advertiseLbSnatIpRoutes,omitempty" tf:"advertise_lb_snat_ip_routes,omitempty"`

	// Enable LB VIP routes advertisement
	AdvertiseLBVipRoutes *bool `json:"advertiseLbVipRoutes,omitempty" tf:"advertise_lb_vip_routes,omitempty"`

	// Enable NAT routes advertisement
	AdvertiseNATRoutes *bool `json:"advertiseNatRoutes,omitempty" tf:"advertise_nat_routes,omitempty"`

	// Enable static routes advertisement
	AdvertiseStaticRoutes *bool `json:"advertiseStaticRoutes,omitempty" tf:"advertise_static_routes,omitempty"`

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Edge Cluster Id
	EdgeClusterID *string `json:"edgeClusterId,omitempty" tf:"edge_cluster_id,omitempty"`

	// Enable router advertisement
	EnableRouterAdvertisement *bool `json:"enableRouterAdvertisement,omitempty" tf:"enable_router_advertisement,omitempty"`

	// Failover mode which determines whether the preferred service router instance for given logical router will preempt the peer
	FailoverMode *string `json:"failoverMode,omitempty" tf:"failover_mode,omitempty"`

	// List of Firewall sections related to the logical router
	FirewallSections []FirewallSectionsObservation `json:"firewallSections,omitempty" tf:"firewall_sections,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LogicalTier1RouterParameters struct {

	// Enable connected NSX routes advertisement
	// +kubebuilder:validation:Optional
	AdvertiseConnectedRoutes *bool `json:"advertiseConnectedRoutes,omitempty" tf:"advertise_connected_routes,omitempty"`

	// Enable LB SNAT IP routes advertisement
	// +kubebuilder:validation:Optional
	AdvertiseLBSnatIPRoutes *bool `json:"advertiseLbSnatIpRoutes,omitempty" tf:"advertise_lb_snat_ip_routes,omitempty"`

	// Enable LB VIP routes advertisement
	// +kubebuilder:validation:Optional
	AdvertiseLBVipRoutes *bool `json:"advertiseLbVipRoutes,omitempty" tf:"advertise_lb_vip_routes,omitempty"`

	// Enable NAT routes advertisement
	// +kubebuilder:validation:Optional
	AdvertiseNATRoutes *bool `json:"advertiseNatRoutes,omitempty" tf:"advertise_nat_routes,omitempty"`

	// Enable static routes advertisement
	// +kubebuilder:validation:Optional
	AdvertiseStaticRoutes *bool `json:"advertiseStaticRoutes,omitempty" tf:"advertise_static_routes,omitempty"`

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Edge Cluster Id
	// +kubebuilder:validation:Optional
	EdgeClusterID *string `json:"edgeClusterId,omitempty" tf:"edge_cluster_id,omitempty"`

	// Enable router advertisement
	// +kubebuilder:validation:Optional
	EnableRouterAdvertisement *bool `json:"enableRouterAdvertisement,omitempty" tf:"enable_router_advertisement,omitempty"`

	// Failover mode which determines whether the preferred service router instance for given logical router will preempt the peer
	// +kubebuilder:validation:Optional
	FailoverMode *string `json:"failoverMode,omitempty" tf:"failover_mode,omitempty"`

	// List of Firewall sections related to the logical router
	// +kubebuilder:validation:Optional
	FirewallSections []FirewallSectionsParameters `json:"firewallSections,omitempty" tf:"firewall_sections,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LogicalTier1RouterSpec defines the desired state of LogicalTier1Router
type LogicalTier1RouterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogicalTier1RouterParameters `json:"forProvider"`
}

// LogicalTier1RouterStatus defines the observed state of LogicalTier1Router.
type LogicalTier1RouterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogicalTier1RouterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalTier1Router is the Schema for the LogicalTier1Routers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LogicalTier1Router struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LogicalTier1RouterSpec   `json:"spec"`
	Status            LogicalTier1RouterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalTier1RouterList contains a list of LogicalTier1Routers
type LogicalTier1RouterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicalTier1Router `json:"items"`
}

// Repository type metadata.
var (
	LogicalTier1Router_Kind             = "LogicalTier1Router"
	LogicalTier1Router_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogicalTier1Router_Kind}.String()
	LogicalTier1Router_KindAPIVersion   = LogicalTier1Router_Kind + "." + CRDGroupVersion.String()
	LogicalTier1Router_GroupVersionKind = CRDGroupVersion.WithKind(LogicalTier1Router_Kind)
)

func init() {
	SchemeBuilder.Register(&LogicalTier1Router{}, &LogicalTier1RouterList{})
}
