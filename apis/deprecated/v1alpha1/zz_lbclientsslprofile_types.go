/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbClientSslProfileObservation struct {

	// Supported SSL cipher list
	Ciphers []*string `json:"ciphers,omitempty" tf:"ciphers,omitempty"`

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// This flag is set to true when all the ciphers and protocols are secure. It is set to false when one of the ciphers or protocols is insecure
	IsSecure *bool `json:"isSecure,omitempty" tf:"is_secure,omitempty"`

	// Allow server to override the client's preference
	PreferServerCiphers *bool `json:"preferServerCiphers,omitempty" tf:"prefer_server_ciphers,omitempty"`

	// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Reuse previously negotiated security parameters during handshake
	SessionCacheEnabled *bool `json:"sessionCacheEnabled,omitempty" tf:"session_cache_enabled,omitempty"`

	// For how long the SSL session parameters can be reused
	SessionCacheTimeout *float64 `json:"sessionCacheTimeout,omitempty" tf:"session_cache_timeout,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []LbClientSslProfileTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbClientSslProfileParameters struct {

	// Supported SSL cipher list
	// +kubebuilder:validation:Optional
	Ciphers []*string `json:"ciphers,omitempty" tf:"ciphers,omitempty"`

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Allow server to override the client's preference
	// +kubebuilder:validation:Optional
	PreferServerCiphers *bool `json:"preferServerCiphers,omitempty" tf:"prefer_server_ciphers,omitempty"`

	// SSL versions TLS1.1 and TLS1.2 are supported and enabled by default. SSLv2, SSLv3, and TLS1.0 are supported, but disabled by default
	// +kubebuilder:validation:Optional
	Protocols []*string `json:"protocols,omitempty" tf:"protocols,omitempty"`

	// Reuse previously negotiated security parameters during handshake
	// +kubebuilder:validation:Optional
	SessionCacheEnabled *bool `json:"sessionCacheEnabled,omitempty" tf:"session_cache_enabled,omitempty"`

	// For how long the SSL session parameters can be reused
	// +kubebuilder:validation:Optional
	SessionCacheTimeout *float64 `json:"sessionCacheTimeout,omitempty" tf:"session_cache_timeout,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []LbClientSslProfileTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbClientSslProfileTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbClientSslProfileTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LbClientSslProfileSpec defines the desired state of LbClientSslProfile
type LbClientSslProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbClientSslProfileParameters `json:"forProvider"`
}

// LbClientSslProfileStatus defines the observed state of LbClientSslProfile.
type LbClientSslProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbClientSslProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbClientSslProfile is the Schema for the LbClientSslProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LbClientSslProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbClientSslProfileSpec   `json:"spec"`
	Status            LbClientSslProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbClientSslProfileList contains a list of LbClientSslProfiles
type LbClientSslProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbClientSslProfile `json:"items"`
}

// Repository type metadata.
var (
	LbClientSslProfile_Kind             = "LbClientSslProfile"
	LbClientSslProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbClientSslProfile_Kind}.String()
	LbClientSslProfile_KindAPIVersion   = LbClientSslProfile_Kind + "." + CRDGroupVersion.String()
	LbClientSslProfile_GroupVersionKind = CRDGroupVersion.WithKind(LbClientSslProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&LbClientSslProfile{}, &LbClientSslProfileList{})
}
