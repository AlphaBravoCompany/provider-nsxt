/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbFastUdpApplicationProfileObservation struct {

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// A boolean flag which reflects whether flow mirroring is enabled, and all the flows to the bounded virtual server are mirrored to the standby node
	HaFlowMirroring *bool `json:"haFlowMirroring,omitempty" tf:"ha_flow_mirroring,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Timeout in seconds to specify how long an idle UDP connection in ESTABLISHED state should be kept for this application before cleaning up
	IdleTimeout *float64 `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []LbFastUdpApplicationProfileTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbFastUdpApplicationProfileParameters struct {

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// A boolean flag which reflects whether flow mirroring is enabled, and all the flows to the bounded virtual server are mirrored to the standby node
	// +kubebuilder:validation:Optional
	HaFlowMirroring *bool `json:"haFlowMirroring,omitempty" tf:"ha_flow_mirroring,omitempty"`

	// Timeout in seconds to specify how long an idle UDP connection in ESTABLISHED state should be kept for this application before cleaning up
	// +kubebuilder:validation:Optional
	IdleTimeout *float64 `json:"idleTimeout,omitempty" tf:"idle_timeout,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []LbFastUdpApplicationProfileTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbFastUdpApplicationProfileTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbFastUdpApplicationProfileTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LbFastUdpApplicationProfileSpec defines the desired state of LbFastUdpApplicationProfile
type LbFastUdpApplicationProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbFastUdpApplicationProfileParameters `json:"forProvider"`
}

// LbFastUdpApplicationProfileStatus defines the observed state of LbFastUdpApplicationProfile.
type LbFastUdpApplicationProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbFastUdpApplicationProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbFastUdpApplicationProfile is the Schema for the LbFastUdpApplicationProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LbFastUdpApplicationProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LbFastUdpApplicationProfileSpec   `json:"spec"`
	Status            LbFastUdpApplicationProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbFastUdpApplicationProfileList contains a list of LbFastUdpApplicationProfiles
type LbFastUdpApplicationProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbFastUdpApplicationProfile `json:"items"`
}

// Repository type metadata.
var (
	LbFastUdpApplicationProfile_Kind             = "LbFastUdpApplicationProfile"
	LbFastUdpApplicationProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbFastUdpApplicationProfile_Kind}.String()
	LbFastUdpApplicationProfile_KindAPIVersion   = LbFastUdpApplicationProfile_Kind + "." + CRDGroupVersion.String()
	LbFastUdpApplicationProfile_GroupVersionKind = CRDGroupVersion.WithKind(LbFastUdpApplicationProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&LbFastUdpApplicationProfile{}, &LbFastUdpApplicationProfileList{})
}
