/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CPUConfigObservation struct {

	// Number of Logical cpu cores (Lcores) to be placed on a specified NUMA node
	NumLcores *float64 `json:"numLcores,omitempty" tf:"num_lcores,omitempty"`

	// Unique index of the Non Uniform Memory Access (NUMA) node
	NumaNodeIndex *float64 `json:"numaNodeIndex,omitempty" tf:"numa_node_index,omitempty"`
}

type CPUConfigParameters struct {

	// Number of Logical cpu cores (Lcores) to be placed on a specified NUMA node
	// +kubebuilder:validation:Required
	NumLcores *float64 `json:"numLcores" tf:"num_lcores,omitempty"`

	// Unique index of the Non Uniform Memory Access (NUMA) node
	// +kubebuilder:validation:Required
	NumaNodeIndex *float64 `json:"numaNodeIndex" tf:"numa_node_index,omitempty"`
}

type HostSwitchConfigOptionIPAssignmentObservation struct {

	// Enables DHCP assignment
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	StaticIP []IPAssignmentStaticIPObservation `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP and MAC assignment specification for Static IP List
	StaticIPMac []IPAssignmentStaticIPMacObservation `json:"staticIpMac,omitempty" tf:"static_ip_mac,omitempty"`

	// IP assignment specification for Static IP Pool
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type HostSwitchConfigOptionIPAssignmentParameters struct {

	// Enables DHCP assignment
	// +kubebuilder:validation:Optional
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	// +kubebuilder:validation:Optional
	StaticIP []IPAssignmentStaticIPParameters `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP and MAC assignment specification for Static IP List
	// +kubebuilder:validation:Optional
	StaticIPMac []IPAssignmentStaticIPMacParameters `json:"staticIpMac,omitempty" tf:"static_ip_mac,omitempty"`

	// IP assignment specification for Static IP Pool
	// +kubebuilder:validation:Optional
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type HostSwitchConfigOptionObservation struct {

	// The host switch id. This ID will be used to reference a host switch
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Identifiers of host switch profiles to be associated with this host switch
	HostSwitchProfile []*string `json:"hostSwitchProfile,omitempty" tf:"host_switch_profile,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	IPAssignment []HostSwitchConfigOptionIPAssignmentObservation `json:"ipAssignment,omitempty" tf:"ip_assignment,omitempty"`

	// Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch
	Uplink []UplinkObservation `json:"uplink,omitempty" tf:"uplink,omitempty"`
}

type HostSwitchConfigOptionParameters struct {

	// The host switch id. This ID will be used to reference a host switch
	// +kubebuilder:validation:Optional
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Identifiers of host switch profiles to be associated with this host switch
	// +kubebuilder:validation:Optional
	HostSwitchProfile []*string `json:"hostSwitchProfile,omitempty" tf:"host_switch_profile,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAssignment []HostSwitchConfigOptionIPAssignmentParameters `json:"ipAssignment" tf:"ip_assignment,omitempty"`

	// Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch
	// +kubebuilder:validation:Optional
	Uplink []UplinkParameters `json:"uplink,omitempty" tf:"uplink,omitempty"`
}

type IPAssignmentObservation struct {

	// Enables DHCP assignment
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	StaticIP []StaticIPObservation `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP and MAC assignment specification for Static IP List
	StaticIPMac []StaticIPMacObservation `json:"staticIpMac,omitempty" tf:"static_ip_mac,omitempty"`

	// IP assignment specification for Static IP Pool
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type IPAssignmentParameters struct {

	// Enables DHCP assignment
	// +kubebuilder:validation:Optional
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	// +kubebuilder:validation:Optional
	StaticIP []StaticIPParameters `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP and MAC assignment specification for Static IP List
	// +kubebuilder:validation:Optional
	StaticIPMac []StaticIPMacParameters `json:"staticIpMac,omitempty" tf:"static_ip_mac,omitempty"`

	// IP assignment specification for Static IP Pool
	// +kubebuilder:validation:Optional
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type IPAssignmentStaticIPMacObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs and MACs for transport node host switch virtual tunnel endpoints
	IPMacPair []StaticIPMacIPMacPairObservation `json:"ipMacPair,omitempty" tf:"ip_mac_pair,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type IPAssignmentStaticIPMacParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs and MACs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPMacPair []StaticIPMacIPMacPairParameters `json:"ipMacPair" tf:"ip_mac_pair,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

type IPAssignmentStaticIPObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type IPAssignmentStaticIPParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAddresses []*string `json:"ipAddresses" tf:"ip_addresses,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

type IPMacPairObservation struct {

	// IP address
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// MAC address
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type IPMacPairParameters struct {

	// IP address
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// MAC address
	// +kubebuilder:validation:Optional
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type PnicObservation struct {

	// Device name or key
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`

	// Uplink name for this Pnic
	UplinkName *string `json:"uplinkName,omitempty" tf:"uplink_name,omitempty"`
}

type PnicParameters struct {

	// Device name or key
	// +kubebuilder:validation:Required
	DeviceName *string `json:"deviceName" tf:"device_name,omitempty"`

	// Uplink name for this Pnic
	// +kubebuilder:validation:Required
	UplinkName *string `json:"uplinkName" tf:"uplink_name,omitempty"`
}

type PolicyHostTransportNodeProfileObservation struct {

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Determines if cluster-level configuration should be applied on overridden hosts
	IgnoreOverriddenHosts *bool `json:"ignoreOverriddenHosts,omitempty" tf:"ignore_overridden_hosts,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Preconfigured host switch
	PreconfiguredHostSwitch []PreconfiguredHostSwitchObservation `json:"preconfiguredHostSwitch,omitempty" tf:"preconfigured_host_switch,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Standard host switch specification
	StandardHostSwitch []StandardHostSwitchObservation `json:"standardHostSwitch,omitempty" tf:"standard_host_switch,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyHostTransportNodeProfileParameters struct {

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Determines if cluster-level configuration should be applied on overridden hosts
	// +kubebuilder:validation:Optional
	IgnoreOverriddenHosts *bool `json:"ignoreOverriddenHosts,omitempty" tf:"ignore_overridden_hosts,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Preconfigured host switch
	// +kubebuilder:validation:Optional
	PreconfiguredHostSwitch []PreconfiguredHostSwitchParameters `json:"preconfiguredHostSwitch,omitempty" tf:"preconfigured_host_switch,omitempty"`

	// Standard host switch specification
	// +kubebuilder:validation:Optional
	StandardHostSwitch []StandardHostSwitchParameters `json:"standardHostSwitch,omitempty" tf:"standard_host_switch,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PreconfiguredHostSwitchObservation struct {

	// Name of the virtual tunnel endpoint
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// External Id of the preconfigured host switch
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Transport zone endpoints
	TransportZoneEndpoint []TransportZoneEndpointObservation `json:"transportZoneEndpoint,omitempty" tf:"transport_zone_endpoint,omitempty"`
}

type PreconfiguredHostSwitchParameters struct {

	// Name of the virtual tunnel endpoint
	// +kubebuilder:validation:Optional
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`

	// External Id of the preconfigured host switch
	// +kubebuilder:validation:Required
	HostSwitchID *string `json:"hostSwitchId" tf:"host_switch_id,omitempty"`

	// Transport zone endpoints
	// +kubebuilder:validation:Optional
	TransportZoneEndpoint []TransportZoneEndpointParameters `json:"transportZoneEndpoint,omitempty" tf:"transport_zone_endpoint,omitempty"`
}

type StandardHostSwitchObservation struct {

	// Enhanced Networking Stack enabled HostSwitch CPU configuration
	CPUConfig []CPUConfigObservation `json:"cpuConfig,omitempty" tf:"cpu_config,omitempty"`

	// The host switch id. This ID will be used to reference a host switch
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Operational mode of a HostSwitch
	HostSwitchMode *string `json:"hostSwitchMode,omitempty" tf:"host_switch_mode,omitempty"`

	// Identifiers of host switch profiles to be associated with this host switch
	HostSwitchProfile []*string `json:"hostSwitchProfile,omitempty" tf:"host_switch_profile,omitempty"`

	// Type of HostSwitch
	HostSwitchType *string `json:"hostSwitchType,omitempty" tf:"host_switch_type,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	IPAssignment []IPAssignmentObservation `json:"ipAssignment,omitempty" tf:"ip_assignment,omitempty"`

	// Migrate any pnics which are in use
	IsMigratePnics *bool `json:"isMigratePnics,omitempty" tf:"is_migrate_pnics,omitempty"`

	// Physical NICs connected to the host switch
	Pnic []PnicObservation `json:"pnic,omitempty" tf:"pnic,omitempty"`

	// Transport Zone ID representing the DVS used in NSX on DVPG
	PortgroupTransportZone *string `json:"portgroupTransportZone,omitempty" tf:"portgroup_transport_zone,omitempty"`

	// Transport Node Profile sub-configuration Options
	TransportNodeProfileSubConfig []TransportNodeProfileSubConfigObservation `json:"transportNodeProfileSubConfig,omitempty" tf:"transport_node_profile_sub_config,omitempty"`

	// Transport zone endpoints
	TransportZoneEndpoint []StandardHostSwitchTransportZoneEndpointObservation `json:"transportZoneEndpoint,omitempty" tf:"transport_zone_endpoint,omitempty"`

	// Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch
	Uplink []StandardHostSwitchUplinkObservation `json:"uplink,omitempty" tf:"uplink,omitempty"`

	// The vmknic and logical switch mappings
	VmkInstallMigration []VmkInstallMigrationObservation `json:"vmkInstallMigration,omitempty" tf:"vmk_install_migration,omitempty"`
}

type StandardHostSwitchParameters struct {

	// Enhanced Networking Stack enabled HostSwitch CPU configuration
	// +kubebuilder:validation:Optional
	CPUConfig []CPUConfigParameters `json:"cpuConfig,omitempty" tf:"cpu_config,omitempty"`

	// The host switch id. This ID will be used to reference a host switch
	// +kubebuilder:validation:Optional
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Operational mode of a HostSwitch
	// +kubebuilder:validation:Optional
	HostSwitchMode *string `json:"hostSwitchMode,omitempty" tf:"host_switch_mode,omitempty"`

	// Identifiers of host switch profiles to be associated with this host switch
	// +kubebuilder:validation:Optional
	HostSwitchProfile []*string `json:"hostSwitchProfile,omitempty" tf:"host_switch_profile,omitempty"`

	// Type of HostSwitch
	// +kubebuilder:validation:Optional
	HostSwitchType *string `json:"hostSwitchType,omitempty" tf:"host_switch_type,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAssignment []IPAssignmentParameters `json:"ipAssignment" tf:"ip_assignment,omitempty"`

	// Migrate any pnics which are in use
	// +kubebuilder:validation:Optional
	IsMigratePnics *bool `json:"isMigratePnics,omitempty" tf:"is_migrate_pnics,omitempty"`

	// Physical NICs connected to the host switch
	// +kubebuilder:validation:Optional
	Pnic []PnicParameters `json:"pnic,omitempty" tf:"pnic,omitempty"`

	// Transport Zone ID representing the DVS used in NSX on DVPG
	// +kubebuilder:validation:Optional
	PortgroupTransportZone *string `json:"portgroupTransportZone,omitempty" tf:"portgroup_transport_zone,omitempty"`

	// Transport Node Profile sub-configuration Options
	// +kubebuilder:validation:Optional
	TransportNodeProfileSubConfig []TransportNodeProfileSubConfigParameters `json:"transportNodeProfileSubConfig,omitempty" tf:"transport_node_profile_sub_config,omitempty"`

	// Transport zone endpoints
	// +kubebuilder:validation:Optional
	TransportZoneEndpoint []StandardHostSwitchTransportZoneEndpointParameters `json:"transportZoneEndpoint,omitempty" tf:"transport_zone_endpoint,omitempty"`

	// Uplink/LAG of VMware vSphere Distributed Switch connected to the HostSwitch
	// +kubebuilder:validation:Optional
	Uplink []StandardHostSwitchUplinkParameters `json:"uplink,omitempty" tf:"uplink,omitempty"`

	// The vmknic and logical switch mappings
	// +kubebuilder:validation:Optional
	VmkInstallMigration []VmkInstallMigrationParameters `json:"vmkInstallMigration,omitempty" tf:"vmk_install_migration,omitempty"`
}

type StandardHostSwitchTransportZoneEndpointObservation struct {

	// Unique ID identifying the transport zone for this endpoint
	TransportZone *string `json:"transportZone,omitempty" tf:"transport_zone,omitempty"`

	// Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node
	TransportZoneProfile []*string `json:"transportZoneProfile,omitempty" tf:"transport_zone_profile,omitempty"`
}

type StandardHostSwitchTransportZoneEndpointParameters struct {

	// Unique ID identifying the transport zone for this endpoint
	// +kubebuilder:validation:Required
	TransportZone *string `json:"transportZone" tf:"transport_zone,omitempty"`

	// Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node
	// +kubebuilder:validation:Optional
	TransportZoneProfile []*string `json:"transportZoneProfile,omitempty" tf:"transport_zone_profile,omitempty"`
}

type StandardHostSwitchUplinkObservation struct {

	// Uplink name from UplinkHostSwitch profile
	UplinkName *string `json:"uplinkName,omitempty" tf:"uplink_name,omitempty"`

	// Link Aggregation Group (LAG) name of Virtual Distributed Switch
	VdsLagName *string `json:"vdsLagName,omitempty" tf:"vds_lag_name,omitempty"`

	// Uplink name of VMware vSphere Distributed Switch (VDS)
	VdsUplinkName *string `json:"vdsUplinkName,omitempty" tf:"vds_uplink_name,omitempty"`
}

type StandardHostSwitchUplinkParameters struct {

	// Uplink name from UplinkHostSwitch profile
	// +kubebuilder:validation:Required
	UplinkName *string `json:"uplinkName" tf:"uplink_name,omitempty"`

	// Link Aggregation Group (LAG) name of Virtual Distributed Switch
	// +kubebuilder:validation:Optional
	VdsLagName *string `json:"vdsLagName,omitempty" tf:"vds_lag_name,omitempty"`

	// Uplink name of VMware vSphere Distributed Switch (VDS)
	// +kubebuilder:validation:Optional
	VdsUplinkName *string `json:"vdsUplinkName,omitempty" tf:"vds_uplink_name,omitempty"`
}

type StaticIPMacIPMacPairObservation struct {

	// IP address
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// MAC address
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type StaticIPMacIPMacPairParameters struct {

	// IP address
	// +kubebuilder:validation:Required
	IP *string `json:"ip" tf:"ip,omitempty"`

	// MAC address
	// +kubebuilder:validation:Optional
	Mac *string `json:"mac,omitempty" tf:"mac,omitempty"`
}

type StaticIPMacObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs and MACs for transport node host switch virtual tunnel endpoints
	IPMacPair []IPMacPairObservation `json:"ipMacPair,omitempty" tf:"ip_mac_pair,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type StaticIPMacParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs and MACs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPMacPair []IPMacPairParameters `json:"ipMacPair" tf:"ip_mac_pair,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

type StaticIPObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type StaticIPParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAddresses []*string `json:"ipAddresses" tf:"ip_addresses,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TransportNodeProfileSubConfigObservation struct {

	// Subset of the host switch configuration
	HostSwitchConfigOption []HostSwitchConfigOptionObservation `json:"hostSwitchConfigOption,omitempty" tf:"host_switch_config_option,omitempty"`

	// Name of the transport node profile config option
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type TransportNodeProfileSubConfigParameters struct {

	// Subset of the host switch configuration
	// +kubebuilder:validation:Required
	HostSwitchConfigOption []HostSwitchConfigOptionParameters `json:"hostSwitchConfigOption" tf:"host_switch_config_option,omitempty"`

	// Name of the transport node profile config option
	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type TransportZoneEndpointObservation struct {

	// Unique ID identifying the transport zone for this endpoint
	TransportZone *string `json:"transportZone,omitempty" tf:"transport_zone,omitempty"`

	// Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node
	TransportZoneProfile []*string `json:"transportZoneProfile,omitempty" tf:"transport_zone_profile,omitempty"`
}

type TransportZoneEndpointParameters struct {

	// Unique ID identifying the transport zone for this endpoint
	// +kubebuilder:validation:Required
	TransportZone *string `json:"transportZone" tf:"transport_zone,omitempty"`

	// Identifiers of the transport zone profiles associated with this transport zone endpoint on this transport node
	// +kubebuilder:validation:Optional
	TransportZoneProfile []*string `json:"transportZoneProfile,omitempty" tf:"transport_zone_profile,omitempty"`
}

type UplinkObservation struct {

	// Uplink name from UplinkHostSwitch profile
	UplinkName *string `json:"uplinkName,omitempty" tf:"uplink_name,omitempty"`

	// Link Aggregation Group (LAG) name of Virtual Distributed Switch
	VdsLagName *string `json:"vdsLagName,omitempty" tf:"vds_lag_name,omitempty"`

	// Uplink name of VMware vSphere Distributed Switch (VDS)
	VdsUplinkName *string `json:"vdsUplinkName,omitempty" tf:"vds_uplink_name,omitempty"`
}

type UplinkParameters struct {

	// Uplink name from UplinkHostSwitch profile
	// +kubebuilder:validation:Required
	UplinkName *string `json:"uplinkName" tf:"uplink_name,omitempty"`

	// Link Aggregation Group (LAG) name of Virtual Distributed Switch
	// +kubebuilder:validation:Optional
	VdsLagName *string `json:"vdsLagName,omitempty" tf:"vds_lag_name,omitempty"`

	// Uplink name of VMware vSphere Distributed Switch (VDS)
	// +kubebuilder:validation:Optional
	VdsUplinkName *string `json:"vdsUplinkName,omitempty" tf:"vds_uplink_name,omitempty"`
}

type VmkInstallMigrationObservation struct {

	// The network id to which the ESX vmk interface will be migrated
	DestinationNetwork *string `json:"destinationNetwork,omitempty" tf:"destination_network,omitempty"`

	// ESX vmk interface name
	DeviceName *string `json:"deviceName,omitempty" tf:"device_name,omitempty"`
}

type VmkInstallMigrationParameters struct {

	// The network id to which the ESX vmk interface will be migrated
	// +kubebuilder:validation:Required
	DestinationNetwork *string `json:"destinationNetwork" tf:"destination_network,omitempty"`

	// ESX vmk interface name
	// +kubebuilder:validation:Required
	DeviceName *string `json:"deviceName" tf:"device_name,omitempty"`
}

// PolicyHostTransportNodeProfileSpec defines the desired state of PolicyHostTransportNodeProfile
type PolicyHostTransportNodeProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyHostTransportNodeProfileParameters `json:"forProvider"`
}

// PolicyHostTransportNodeProfileStatus defines the observed state of PolicyHostTransportNodeProfile.
type PolicyHostTransportNodeProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyHostTransportNodeProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyHostTransportNodeProfile is the Schema for the PolicyHostTransportNodeProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyHostTransportNodeProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   PolicyHostTransportNodeProfileSpec   `json:"spec"`
	Status PolicyHostTransportNodeProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyHostTransportNodeProfileList contains a list of PolicyHostTransportNodeProfiles
type PolicyHostTransportNodeProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyHostTransportNodeProfile `json:"items"`
}

// Repository type metadata.
var (
	PolicyHostTransportNodeProfile_Kind             = "PolicyHostTransportNodeProfile"
	PolicyHostTransportNodeProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyHostTransportNodeProfile_Kind}.String()
	PolicyHostTransportNodeProfile_KindAPIVersion   = PolicyHostTransportNodeProfile_Kind + "." + CRDGroupVersion.String()
	PolicyHostTransportNodeProfile_GroupVersionKind = CRDGroupVersion.WithKind(PolicyHostTransportNodeProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyHostTransportNodeProfile{}, &PolicyHostTransportNodeProfileList{})
}
