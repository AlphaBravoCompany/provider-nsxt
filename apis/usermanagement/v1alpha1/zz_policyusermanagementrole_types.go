/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FeatureObservation struct {

	// Feature Id
	Feature *string `json:"feature,omitempty" tf:"feature,omitempty"`

	// Feature Description
	FeatureDescription *string `json:"featureDescription,omitempty" tf:"feature_description,omitempty"`

	// Feature Name
	FeatureName *string `json:"featureName,omitempty" tf:"feature_name,omitempty"`

	Permission *string `json:"permission,omitempty" tf:"permission,omitempty"`
}

type FeatureParameters struct {

	// Feature Id
	// +kubebuilder:validation:Required
	Feature *string `json:"feature" tf:"feature,omitempty"`

	// +kubebuilder:validation:Required
	Permission *string `json:"permission" tf:"permission,omitempty"`
}

type PolicyUserManagementRoleObservation struct {

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name of this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// List of permissions for features
	Feature []FeatureObservation `json:"feature,omitempty" tf:"feature,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Short identifier for the role. Must be all lower case with no spaces
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyUserManagementRoleTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyUserManagementRoleParameters struct {

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name of this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// List of permissions for features
	// +kubebuilder:validation:Optional
	Feature []FeatureParameters `json:"feature,omitempty" tf:"feature,omitempty"`

	// Short identifier for the role. Must be all lower case with no spaces
	// +kubebuilder:validation:Optional
	Role *string `json:"role,omitempty" tf:"role,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyUserManagementRoleTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyUserManagementRoleTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyUserManagementRoleTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyUserManagementRoleSpec defines the desired state of PolicyUserManagementRole
type PolicyUserManagementRoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyUserManagementRoleParameters `json:"forProvider"`
}

// PolicyUserManagementRoleStatus defines the observed state of PolicyUserManagementRole.
type PolicyUserManagementRoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyUserManagementRoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyUserManagementRole is the Schema for the PolicyUserManagementRoles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyUserManagementRole struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.feature)",message="feature is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.role)",message="role is a required parameter"
	Spec   PolicyUserManagementRoleSpec   `json:"spec"`
	Status PolicyUserManagementRoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyUserManagementRoleList contains a list of PolicyUserManagementRoles
type PolicyUserManagementRoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyUserManagementRole `json:"items"`
}

// Repository type metadata.
var (
	PolicyUserManagementRole_Kind             = "PolicyUserManagementRole"
	PolicyUserManagementRole_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyUserManagementRole_Kind}.String()
	PolicyUserManagementRole_KindAPIVersion   = PolicyUserManagementRole_Kind + "." + CRDGroupVersion.String()
	PolicyUserManagementRole_GroupVersionKind = CRDGroupVersion.WithKind(PolicyUserManagementRole_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyUserManagementRole{}, &PolicyUserManagementRoleList{})
}
