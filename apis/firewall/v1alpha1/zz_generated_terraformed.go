/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this PolicyContextProfile
func (mg *PolicyContextProfile) GetTerraformResourceType() string {
	return "nsxt_policy_context_profile"
}

// GetConnectionDetailsMapping for this PolicyContextProfile
func (tr *PolicyContextProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyContextProfile
func (tr *PolicyContextProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyContextProfile
func (tr *PolicyContextProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyContextProfile
func (tr *PolicyContextProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyContextProfile
func (tr *PolicyContextProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyContextProfile
func (tr *PolicyContextProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyContextProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyContextProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyContextProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyContextProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyContextProfileCustomAttribute
func (mg *PolicyContextProfileCustomAttribute) GetTerraformResourceType() string {
	return "nsxt_policy_context_profile_custom_attribute"
}

// GetConnectionDetailsMapping for this PolicyContextProfileCustomAttribute
func (tr *PolicyContextProfileCustomAttribute) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyContextProfileCustomAttribute
func (tr *PolicyContextProfileCustomAttribute) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyContextProfileCustomAttribute
func (tr *PolicyContextProfileCustomAttribute) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyContextProfileCustomAttribute
func (tr *PolicyContextProfileCustomAttribute) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyContextProfileCustomAttribute
func (tr *PolicyContextProfileCustomAttribute) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyContextProfileCustomAttribute
func (tr *PolicyContextProfileCustomAttribute) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyContextProfileCustomAttribute using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyContextProfileCustomAttribute) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyContextProfileCustomAttributeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyContextProfileCustomAttribute) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyGatewayPolicy
func (mg *PolicyGatewayPolicy) GetTerraformResourceType() string {
	return "nsxt_policy_gateway_policy"
}

// GetConnectionDetailsMapping for this PolicyGatewayPolicy
func (tr *PolicyGatewayPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyGatewayPolicy
func (tr *PolicyGatewayPolicy) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyGatewayPolicy
func (tr *PolicyGatewayPolicy) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyGatewayPolicy
func (tr *PolicyGatewayPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyGatewayPolicy
func (tr *PolicyGatewayPolicy) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyGatewayPolicy
func (tr *PolicyGatewayPolicy) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyGatewayPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyGatewayPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyGatewayPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyGatewayPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyInstrusionServicePolicy
func (mg *PolicyInstrusionServicePolicy) GetTerraformResourceType() string {
	return "nsxt_policy_intrusion_service_policy"
}

// GetConnectionDetailsMapping for this PolicyInstrusionServicePolicy
func (tr *PolicyInstrusionServicePolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyInstrusionServicePolicy
func (tr *PolicyInstrusionServicePolicy) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyInstrusionServicePolicy
func (tr *PolicyInstrusionServicePolicy) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyInstrusionServicePolicy
func (tr *PolicyInstrusionServicePolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyInstrusionServicePolicy
func (tr *PolicyInstrusionServicePolicy) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyInstrusionServicePolicy
func (tr *PolicyInstrusionServicePolicy) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyInstrusionServicePolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyInstrusionServicePolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyInstrusionServicePolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyInstrusionServicePolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyInstrusionServiceProfile
func (mg *PolicyInstrusionServiceProfile) GetTerraformResourceType() string {
	return "nsxt_policy_intrusion_service_profile"
}

// GetConnectionDetailsMapping for this PolicyInstrusionServiceProfile
func (tr *PolicyInstrusionServiceProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyInstrusionServiceProfile
func (tr *PolicyInstrusionServiceProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyInstrusionServiceProfile
func (tr *PolicyInstrusionServiceProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyInstrusionServiceProfile
func (tr *PolicyInstrusionServiceProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyInstrusionServiceProfile
func (tr *PolicyInstrusionServiceProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyInstrusionServiceProfile
func (tr *PolicyInstrusionServiceProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyInstrusionServiceProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyInstrusionServiceProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyInstrusionServiceProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyInstrusionServiceProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyPredefinedGatewayPolicy
func (mg *PolicyPredefinedGatewayPolicy) GetTerraformResourceType() string {
	return "nsxt_policy_predefined_gateway_policy"
}

// GetConnectionDetailsMapping for this PolicyPredefinedGatewayPolicy
func (tr *PolicyPredefinedGatewayPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyPredefinedGatewayPolicy
func (tr *PolicyPredefinedGatewayPolicy) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyPredefinedGatewayPolicy
func (tr *PolicyPredefinedGatewayPolicy) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyPredefinedGatewayPolicy
func (tr *PolicyPredefinedGatewayPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyPredefinedGatewayPolicy
func (tr *PolicyPredefinedGatewayPolicy) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyPredefinedGatewayPolicy
func (tr *PolicyPredefinedGatewayPolicy) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyPredefinedGatewayPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyPredefinedGatewayPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyPredefinedGatewayPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyPredefinedGatewayPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyPredefinedSecurityPolicy
func (mg *PolicyPredefinedSecurityPolicy) GetTerraformResourceType() string {
	return "nsxt_policy_predefined_security_policy"
}

// GetConnectionDetailsMapping for this PolicyPredefinedSecurityPolicy
func (tr *PolicyPredefinedSecurityPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyPredefinedSecurityPolicy
func (tr *PolicyPredefinedSecurityPolicy) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyPredefinedSecurityPolicy
func (tr *PolicyPredefinedSecurityPolicy) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyPredefinedSecurityPolicy
func (tr *PolicyPredefinedSecurityPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyPredefinedSecurityPolicy
func (tr *PolicyPredefinedSecurityPolicy) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyPredefinedSecurityPolicy
func (tr *PolicyPredefinedSecurityPolicy) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyPredefinedSecurityPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyPredefinedSecurityPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyPredefinedSecurityPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyPredefinedSecurityPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicySecurityPolicy
func (mg *PolicySecurityPolicy) GetTerraformResourceType() string {
	return "nsxt_policy_security_policy"
}

// GetConnectionDetailsMapping for this PolicySecurityPolicy
func (tr *PolicySecurityPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicySecurityPolicy
func (tr *PolicySecurityPolicy) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicySecurityPolicy
func (tr *PolicySecurityPolicy) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicySecurityPolicy
func (tr *PolicySecurityPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicySecurityPolicy
func (tr *PolicySecurityPolicy) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicySecurityPolicy
func (tr *PolicySecurityPolicy) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicySecurityPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicySecurityPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicySecurityPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicySecurityPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyService
func (mg *PolicyService) GetTerraformResourceType() string {
	return "nsxt_policy_service"
}

// GetConnectionDetailsMapping for this PolicyService
func (tr *PolicyService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyService
func (tr *PolicyService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyService
func (tr *PolicyService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyService
func (tr *PolicyService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyService
func (tr *PolicyService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyService
func (tr *PolicyService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyService) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyService) GetTerraformSchemaVersion() int {
	return 0
}
