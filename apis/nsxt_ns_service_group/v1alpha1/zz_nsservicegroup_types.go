/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsServiceGroupObservation struct {

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// List of NSService or NSServiceGroup resources that can be added as members to an NSServiceGroup
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type NsServiceGroupParameters struct {

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// List of NSService or NSServiceGroup resources that can be added as members to an NSServiceGroup
	// +kubebuilder:validation:Optional
	Members []*string `json:"members,omitempty" tf:"members,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// NsServiceGroupSpec defines the desired state of NsServiceGroup
type NsServiceGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsServiceGroupParameters `json:"forProvider"`
}

// NsServiceGroupStatus defines the observed state of NsServiceGroup.
type NsServiceGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsServiceGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsServiceGroup is the Schema for the NsServiceGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type NsServiceGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.members)",message="members is a required parameter"
	Spec   NsServiceGroupSpec   `json:"spec"`
	Status NsServiceGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsServiceGroupList contains a list of NsServiceGroups
type NsServiceGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsServiceGroup `json:"items"`
}

// Repository type metadata.
var (
	NsServiceGroup_Kind             = "NsServiceGroup"
	NsServiceGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsServiceGroup_Kind}.String()
	NsServiceGroup_KindAPIVersion   = NsServiceGroup_Kind + "." + CRDGroupVersion.String()
	NsServiceGroup_GroupVersionKind = CRDGroupVersion.WithKind(NsServiceGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&NsServiceGroup{}, &NsServiceGroupList{})
}
