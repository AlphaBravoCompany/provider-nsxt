/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LbTcpVirtualServerObservation struct {

	// Whether access log is enabled
	AccessLogEnabled *bool `json:"accessLogEnabled,omitempty" tf:"access_log_enabled,omitempty"`

	// The tcp application profile defines the application protocol characteristics
	ApplicationProfileID *string `json:"applicationProfileId,omitempty" tf:"application_profile_id,omitempty"`

	// Default pool member ports or port range
	DefaultPoolMemberPorts []*string `json:"defaultPoolMemberPorts,omitempty" tf:"default_pool_member_ports,omitempty"`

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// whether the virtual server is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// virtual server IP address
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// If not specified, connections are unlimited
	MaxConcurrentConnections *float64 `json:"maxConcurrentConnections,omitempty" tf:"max_concurrent_connections,omitempty"`

	// If not specified, connection rate is unlimited
	MaxNewConnectionRate *float64 `json:"maxNewConnectionRate,omitempty" tf:"max_new_connection_rate,omitempty"`

	// Persistence profile is used to allow related client connections to be sent to the same backend server. Source ip persistence is supported.
	PersistenceProfileID *string `json:"persistenceProfileId,omitempty" tf:"persistence_profile_id,omitempty"`

	// Server pool for backend connections
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Single port, multiple ports or port ranges
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// When load balancer can not select a backend server to serve the request in default pool, the request would be served by sorry server pool
	SorryPoolID *string `json:"sorryPoolId,omitempty" tf:"sorry_pool_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []LbTcpVirtualServerTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbTcpVirtualServerParameters struct {

	// Whether access log is enabled
	// +kubebuilder:validation:Optional
	AccessLogEnabled *bool `json:"accessLogEnabled,omitempty" tf:"access_log_enabled,omitempty"`

	// The tcp application profile defines the application protocol characteristics
	// +kubebuilder:validation:Optional
	ApplicationProfileID *string `json:"applicationProfileId,omitempty" tf:"application_profile_id,omitempty"`

	// Default pool member ports or port range
	// +kubebuilder:validation:Optional
	DefaultPoolMemberPorts []*string `json:"defaultPoolMemberPorts,omitempty" tf:"default_pool_member_ports,omitempty"`

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// whether the virtual server is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// virtual server IP address
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// If not specified, connections are unlimited
	// +kubebuilder:validation:Optional
	MaxConcurrentConnections *float64 `json:"maxConcurrentConnections,omitempty" tf:"max_concurrent_connections,omitempty"`

	// If not specified, connection rate is unlimited
	// +kubebuilder:validation:Optional
	MaxNewConnectionRate *float64 `json:"maxNewConnectionRate,omitempty" tf:"max_new_connection_rate,omitempty"`

	// Persistence profile is used to allow related client connections to be sent to the same backend server. Source ip persistence is supported.
	// +kubebuilder:validation:Optional
	PersistenceProfileID *string `json:"persistenceProfileId,omitempty" tf:"persistence_profile_id,omitempty"`

	// Server pool for backend connections
	// +kubebuilder:validation:Optional
	PoolID *string `json:"poolId,omitempty" tf:"pool_id,omitempty"`

	// Single port, multiple ports or port ranges
	// +kubebuilder:validation:Optional
	Ports []*string `json:"ports,omitempty" tf:"ports,omitempty"`

	// When load balancer can not select a backend server to serve the request in default pool, the request would be served by sorry server pool
	// +kubebuilder:validation:Optional
	SorryPoolID *string `json:"sorryPoolId,omitempty" tf:"sorry_pool_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []LbTcpVirtualServerTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbTcpVirtualServerTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbTcpVirtualServerTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LbTcpVirtualServerSpec defines the desired state of LbTcpVirtualServer
type LbTcpVirtualServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbTcpVirtualServerParameters `json:"forProvider"`
}

// LbTcpVirtualServerStatus defines the observed state of LbTcpVirtualServer.
type LbTcpVirtualServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbTcpVirtualServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbTcpVirtualServer is the Schema for the LbTcpVirtualServers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LbTcpVirtualServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.applicationProfileId)",message="applicationProfileId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ipAddress)",message="ipAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ports)",message="ports is a required parameter"
	Spec   LbTcpVirtualServerSpec   `json:"spec"`
	Status LbTcpVirtualServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbTcpVirtualServerList contains a list of LbTcpVirtualServers
type LbTcpVirtualServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbTcpVirtualServer `json:"items"`
}

// Repository type metadata.
var (
	LbTcpVirtualServer_Kind             = "LbTcpVirtualServer"
	LbTcpVirtualServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbTcpVirtualServer_Kind}.String()
	LbTcpVirtualServer_KindAPIVersion   = LbTcpVirtualServer_Kind + "." + CRDGroupVersion.String()
	LbTcpVirtualServer_GroupVersionKind = CRDGroupVersion.WithKind(LbTcpVirtualServer_Kind)
)

func init() {
	SchemeBuilder.Register(&LbTcpVirtualServer{}, &LbTcpVirtualServerList{})
}
