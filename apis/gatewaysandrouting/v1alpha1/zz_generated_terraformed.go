/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this PolicyBgpConfig
func (mg *PolicyBgpConfig) GetTerraformResourceType() string {
	return "nsxt_policy_bgp_config"
}

// GetConnectionDetailsMapping for this PolicyBgpConfig
func (tr *PolicyBgpConfig) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyBgpConfig
func (tr *PolicyBgpConfig) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyBgpConfig
func (tr *PolicyBgpConfig) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyBgpConfig
func (tr *PolicyBgpConfig) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyBgpConfig
func (tr *PolicyBgpConfig) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyBgpConfig
func (tr *PolicyBgpConfig) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyBgpConfig using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyBgpConfig) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyBgpConfigParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyBgpConfig) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyBgpMeighbor
func (mg *PolicyBgpMeighbor) GetTerraformResourceType() string {
	return "nsxt_policy_bgp_neighbor"
}

// GetConnectionDetailsMapping for this PolicyBgpMeighbor
func (tr *PolicyBgpMeighbor) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this PolicyBgpMeighbor
func (tr *PolicyBgpMeighbor) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyBgpMeighbor
func (tr *PolicyBgpMeighbor) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyBgpMeighbor
func (tr *PolicyBgpMeighbor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyBgpMeighbor
func (tr *PolicyBgpMeighbor) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyBgpMeighbor
func (tr *PolicyBgpMeighbor) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyBgpMeighbor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyBgpMeighbor) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyBgpMeighborParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyBgpMeighbor) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyGatewayCommunityList
func (mg *PolicyGatewayCommunityList) GetTerraformResourceType() string {
	return "nsxt_policy_gateway_community_list"
}

// GetConnectionDetailsMapping for this PolicyGatewayCommunityList
func (tr *PolicyGatewayCommunityList) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyGatewayCommunityList
func (tr *PolicyGatewayCommunityList) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyGatewayCommunityList
func (tr *PolicyGatewayCommunityList) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyGatewayCommunityList
func (tr *PolicyGatewayCommunityList) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyGatewayCommunityList
func (tr *PolicyGatewayCommunityList) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyGatewayCommunityList
func (tr *PolicyGatewayCommunityList) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyGatewayCommunityList using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyGatewayCommunityList) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyGatewayCommunityListParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyGatewayCommunityList) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyGatewayPrefixList
func (mg *PolicyGatewayPrefixList) GetTerraformResourceType() string {
	return "nsxt_policy_gateway_prefix_list"
}

// GetConnectionDetailsMapping for this PolicyGatewayPrefixList
func (tr *PolicyGatewayPrefixList) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyGatewayPrefixList
func (tr *PolicyGatewayPrefixList) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyGatewayPrefixList
func (tr *PolicyGatewayPrefixList) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyGatewayPrefixList
func (tr *PolicyGatewayPrefixList) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyGatewayPrefixList
func (tr *PolicyGatewayPrefixList) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyGatewayPrefixList
func (tr *PolicyGatewayPrefixList) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyGatewayPrefixList using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyGatewayPrefixList) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyGatewayPrefixListParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyGatewayPrefixList) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyGatewayQosProfile
func (mg *PolicyGatewayQosProfile) GetTerraformResourceType() string {
	return "nsxt_policy_gateway_qos_profile"
}

// GetConnectionDetailsMapping for this PolicyGatewayQosProfile
func (tr *PolicyGatewayQosProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyGatewayQosProfile
func (tr *PolicyGatewayQosProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyGatewayQosProfile
func (tr *PolicyGatewayQosProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyGatewayQosProfile
func (tr *PolicyGatewayQosProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyGatewayQosProfile
func (tr *PolicyGatewayQosProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyGatewayQosProfile
func (tr *PolicyGatewayQosProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyGatewayQosProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyGatewayQosProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyGatewayQosProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyGatewayQosProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyGatewayRedistributionConfig
func (mg *PolicyGatewayRedistributionConfig) GetTerraformResourceType() string {
	return "nsxt_policy_gateway_redistribution_config"
}

// GetConnectionDetailsMapping for this PolicyGatewayRedistributionConfig
func (tr *PolicyGatewayRedistributionConfig) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyGatewayRedistributionConfig
func (tr *PolicyGatewayRedistributionConfig) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyGatewayRedistributionConfig
func (tr *PolicyGatewayRedistributionConfig) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyGatewayRedistributionConfig
func (tr *PolicyGatewayRedistributionConfig) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyGatewayRedistributionConfig
func (tr *PolicyGatewayRedistributionConfig) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyGatewayRedistributionConfig
func (tr *PolicyGatewayRedistributionConfig) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyGatewayRedistributionConfig using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyGatewayRedistributionConfig) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyGatewayRedistributionConfigParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyGatewayRedistributionConfig) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyGatewayRouteMap
func (mg *PolicyGatewayRouteMap) GetTerraformResourceType() string {
	return "nsxt_policy_gateway_route_map"
}

// GetConnectionDetailsMapping for this PolicyGatewayRouteMap
func (tr *PolicyGatewayRouteMap) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyGatewayRouteMap
func (tr *PolicyGatewayRouteMap) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyGatewayRouteMap
func (tr *PolicyGatewayRouteMap) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyGatewayRouteMap
func (tr *PolicyGatewayRouteMap) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyGatewayRouteMap
func (tr *PolicyGatewayRouteMap) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyGatewayRouteMap
func (tr *PolicyGatewayRouteMap) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyGatewayRouteMap using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyGatewayRouteMap) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyGatewayRouteMapParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyGatewayRouteMap) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyNatRule
func (mg *PolicyNatRule) GetTerraformResourceType() string {
	return "nsxt_policy_nat_rule"
}

// GetConnectionDetailsMapping for this PolicyNatRule
func (tr *PolicyNatRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyNatRule
func (tr *PolicyNatRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyNatRule
func (tr *PolicyNatRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyNatRule
func (tr *PolicyNatRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyNatRule
func (tr *PolicyNatRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyNatRule
func (tr *PolicyNatRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyNatRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyNatRule) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyNatRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyNatRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyOspfConfig
func (mg *PolicyOspfConfig) GetTerraformResourceType() string {
	return "nsxt_policy_ospf_config"
}

// GetConnectionDetailsMapping for this PolicyOspfConfig
func (tr *PolicyOspfConfig) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyOspfConfig
func (tr *PolicyOspfConfig) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyOspfConfig
func (tr *PolicyOspfConfig) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyOspfConfig
func (tr *PolicyOspfConfig) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyOspfConfig
func (tr *PolicyOspfConfig) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyOspfConfig
func (tr *PolicyOspfConfig) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyOspfConfig using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyOspfConfig) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyOspfConfigParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyOspfConfig) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyStaticRoute
func (mg *PolicyStaticRoute) GetTerraformResourceType() string {
	return "nsxt_policy_static_route"
}

// GetConnectionDetailsMapping for this PolicyStaticRoute
func (tr *PolicyStaticRoute) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyStaticRoute
func (tr *PolicyStaticRoute) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyStaticRoute
func (tr *PolicyStaticRoute) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyStaticRoute
func (tr *PolicyStaticRoute) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyStaticRoute
func (tr *PolicyStaticRoute) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyStaticRoute
func (tr *PolicyStaticRoute) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyStaticRoute using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyStaticRoute) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyStaticRouteParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyStaticRoute) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyStaticRouteBfdPeer
func (mg *PolicyStaticRouteBfdPeer) GetTerraformResourceType() string {
	return "nsxt_policy_static_route_bfd_peer"
}

// GetConnectionDetailsMapping for this PolicyStaticRouteBfdPeer
func (tr *PolicyStaticRouteBfdPeer) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyStaticRouteBfdPeer
func (tr *PolicyStaticRouteBfdPeer) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyStaticRouteBfdPeer
func (tr *PolicyStaticRouteBfdPeer) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyStaticRouteBfdPeer
func (tr *PolicyStaticRouteBfdPeer) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyStaticRouteBfdPeer
func (tr *PolicyStaticRouteBfdPeer) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyStaticRouteBfdPeer
func (tr *PolicyStaticRouteBfdPeer) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyStaticRouteBfdPeer using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyStaticRouteBfdPeer) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyStaticRouteBfdPeerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyStaticRouteBfdPeer) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyTier0Gateway
func (mg *PolicyTier0Gateway) GetTerraformResourceType() string {
	return "nsxt_policy_tier0_gateway"
}

// GetConnectionDetailsMapping for this PolicyTier0Gateway
func (tr *PolicyTier0Gateway) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyTier0Gateway
func (tr *PolicyTier0Gateway) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyTier0Gateway
func (tr *PolicyTier0Gateway) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyTier0Gateway
func (tr *PolicyTier0Gateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyTier0Gateway
func (tr *PolicyTier0Gateway) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyTier0Gateway
func (tr *PolicyTier0Gateway) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyTier0Gateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyTier0Gateway) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyTier0GatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyTier0Gateway) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyTier0GatewayHaVipConfig
func (mg *PolicyTier0GatewayHaVipConfig) GetTerraformResourceType() string {
	return "nsxt_policy_tier0_gateway_ha_vip_config"
}

// GetConnectionDetailsMapping for this PolicyTier0GatewayHaVipConfig
func (tr *PolicyTier0GatewayHaVipConfig) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyTier0GatewayHaVipConfig
func (tr *PolicyTier0GatewayHaVipConfig) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyTier0GatewayHaVipConfig
func (tr *PolicyTier0GatewayHaVipConfig) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyTier0GatewayHaVipConfig
func (tr *PolicyTier0GatewayHaVipConfig) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyTier0GatewayHaVipConfig
func (tr *PolicyTier0GatewayHaVipConfig) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyTier0GatewayHaVipConfig
func (tr *PolicyTier0GatewayHaVipConfig) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyTier0GatewayHaVipConfig using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyTier0GatewayHaVipConfig) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyTier0GatewayHaVipConfigParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyTier0GatewayHaVipConfig) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyTier0GatewayInterface
func (mg *PolicyTier0GatewayInterface) GetTerraformResourceType() string {
	return "nsxt_policy_tier0_gateway_interface"
}

// GetConnectionDetailsMapping for this PolicyTier0GatewayInterface
func (tr *PolicyTier0GatewayInterface) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyTier0GatewayInterface
func (tr *PolicyTier0GatewayInterface) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyTier0GatewayInterface
func (tr *PolicyTier0GatewayInterface) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyTier0GatewayInterface
func (tr *PolicyTier0GatewayInterface) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyTier0GatewayInterface
func (tr *PolicyTier0GatewayInterface) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyTier0GatewayInterface
func (tr *PolicyTier0GatewayInterface) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyTier0GatewayInterface using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyTier0GatewayInterface) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyTier0GatewayInterfaceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyTier0GatewayInterface) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyTier1Gateway
func (mg *PolicyTier1Gateway) GetTerraformResourceType() string {
	return "nsxt_policy_tier1_gateway"
}

// GetConnectionDetailsMapping for this PolicyTier1Gateway
func (tr *PolicyTier1Gateway) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyTier1Gateway
func (tr *PolicyTier1Gateway) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyTier1Gateway
func (tr *PolicyTier1Gateway) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyTier1Gateway
func (tr *PolicyTier1Gateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyTier1Gateway
func (tr *PolicyTier1Gateway) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyTier1Gateway
func (tr *PolicyTier1Gateway) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyTier1Gateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyTier1Gateway) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyTier1GatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyTier1Gateway) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyTier1GatewayInterface
func (mg *PolicyTier1GatewayInterface) GetTerraformResourceType() string {
	return "nsxt_policy_tier1_gateway_interface"
}

// GetConnectionDetailsMapping for this PolicyTier1GatewayInterface
func (tr *PolicyTier1GatewayInterface) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyTier1GatewayInterface
func (tr *PolicyTier1GatewayInterface) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyTier1GatewayInterface
func (tr *PolicyTier1GatewayInterface) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyTier1GatewayInterface
func (tr *PolicyTier1GatewayInterface) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyTier1GatewayInterface
func (tr *PolicyTier1GatewayInterface) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyTier1GatewayInterface
func (tr *PolicyTier1GatewayInterface) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyTier1GatewayInterface using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyTier1GatewayInterface) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyTier1GatewayInterfaceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyTier1GatewayInterface) GetTerraformSchemaVersion() int {
	return 0
}
