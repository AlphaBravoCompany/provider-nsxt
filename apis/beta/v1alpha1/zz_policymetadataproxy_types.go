/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyMetadataProxyObservation struct {

	// Metadata proxy supported cryptographic protocols
	CryptoProtocols []*string `json:"cryptoProtocols,omitempty" tf:"crypto_protocols,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Policy path to Edge Cluster
	EdgeClusterPath *string `json:"edgeClusterPath,omitempty" tf:"edge_cluster_path,omitempty"`

	// Flag to enable standby relocation
	EnableStandbyRelocation *bool `json:"enableStandbyRelocation,omitempty" tf:"enable_standby_relocation,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Preferred Edge Paths
	PreferredEdgePaths []*string `json:"preferredEdgePaths,omitempty" tf:"preferred_edge_paths,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Server Address
	ServerAddress *string `json:"serverAddress,omitempty" tf:"server_address,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyMetadataProxyTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyMetadataProxyParameters struct {

	// Metadata proxy supported cryptographic protocols
	// +kubebuilder:validation:Optional
	CryptoProtocols []*string `json:"cryptoProtocols,omitempty" tf:"crypto_protocols,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Policy path to Edge Cluster
	// +kubebuilder:validation:Optional
	EdgeClusterPath *string `json:"edgeClusterPath,omitempty" tf:"edge_cluster_path,omitempty"`

	// Flag to enable standby relocation
	// +kubebuilder:validation:Optional
	EnableStandbyRelocation *bool `json:"enableStandbyRelocation,omitempty" tf:"enable_standby_relocation,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Preferred Edge Paths
	// +kubebuilder:validation:Optional
	PreferredEdgePaths []*string `json:"preferredEdgePaths,omitempty" tf:"preferred_edge_paths,omitempty"`

	// Secret
	// +kubebuilder:validation:Optional
	SecretSecretRef v1.SecretKeySelector `json:"secretSecretRef" tf:"-"`

	// Server Address
	// +kubebuilder:validation:Optional
	ServerAddress *string `json:"serverAddress,omitempty" tf:"server_address,omitempty"`

	// Policy paths to Certificate Authority (CA) certificates
	// +kubebuilder:validation:Optional
	ServerCertificatesSecretRef *[]v1.SecretKeySelector `json:"serverCertificatesSecretRef,omitempty" tf:"-"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyMetadataProxyTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyMetadataProxyTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyMetadataProxyTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyMetadataProxySpec defines the desired state of PolicyMetadataProxy
type PolicyMetadataProxySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyMetadataProxyParameters `json:"forProvider"`
}

// PolicyMetadataProxyStatus defines the observed state of PolicyMetadataProxy.
type PolicyMetadataProxyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyMetadataProxyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyMetadataProxy is the Schema for the PolicyMetadataProxys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyMetadataProxy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeClusterPath)",message="edgeClusterPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.secretSecretRef)",message="secretSecretRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.serverAddress)",message="serverAddress is a required parameter"
	Spec   PolicyMetadataProxySpec   `json:"spec"`
	Status PolicyMetadataProxyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyMetadataProxyList contains a list of PolicyMetadataProxys
type PolicyMetadataProxyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyMetadataProxy `json:"items"`
}

// Repository type metadata.
var (
	PolicyMetadataProxy_Kind             = "PolicyMetadataProxy"
	PolicyMetadataProxy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyMetadataProxy_Kind}.String()
	PolicyMetadataProxy_KindAPIVersion   = PolicyMetadataProxy_Kind + "." + CRDGroupVersion.String()
	PolicyMetadataProxy_GroupVersionKind = CRDGroupVersion.WithKind(PolicyMetadataProxy_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyMetadataProxy{}, &PolicyMetadataProxyList{})
}
