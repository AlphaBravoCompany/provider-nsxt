/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CriteriaObservation struct {

	// List of attack target criteria
	AttackTargets []*string `json:"attackTargets,omitempty" tf:"attack_targets,omitempty"`

	// List of attack type criteria
	AttackTypes []*string `json:"attackTypes,omitempty" tf:"attack_types,omitempty"`

	// Common Vulnerability Scoring System Ranges
	Cvss []*string `json:"cvss,omitempty" tf:"cvss,omitempty"`

	// List of products affected
	ProductsAffected []*string `json:"productsAffected,omitempty" tf:"products_affected,omitempty"`
}

type CriteriaParameters struct {

	// List of attack target criteria
	// +kubebuilder:validation:Optional
	AttackTargets []*string `json:"attackTargets,omitempty" tf:"attack_targets,omitempty"`

	// List of attack type criteria
	// +kubebuilder:validation:Optional
	AttackTypes []*string `json:"attackTypes,omitempty" tf:"attack_types,omitempty"`

	// Common Vulnerability Scoring System Ranges
	// +kubebuilder:validation:Optional
	Cvss []*string `json:"cvss,omitempty" tf:"cvss,omitempty"`

	// List of products affected
	// +kubebuilder:validation:Optional
	ProductsAffected []*string `json:"productsAffected,omitempty" tf:"products_affected,omitempty"`
}

type OverriddenSignatureObservation struct {

	// This will take precedence over IDS signature action
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	SignatureID *string `json:"signatureId,omitempty" tf:"signature_id,omitempty"`
}

type OverriddenSignatureParameters struct {

	// This will take precedence over IDS signature action
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	SignatureID *string `json:"signatureId" tf:"signature_id,omitempty"`
}

type PolicyIntrusionServiceProfileContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type PolicyIntrusionServiceProfileContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type PolicyIntrusionServiceProfileObservation struct {

	// Resource context
	Context []PolicyIntrusionServiceProfileContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// Filtering criteria for the IDS Profile
	Criteria []CriteriaObservation `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Signatures that has been overridden for this Profile
	OverriddenSignature []OverriddenSignatureObservation `json:"overriddenSignature,omitempty" tf:"overridden_signature,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Severities of signatures which are part of this profile
	Severities []*string `json:"severities,omitempty" tf:"severities,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyIntrusionServiceProfileTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyIntrusionServiceProfileParameters struct {

	// Resource context
	// +kubebuilder:validation:Optional
	Context []PolicyIntrusionServiceProfileContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// Filtering criteria for the IDS Profile
	// +kubebuilder:validation:Optional
	Criteria []CriteriaParameters `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Signatures that has been overridden for this Profile
	// +kubebuilder:validation:Optional
	OverriddenSignature []OverriddenSignatureParameters `json:"overriddenSignature,omitempty" tf:"overridden_signature,omitempty"`

	// Severities of signatures which are part of this profile
	// +kubebuilder:validation:Optional
	Severities []*string `json:"severities,omitempty" tf:"severities,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyIntrusionServiceProfileTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyIntrusionServiceProfileTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyIntrusionServiceProfileTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyIntrusionServiceProfileSpec defines the desired state of PolicyIntrusionServiceProfile
type PolicyIntrusionServiceProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyIntrusionServiceProfileParameters `json:"forProvider"`
}

// PolicyIntrusionServiceProfileStatus defines the observed state of PolicyIntrusionServiceProfile.
type PolicyIntrusionServiceProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyIntrusionServiceProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyIntrusionServiceProfile is the Schema for the PolicyIntrusionServiceProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyIntrusionServiceProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.severities)",message="severities is a required parameter"
	Spec   PolicyIntrusionServiceProfileSpec   `json:"spec"`
	Status PolicyIntrusionServiceProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyIntrusionServiceProfileList contains a list of PolicyIntrusionServiceProfiles
type PolicyIntrusionServiceProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyIntrusionServiceProfile `json:"items"`
}

// Repository type metadata.
var (
	PolicyIntrusionServiceProfile_Kind             = "PolicyIntrusionServiceProfile"
	PolicyIntrusionServiceProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyIntrusionServiceProfile_Kind}.String()
	PolicyIntrusionServiceProfile_KindAPIVersion   = PolicyIntrusionServiceProfile_Kind + "." + CRDGroupVersion.String()
	PolicyIntrusionServiceProfile_GroupVersionKind = CRDGroupVersion.WithKind(PolicyIntrusionServiceProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyIntrusionServiceProfile{}, &PolicyIntrusionServiceProfileList{})
}
