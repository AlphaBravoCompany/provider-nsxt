/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyL2VpnSessionObservation struct {

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The traffic direction apply to the MSS clamping
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Enable/Disable IPSec VPN session.
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP Address of the local tunnel port. This property only applies in CLIENT mode
	LocalAddress *string `json:"localAddress,omitempty" tf:"local_address,omitempty"`

	// Maximum amount of data the host will accept in a Tcp segment.
	MaxSegmentSize *float64 `json:"maxSegmentSize,omitempty" tf:"max_segment_size,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// IP Address of the peer tunnel port. This property only applies in CLIENT mode
	PeerAddress *string `json:"peerAddress,omitempty" tf:"peer_address,omitempty"`

	// Encapsulation protocol used by the tunnel.
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Policy path for L2 VPN service
	ServicePath *string `json:"servicePath,omitempty" tf:"service_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyL2VpnSessionTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// List of transport tunnels(vpn sessions path) for redundancy
	TransportTunnels []*string `json:"transportTunnels,omitempty" tf:"transport_tunnels,omitempty"`
}

type PolicyL2VpnSessionParameters struct {

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The traffic direction apply to the MSS clamping
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Enable/Disable IPSec VPN session.
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// IP Address of the local tunnel port. This property only applies in CLIENT mode
	// +kubebuilder:validation:Optional
	LocalAddress *string `json:"localAddress,omitempty" tf:"local_address,omitempty"`

	// Maximum amount of data the host will accept in a Tcp segment.
	// +kubebuilder:validation:Optional
	MaxSegmentSize *float64 `json:"maxSegmentSize,omitempty" tf:"max_segment_size,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// IP Address of the peer tunnel port. This property only applies in CLIENT mode
	// +kubebuilder:validation:Optional
	PeerAddress *string `json:"peerAddress,omitempty" tf:"peer_address,omitempty"`

	// Encapsulation protocol used by the tunnel.
	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// Policy path for L2 VPN service
	// +kubebuilder:validation:Optional
	ServicePath *string `json:"servicePath,omitempty" tf:"service_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyL2VpnSessionTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// List of transport tunnels(vpn sessions path) for redundancy
	// +kubebuilder:validation:Optional
	TransportTunnels []*string `json:"transportTunnels,omitempty" tf:"transport_tunnels,omitempty"`
}

type PolicyL2VpnSessionTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyL2VpnSessionTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyL2VpnSessionSpec defines the desired state of PolicyL2VpnSession
type PolicyL2VpnSessionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyL2VpnSessionParameters `json:"forProvider"`
}

// PolicyL2VpnSessionStatus defines the observed state of PolicyL2VpnSession.
type PolicyL2VpnSessionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyL2VpnSessionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyL2VpnSession is the Schema for the PolicyL2VpnSessions API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyL2VpnSession struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.servicePath)",message="servicePath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.transportTunnels)",message="transportTunnels is a required parameter"
	Spec   PolicyL2VpnSessionSpec   `json:"spec"`
	Status PolicyL2VpnSessionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyL2VpnSessionList contains a list of PolicyL2VpnSessions
type PolicyL2VpnSessionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyL2VpnSession `json:"items"`
}

// Repository type metadata.
var (
	PolicyL2VpnSession_Kind             = "PolicyL2VpnSession"
	PolicyL2VpnSession_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyL2VpnSession_Kind}.String()
	PolicyL2VpnSession_KindAPIVersion   = PolicyL2VpnSession_Kind + "." + CRDGroupVersion.String()
	PolicyL2VpnSession_GroupVersionKind = CRDGroupVersion.WithKind(PolicyL2VpnSession_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyL2VpnSession{}, &PolicyL2VpnSessionList{})
}
