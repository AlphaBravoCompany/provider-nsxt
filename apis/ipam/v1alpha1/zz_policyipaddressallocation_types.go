/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type PolicyIpAddressAllocationObservation struct {

	// The IP allocated. If unspecified any free IP will be allocated.
	AllocationIP *string `json:"allocationIp,omitempty" tf:"allocation_ip,omitempty"`

	// Resource context
	Context []ContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The path of the IP Pool for this allocation
	PoolPath *string `json:"poolPath,omitempty" tf:"pool_path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Realization timeout in seconds
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type PolicyIpAddressAllocationParameters struct {

	// The IP allocated. If unspecified any free IP will be allocated.
	// +kubebuilder:validation:Optional
	AllocationIP *string `json:"allocationIp,omitempty" tf:"allocation_ip,omitempty"`

	// Resource context
	// +kubebuilder:validation:Optional
	Context []ContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// The path of the IP Pool for this allocation
	// +kubebuilder:validation:Optional
	PoolPath *string `json:"poolPath,omitempty" tf:"pool_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Realization timeout in seconds
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyIpAddressAllocationSpec defines the desired state of PolicyIpAddressAllocation
type PolicyIpAddressAllocationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyIpAddressAllocationParameters `json:"forProvider"`
}

// PolicyIpAddressAllocationStatus defines the observed state of PolicyIpAddressAllocation.
type PolicyIpAddressAllocationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyIpAddressAllocationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyIpAddressAllocation is the Schema for the PolicyIpAddressAllocations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyIpAddressAllocation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.poolPath)",message="poolPath is a required parameter"
	Spec   PolicyIpAddressAllocationSpec   `json:"spec"`
	Status PolicyIpAddressAllocationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyIpAddressAllocationList contains a list of PolicyIpAddressAllocations
type PolicyIpAddressAllocationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyIpAddressAllocation `json:"items"`
}

// Repository type metadata.
var (
	PolicyIpAddressAllocation_Kind             = "PolicyIpAddressAllocation"
	PolicyIpAddressAllocation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyIpAddressAllocation_Kind}.String()
	PolicyIpAddressAllocation_KindAPIVersion   = PolicyIpAddressAllocation_Kind + "." + CRDGroupVersion.String()
	PolicyIpAddressAllocation_GroupVersionKind = CRDGroupVersion.WithKind(PolicyIpAddressAllocation_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyIpAddressAllocation{}, &PolicyIpAddressAllocationList{})
}
