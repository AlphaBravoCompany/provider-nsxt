/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type PolicyDistributedFloodProtectionProfileObservation struct {

	// Resource context
	Context []ContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Flag to indicate rst spoofing is enabled
	EnableRstSpoofing *bool `json:"enableRstSpoofing,omitempty" tf:"enable_rst_spoofing,omitempty"`

	// Flag to indicate syncache is enabled
	EnableSyncache *bool `json:"enableSyncache,omitempty" tf:"enable_syncache,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Active ICMP connections limit
	IcmpActiveFlowLimit *float64 `json:"icmpActiveFlowLimit,omitempty" tf:"icmp_active_flow_limit,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Timeout after first TN
	OtherActiveConnLimit *float64 `json:"otherActiveConnLimit,omitempty" tf:"other_active_conn_limit,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Active half open TCP connections limit
	TCPHalfOpenConnLimit *float64 `json:"tcpHalfOpenConnLimit,omitempty" tf:"tcp_half_open_conn_limit,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyDistributedFloodProtectionProfileTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Active UDP connections limit
	UDPActiveFlowLimit *float64 `json:"udpActiveFlowLimit,omitempty" tf:"udp_active_flow_limit,omitempty"`
}

type PolicyDistributedFloodProtectionProfileParameters struct {

	// Resource context
	// +kubebuilder:validation:Optional
	Context []ContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Flag to indicate rst spoofing is enabled
	// +kubebuilder:validation:Optional
	EnableRstSpoofing *bool `json:"enableRstSpoofing,omitempty" tf:"enable_rst_spoofing,omitempty"`

	// Flag to indicate syncache is enabled
	// +kubebuilder:validation:Optional
	EnableSyncache *bool `json:"enableSyncache,omitempty" tf:"enable_syncache,omitempty"`

	// Active ICMP connections limit
	// +kubebuilder:validation:Optional
	IcmpActiveFlowLimit *float64 `json:"icmpActiveFlowLimit,omitempty" tf:"icmp_active_flow_limit,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Timeout after first TN
	// +kubebuilder:validation:Optional
	OtherActiveConnLimit *float64 `json:"otherActiveConnLimit,omitempty" tf:"other_active_conn_limit,omitempty"`

	// Active half open TCP connections limit
	// +kubebuilder:validation:Optional
	TCPHalfOpenConnLimit *float64 `json:"tcpHalfOpenConnLimit,omitempty" tf:"tcp_half_open_conn_limit,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyDistributedFloodProtectionProfileTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Active UDP connections limit
	// +kubebuilder:validation:Optional
	UDPActiveFlowLimit *float64 `json:"udpActiveFlowLimit,omitempty" tf:"udp_active_flow_limit,omitempty"`
}

type PolicyDistributedFloodProtectionProfileTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyDistributedFloodProtectionProfileTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyDistributedFloodProtectionProfileSpec defines the desired state of PolicyDistributedFloodProtectionProfile
type PolicyDistributedFloodProtectionProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyDistributedFloodProtectionProfileParameters `json:"forProvider"`
}

// PolicyDistributedFloodProtectionProfileStatus defines the observed state of PolicyDistributedFloodProtectionProfile.
type PolicyDistributedFloodProtectionProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyDistributedFloodProtectionProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyDistributedFloodProtectionProfile is the Schema for the PolicyDistributedFloodProtectionProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyDistributedFloodProtectionProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   PolicyDistributedFloodProtectionProfileSpec   `json:"spec"`
	Status PolicyDistributedFloodProtectionProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyDistributedFloodProtectionProfileList contains a list of PolicyDistributedFloodProtectionProfiles
type PolicyDistributedFloodProtectionProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyDistributedFloodProtectionProfile `json:"items"`
}

// Repository type metadata.
var (
	PolicyDistributedFloodProtectionProfile_Kind             = "PolicyDistributedFloodProtectionProfile"
	PolicyDistributedFloodProtectionProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyDistributedFloodProtectionProfile_Kind}.String()
	PolicyDistributedFloodProtectionProfile_KindAPIVersion   = PolicyDistributedFloodProtectionProfile_Kind + "." + CRDGroupVersion.String()
	PolicyDistributedFloodProtectionProfile_GroupVersionKind = CRDGroupVersion.WithKind(PolicyDistributedFloodProtectionProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyDistributedFloodProtectionProfile{}, &PolicyDistributedFloodProtectionProfileList{})
}
