/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EdgeTransportNodeRtepObservation struct {

	// Edge ID to associate with remote tunnel endpoint.
	EdgeID *string `json:"edgeId,omitempty" tf:"edge_id,omitempty"`

	// The host switch name to be used for the remote tunnel endpoint
	HostSwitchName *string `json:"hostSwitchName,omitempty" tf:"host_switch_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	IPAssignment []IPAssignmentObservation `json:"ipAssignment,omitempty" tf:"ip_assignment,omitempty"`

	// The named teaming policy to be used by the remote tunnel endpoint
	NamedTeamingPolicy *string `json:"namedTeamingPolicy,omitempty" tf:"named_teaming_policy,omitempty"`

	// VLAN id for remote tunnel endpoint
	RtepVlan *float64 `json:"rtepVlan,omitempty" tf:"rtep_vlan,omitempty"`
}

type EdgeTransportNodeRtepParameters struct {

	// Edge ID to associate with remote tunnel endpoint.
	// +kubebuilder:validation:Optional
	EdgeID *string `json:"edgeId,omitempty" tf:"edge_id,omitempty"`

	// The host switch name to be used for the remote tunnel endpoint
	// +kubebuilder:validation:Optional
	HostSwitchName *string `json:"hostSwitchName,omitempty" tf:"host_switch_name,omitempty"`

	// Specification for IPs to be used with host switch virtual tunnel endpoints
	// +kubebuilder:validation:Optional
	IPAssignment []IPAssignmentParameters `json:"ipAssignment,omitempty" tf:"ip_assignment,omitempty"`

	// The named teaming policy to be used by the remote tunnel endpoint
	// +kubebuilder:validation:Optional
	NamedTeamingPolicy *string `json:"namedTeamingPolicy,omitempty" tf:"named_teaming_policy,omitempty"`

	// VLAN id for remote tunnel endpoint
	// +kubebuilder:validation:Optional
	RtepVlan *float64 `json:"rtepVlan,omitempty" tf:"rtep_vlan,omitempty"`
}

type IPAssignmentObservation struct {

	// Enables DHCP assignment
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	StaticIP []StaticIPObservation `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP assignment specification for Static IP Pool
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type IPAssignmentParameters struct {

	// Enables DHCP assignment
	// +kubebuilder:validation:Optional
	AssignedByDHCP *bool `json:"assignedByDhcp,omitempty" tf:"assigned_by_dhcp,omitempty"`

	// IP assignment specification for Static IP List.
	// +kubebuilder:validation:Optional
	StaticIP []StaticIPParameters `json:"staticIp,omitempty" tf:"static_ip,omitempty"`

	// IP assignment specification for Static IP Pool
	// +kubebuilder:validation:Optional
	StaticIPPool *string `json:"staticIpPool,omitempty" tf:"static_ip_pool,omitempty"`
}

type StaticIPObservation struct {

	// Gateway IP
	DefaultGateway *string `json:"defaultGateway,omitempty" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// Subnet mask
	SubnetMask *string `json:"subnetMask,omitempty" tf:"subnet_mask,omitempty"`
}

type StaticIPParameters struct {

	// Gateway IP
	// +kubebuilder:validation:Required
	DefaultGateway *string `json:"defaultGateway" tf:"default_gateway,omitempty"`

	// List of IPs for transport node host switch virtual tunnel endpoints
	// +kubebuilder:validation:Required
	IPAddresses []*string `json:"ipAddresses" tf:"ip_addresses,omitempty"`

	// Subnet mask
	// +kubebuilder:validation:Required
	SubnetMask *string `json:"subnetMask" tf:"subnet_mask,omitempty"`
}

// EdgeTransportNodeRtepSpec defines the desired state of EdgeTransportNodeRtep
type EdgeTransportNodeRtepSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EdgeTransportNodeRtepParameters `json:"forProvider"`
}

// EdgeTransportNodeRtepStatus defines the observed state of EdgeTransportNodeRtep.
type EdgeTransportNodeRtepStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EdgeTransportNodeRtepObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeTransportNodeRtep is the Schema for the EdgeTransportNodeRteps API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type EdgeTransportNodeRtep struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.edgeId)",message="edgeId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.hostSwitchName)",message="hostSwitchName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ipAssignment)",message="ipAssignment is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.rtepVlan)",message="rtepVlan is a required parameter"
	Spec   EdgeTransportNodeRtepSpec   `json:"spec"`
	Status EdgeTransportNodeRtepStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeTransportNodeRtepList contains a list of EdgeTransportNodeRteps
type EdgeTransportNodeRtepList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EdgeTransportNodeRtep `json:"items"`
}

// Repository type metadata.
var (
	EdgeTransportNodeRtep_Kind             = "EdgeTransportNodeRtep"
	EdgeTransportNodeRtep_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EdgeTransportNodeRtep_Kind}.String()
	EdgeTransportNodeRtep_KindAPIVersion   = EdgeTransportNodeRtep_Kind + "." + CRDGroupVersion.String()
	EdgeTransportNodeRtep_GroupVersionKind = CRDGroupVersion.WithKind(EdgeTransportNodeRtep_Kind)
)

func init() {
	SchemeBuilder.Register(&EdgeTransportNodeRtep{}, &EdgeTransportNodeRtepList{})
}
