/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RuleTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type RuleTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VpcSecurityPolicyContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`

	// Id of the VPC which the resource belongs to.
	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`
}

type VpcSecurityPolicyContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`

	// Id of the VPC which the resource belongs to.
	// +kubebuilder:validation:Required
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`
}

type VpcSecurityPolicyObservation struct {

	// Comments for security policy lock/unlock
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// Resource context
	Context []VpcSecurityPolicyContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates whether a security policy should be locked. If locked by a user, no other user would be able to modify this policy
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// List of rules in the section
	Rule []VpcSecurityPolicyRuleObservation `json:"rule,omitempty" tf:"rule,omitempty"`

	// The list of group paths where the rules in this policy will get applied
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// This field is used to resolve conflicts between security policies across domains
	SequenceNumber *float64 `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	// When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed
	Stateful *bool `json:"stateful,omitempty" tf:"stateful,omitempty"`

	// Ensures that a 3 way TCP handshake is done before the data packets are sent
	TCPStrict *bool `json:"tcpStrict,omitempty" tf:"tcp_strict,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []VpcSecurityPolicyTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VpcSecurityPolicyParameters struct {

	// Comments for security policy lock/unlock
	// +kubebuilder:validation:Optional
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// Resource context
	// +kubebuilder:validation:Optional
	Context []VpcSecurityPolicyContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Indicates whether a security policy should be locked. If locked by a user, no other user would be able to modify this policy
	// +kubebuilder:validation:Optional
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// List of rules in the section
	// +kubebuilder:validation:Optional
	Rule []VpcSecurityPolicyRuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// The list of group paths where the rules in this policy will get applied
	// +kubebuilder:validation:Optional
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// This field is used to resolve conflicts between security policies across domains
	// +kubebuilder:validation:Optional
	SequenceNumber *float64 `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	// When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed
	// +kubebuilder:validation:Optional
	Stateful *bool `json:"stateful,omitempty" tf:"stateful,omitempty"`

	// Ensures that a 3 way TCP handshake is done before the data packets are sent
	// +kubebuilder:validation:Optional
	TCPStrict *bool `json:"tcpStrict,omitempty" tf:"tcp_strict,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []VpcSecurityPolicyTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VpcSecurityPolicyRuleObservation struct {

	// Action
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of destination groups
	DestinationGroups []*string `json:"destinationGroups,omitempty" tf:"destination_groups,omitempty"`

	// Negation of destination groups
	DestinationsExcluded *bool `json:"destinationsExcluded,omitempty" tf:"destinations_excluded,omitempty"`

	// Traffic direction
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Flag to disable the rule
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// IP version
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Additional information (string) which will be propagated to the rule syslog
	LogLabel *string `json:"logLabel,omitempty" tf:"log_label,omitempty"`

	// Flag to enable packet logging
	Logged *bool `json:"logged,omitempty" tf:"logged,omitempty"`

	// Text for additional notes on changes
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// List of profiles
	Profiles []*string `json:"profiles,omitempty" tf:"profiles,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Unique positive number that is assigned by the system and is useful for debugging
	RuleID *float64 `json:"ruleId,omitempty" tf:"rule_id,omitempty"`

	// List of policy paths where the rule is applied
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Sequence number of the this rule
	SequenceNumber *float64 `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	// List of services to match
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// List of source groups
	SourceGroups []*string `json:"sourceGroups,omitempty" tf:"source_groups,omitempty"`

	// Negation of source groups
	SourcesExcluded *bool `json:"sourcesExcluded,omitempty" tf:"sources_excluded,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []RuleTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VpcSecurityPolicyRuleParameters struct {

	// Action
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// List of destination groups
	// +kubebuilder:validation:Optional
	DestinationGroups []*string `json:"destinationGroups,omitempty" tf:"destination_groups,omitempty"`

	// Negation of destination groups
	// +kubebuilder:validation:Optional
	DestinationsExcluded *bool `json:"destinationsExcluded,omitempty" tf:"destinations_excluded,omitempty"`

	// Traffic direction
	// +kubebuilder:validation:Optional
	Direction *string `json:"direction,omitempty" tf:"direction,omitempty"`

	// Flag to disable the rule
	// +kubebuilder:validation:Optional
	Disabled *bool `json:"disabled,omitempty" tf:"disabled,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// IP version
	// +kubebuilder:validation:Optional
	IPVersion *string `json:"ipVersion,omitempty" tf:"ip_version,omitempty"`

	// Additional information (string) which will be propagated to the rule syslog
	// +kubebuilder:validation:Optional
	LogLabel *string `json:"logLabel,omitempty" tf:"log_label,omitempty"`

	// Flag to enable packet logging
	// +kubebuilder:validation:Optional
	Logged *bool `json:"logged,omitempty" tf:"logged,omitempty"`

	// Text for additional notes on changes
	// +kubebuilder:validation:Optional
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// List of profiles
	// +kubebuilder:validation:Optional
	Profiles []*string `json:"profiles,omitempty" tf:"profiles,omitempty"`

	// List of policy paths where the rule is applied
	// +kubebuilder:validation:Optional
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Sequence number of the this rule
	// +kubebuilder:validation:Optional
	SequenceNumber *float64 `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	// List of services to match
	// +kubebuilder:validation:Optional
	Services []*string `json:"services,omitempty" tf:"services,omitempty"`

	// List of source groups
	// +kubebuilder:validation:Optional
	SourceGroups []*string `json:"sourceGroups,omitempty" tf:"source_groups,omitempty"`

	// Negation of source groups
	// +kubebuilder:validation:Optional
	SourcesExcluded *bool `json:"sourcesExcluded,omitempty" tf:"sources_excluded,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []RuleTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VpcSecurityPolicyTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type VpcSecurityPolicyTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// VpcSecurityPolicySpec defines the desired state of VpcSecurityPolicy
type VpcSecurityPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VpcSecurityPolicyParameters `json:"forProvider"`
}

// VpcSecurityPolicyStatus defines the observed state of VpcSecurityPolicy.
type VpcSecurityPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VpcSecurityPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VpcSecurityPolicy is the Schema for the VpcSecurityPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type VpcSecurityPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.context)",message="context is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   VpcSecurityPolicySpec   `json:"spec"`
	Status VpcSecurityPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VpcSecurityPolicyList contains a list of VpcSecurityPolicys
type VpcSecurityPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VpcSecurityPolicy `json:"items"`
}

// Repository type metadata.
var (
	VpcSecurityPolicy_Kind             = "VpcSecurityPolicy"
	VpcSecurityPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VpcSecurityPolicy_Kind}.String()
	VpcSecurityPolicy_KindAPIVersion   = VpcSecurityPolicy_Kind + "." + CRDGroupVersion.String()
	VpcSecurityPolicy_GroupVersionKind = CRDGroupVersion.WithKind(VpcSecurityPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&VpcSecurityPolicy{}, &VpcSecurityPolicyList{})
}
