/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HostSwitchConfigSourceObservation struct {

	// HostSwitch Id
	HostSwitchID *string `json:"hostSwitchId,omitempty" tf:"host_switch_id,omitempty"`

	// Name of the TransportNodeProfile sub configuration to be used
	TransportNodeProfileSubConfigName *string `json:"transportNodeProfileSubConfigName,omitempty" tf:"transport_node_profile_sub_config_name,omitempty"`
}

type HostSwitchConfigSourceParameters struct {

	// HostSwitch Id
	// +kubebuilder:validation:Required
	HostSwitchID *string `json:"hostSwitchId" tf:"host_switch_id,omitempty"`

	// Name of the TransportNodeProfile sub configuration to be used
	// +kubebuilder:validation:Required
	TransportNodeProfileSubConfigName *string `json:"transportNodeProfileSubConfigName" tf:"transport_node_profile_sub_config_name,omitempty"`
}

type PolicyHostTransportNodeCollectionObservation struct {

	// Compute collection id
	ComputeCollectionID *string `json:"computeCollectionId,omitempty" tf:"compute_collection_id,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the enforcement point this resource belongs to
	EnforcementPoint *string `json:"enforcementPoint,omitempty" tf:"enforcement_point,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Indicate whether NSX service should be removed from hypervisors during resource deletion
	RemoveNsxOnDestroy *bool `json:"removeNsxOnDestroy,omitempty" tf:"remove_nsx_on_destroy,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Path to the site this resource belongs to
	SitePath *string `json:"sitePath,omitempty" tf:"site_path,omitempty"`

	// List of sub-cluster configuration
	SubClusterConfig []SubClusterConfigObservation `json:"subClusterConfig,omitempty" tf:"sub_cluster_config,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyHostTransportNodeCollectionTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Transport Node Profile Path
	TransportNodeProfilePath *string `json:"transportNodeProfilePath,omitempty" tf:"transport_node_profile_path,omitempty"`
}

type PolicyHostTransportNodeCollectionParameters struct {

	// Compute collection id
	// +kubebuilder:validation:Optional
	ComputeCollectionID *string `json:"computeCollectionId,omitempty" tf:"compute_collection_id,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the enforcement point this resource belongs to
	// +kubebuilder:validation:Optional
	EnforcementPoint *string `json:"enforcementPoint,omitempty" tf:"enforcement_point,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Indicate whether NSX service should be removed from hypervisors during resource deletion
	// +kubebuilder:validation:Optional
	RemoveNsxOnDestroy *bool `json:"removeNsxOnDestroy,omitempty" tf:"remove_nsx_on_destroy,omitempty"`

	// Path to the site this resource belongs to
	// +kubebuilder:validation:Optional
	SitePath *string `json:"sitePath,omitempty" tf:"site_path,omitempty"`

	// List of sub-cluster configuration
	// +kubebuilder:validation:Optional
	SubClusterConfig []SubClusterConfigParameters `json:"subClusterConfig,omitempty" tf:"sub_cluster_config,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyHostTransportNodeCollectionTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Transport Node Profile Path
	// +kubebuilder:validation:Optional
	TransportNodeProfilePath *string `json:"transportNodeProfilePath,omitempty" tf:"transport_node_profile_path,omitempty"`
}

type PolicyHostTransportNodeCollectionTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyHostTransportNodeCollectionTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type SubClusterConfigObservation struct {

	// List of overridden HostSwitch configuration
	HostSwitchConfigSource []HostSwitchConfigSourceObservation `json:"hostSwitchConfigSource,omitempty" tf:"host_switch_config_source,omitempty"`

	// sub-cluster Id
	SubClusterID *string `json:"subClusterId,omitempty" tf:"sub_cluster_id,omitempty"`
}

type SubClusterConfigParameters struct {

	// List of overridden HostSwitch configuration
	// +kubebuilder:validation:Required
	HostSwitchConfigSource []HostSwitchConfigSourceParameters `json:"hostSwitchConfigSource" tf:"host_switch_config_source,omitempty"`

	// sub-cluster Id
	// +kubebuilder:validation:Required
	SubClusterID *string `json:"subClusterId" tf:"sub_cluster_id,omitempty"`
}

// PolicyHostTransportNodeCollectionSpec defines the desired state of PolicyHostTransportNodeCollection
type PolicyHostTransportNodeCollectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyHostTransportNodeCollectionParameters `json:"forProvider"`
}

// PolicyHostTransportNodeCollectionStatus defines the observed state of PolicyHostTransportNodeCollection.
type PolicyHostTransportNodeCollectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyHostTransportNodeCollectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyHostTransportNodeCollection is the Schema for the PolicyHostTransportNodeCollections API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyHostTransportNodeCollection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.computeCollectionId)",message="computeCollectionId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   PolicyHostTransportNodeCollectionSpec   `json:"spec"`
	Status PolicyHostTransportNodeCollectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyHostTransportNodeCollectionList contains a list of PolicyHostTransportNodeCollections
type PolicyHostTransportNodeCollectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyHostTransportNodeCollection `json:"items"`
}

// Repository type metadata.
var (
	PolicyHostTransportNodeCollection_Kind             = "PolicyHostTransportNodeCollection"
	PolicyHostTransportNodeCollection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyHostTransportNodeCollection_Kind}.String()
	PolicyHostTransportNodeCollection_KindAPIVersion   = PolicyHostTransportNodeCollection_Kind + "." + CRDGroupVersion.String()
	PolicyHostTransportNodeCollection_GroupVersionKind = CRDGroupVersion.WithKind(PolicyHostTransportNodeCollection_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyHostTransportNodeCollection{}, &PolicyHostTransportNodeCollectionList{})
}
