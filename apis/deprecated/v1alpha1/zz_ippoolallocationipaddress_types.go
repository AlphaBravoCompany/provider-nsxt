/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpPoolAllocationIpAddressObservation struct {

	// IP Address that is allocated from the pool
	AllocationID *string `json:"allocationId,omitempty" tf:"allocation_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of IP pool that allocation belongs to
	IPPoolID *string `json:"ipPoolId,omitempty" tf:"ip_pool_id,omitempty"`
}

type IpPoolAllocationIpAddressParameters struct {

	// IP Address that is allocated from the pool
	// +kubebuilder:validation:Optional
	AllocationID *string `json:"allocationId,omitempty" tf:"allocation_id,omitempty"`

	// ID of IP pool that allocation belongs to
	// +kubebuilder:validation:Optional
	IPPoolID *string `json:"ipPoolId,omitempty" tf:"ip_pool_id,omitempty"`
}

// IpPoolAllocationIpAddressSpec defines the desired state of IpPoolAllocationIpAddress
type IpPoolAllocationIpAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpPoolAllocationIpAddressParameters `json:"forProvider"`
}

// IpPoolAllocationIpAddressStatus defines the observed state of IpPoolAllocationIpAddress.
type IpPoolAllocationIpAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpPoolAllocationIpAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpPoolAllocationIpAddress is the Schema for the IpPoolAllocationIpAddresss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type IpPoolAllocationIpAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ipPoolId)",message="ipPoolId is a required parameter"
	Spec   IpPoolAllocationIpAddressSpec   `json:"spec"`
	Status IpPoolAllocationIpAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpPoolAllocationIpAddressList contains a list of IpPoolAllocationIpAddresss
type IpPoolAllocationIpAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpPoolAllocationIpAddress `json:"items"`
}

// Repository type metadata.
var (
	IpPoolAllocationIpAddress_Kind             = "IpPoolAllocationIpAddress"
	IpPoolAllocationIpAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpPoolAllocationIpAddress_Kind}.String()
	IpPoolAllocationIpAddress_KindAPIVersion   = IpPoolAllocationIpAddress_Kind + "." + CRDGroupVersion.String()
	IpPoolAllocationIpAddress_GroupVersionKind = CRDGroupVersion.WithKind(IpPoolAllocationIpAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&IpPoolAllocationIpAddress{}, &IpPoolAllocationIpAddressList{})
}
