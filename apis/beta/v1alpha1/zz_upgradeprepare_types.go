/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FailedPrechecksObservation struct {
	Acked *bool `json:"acked,omitempty" tf:"acked,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	NeedsAck *bool `json:"needsAck,omitempty" tf:"needs_ack,omitempty"`

	NeedsResolve *bool `json:"needsResolve,omitempty" tf:"needs_resolve,omitempty"`

	ResolutionStatus *string `json:"resolutionStatus,omitempty" tf:"resolution_status,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FailedPrechecksParameters struct {
}

type UpgradePrepareObservation struct {

	// Whether to accept the user agreement
	AcceptUserAgreement *bool `json:"acceptUserAgreement,omitempty" tf:"accept_user_agreement,omitempty"`

	// Timeout for uploading bundle in seconds
	BundleUploadTimeout *float64 `json:"bundleUploadTimeout,omitempty" tf:"bundle_upload_timeout,omitempty"`

	// List of failed prechecks for the upgrade, including both warnings and errors
	FailedPrechecks []FailedPrechecksObservation `json:"failedPrechecks,omitempty" tf:"failed_prechecks,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// URL of the NSXT Upgrade precheck bundle (Only applied to NSXT version >= 4.1.1)
	PrecheckBundleURL *string `json:"precheckBundleUrl,omitempty" tf:"precheck_bundle_url,omitempty"`

	// Timeout for executing pre-upgrade checks in seconds
	PrecheckTimeout *float64 `json:"precheckTimeout,omitempty" tf:"precheck_timeout,omitempty"`

	// Target system version
	TargetVersion *string `json:"targetVersion,omitempty" tf:"target_version,omitempty"`

	// Timeout for upgrading upgrade coordinator in seconds
	UcUpgradeTimeout *float64 `json:"ucUpgradeTimeout,omitempty" tf:"uc_upgrade_timeout,omitempty"`

	// URL of the NSXT Upgrade bundle
	UpgradeBundleURL *string `json:"upgradeBundleUrl,omitempty" tf:"upgrade_bundle_url,omitempty"`

	// Target upgrade version for NSX, format is x.x.x..., should include at least 3 digits, example: 4.1.2
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type UpgradePrepareParameters struct {

	// Whether to accept the user agreement
	// +kubebuilder:validation:Optional
	AcceptUserAgreement *bool `json:"acceptUserAgreement,omitempty" tf:"accept_user_agreement,omitempty"`

	// Timeout for uploading bundle in seconds
	// +kubebuilder:validation:Optional
	BundleUploadTimeout *float64 `json:"bundleUploadTimeout,omitempty" tf:"bundle_upload_timeout,omitempty"`

	// URL of the NSXT Upgrade precheck bundle (Only applied to NSXT version >= 4.1.1)
	// +kubebuilder:validation:Optional
	PrecheckBundleURL *string `json:"precheckBundleUrl,omitempty" tf:"precheck_bundle_url,omitempty"`

	// Timeout for executing pre-upgrade checks in seconds
	// +kubebuilder:validation:Optional
	PrecheckTimeout *float64 `json:"precheckTimeout,omitempty" tf:"precheck_timeout,omitempty"`

	// Timeout for upgrading upgrade coordinator in seconds
	// +kubebuilder:validation:Optional
	UcUpgradeTimeout *float64 `json:"ucUpgradeTimeout,omitempty" tf:"uc_upgrade_timeout,omitempty"`

	// URL of the NSXT Upgrade bundle
	// +kubebuilder:validation:Optional
	UpgradeBundleURL *string `json:"upgradeBundleUrl,omitempty" tf:"upgrade_bundle_url,omitempty"`

	// Target upgrade version for NSX, format is x.x.x..., should include at least 3 digits, example: 4.1.2
	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

// UpgradePrepareSpec defines the desired state of UpgradePrepare
type UpgradePrepareSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UpgradePrepareParameters `json:"forProvider"`
}

// UpgradePrepareStatus defines the observed state of UpgradePrepare.
type UpgradePrepareStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UpgradePrepareObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UpgradePrepare is the Schema for the UpgradePrepares API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type UpgradePrepare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.acceptUserAgreement)",message="acceptUserAgreement is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.upgradeBundleUrl)",message="upgradeBundleUrl is a required parameter"
	Spec   UpgradePrepareSpec   `json:"spec"`
	Status UpgradePrepareStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UpgradePrepareList contains a list of UpgradePrepares
type UpgradePrepareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UpgradePrepare `json:"items"`
}

// Repository type metadata.
var (
	UpgradePrepare_Kind             = "UpgradePrepare"
	UpgradePrepare_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UpgradePrepare_Kind}.String()
	UpgradePrepare_KindAPIVersion   = UpgradePrepare_Kind + "." + CRDGroupVersion.String()
	UpgradePrepare_GroupVersionKind = CRDGroupVersion.WithKind(UpgradePrepare_Kind)
)

func init() {
	SchemeBuilder.Register(&UpgradePrepare{}, &UpgradePrepareList{})
}
