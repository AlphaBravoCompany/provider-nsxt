/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyUserManagementRoleBindingObservation struct {

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name of this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// ID of the external identity source
	IdentitySourceID *string `json:"identitySourceId,omitempty" tf:"identity_source_id,omitempty"`

	// ID of the external identity source
	IdentitySourceType *string `json:"identitySourceType,omitempty" tf:"identity_source_type,omitempty"`

	// User/Group's name
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Allow overwriting auto-created role binding on NSX for local users
	OverwriteLocalUser *bool `json:"overwriteLocalUser,omitempty" tf:"overwrite_local_user,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// List of roles that are associated with the user, limiting them to a path
	RolesForPath []RolesForPathObservation `json:"rolesForPath,omitempty" tf:"roles_for_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyUserManagementRoleBindingTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Indicates the type of the user
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// Local user's numeric id
	UserID *string `json:"userId,omitempty" tf:"user_id,omitempty"`
}

type PolicyUserManagementRoleBindingParameters struct {

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name of this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// ID of the external identity source
	// +kubebuilder:validation:Optional
	IdentitySourceID *string `json:"identitySourceId,omitempty" tf:"identity_source_id,omitempty"`

	// ID of the external identity source
	// +kubebuilder:validation:Optional
	IdentitySourceType *string `json:"identitySourceType,omitempty" tf:"identity_source_type,omitempty"`

	// User/Group's name
	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// Allow overwriting auto-created role binding on NSX for local users
	// +kubebuilder:validation:Optional
	OverwriteLocalUser *bool `json:"overwriteLocalUser,omitempty" tf:"overwrite_local_user,omitempty"`

	// List of roles that are associated with the user, limiting them to a path
	// +kubebuilder:validation:Optional
	RolesForPath []RolesForPathParameters `json:"rolesForPath,omitempty" tf:"roles_for_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyUserManagementRoleBindingTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Indicates the type of the user
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PolicyUserManagementRoleBindingTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyUserManagementRoleBindingTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type RolesForPathObservation struct {

	// Path of the entity in parent hierarchy.
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Applicable roles
	Roles []*string `json:"roles,omitempty" tf:"roles,omitempty"`
}

type RolesForPathParameters struct {

	// Path of the entity in parent hierarchy.
	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// Applicable roles
	// +kubebuilder:validation:Required
	Roles []*string `json:"roles" tf:"roles,omitempty"`
}

// PolicyUserManagementRoleBindingSpec defines the desired state of PolicyUserManagementRoleBinding
type PolicyUserManagementRoleBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyUserManagementRoleBindingParameters `json:"forProvider"`
}

// PolicyUserManagementRoleBindingStatus defines the observed state of PolicyUserManagementRoleBinding.
type PolicyUserManagementRoleBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyUserManagementRoleBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyUserManagementRoleBinding is the Schema for the PolicyUserManagementRoleBindings API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyUserManagementRoleBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.rolesForPath)",message="rolesForPath is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	Spec   PolicyUserManagementRoleBindingSpec   `json:"spec"`
	Status PolicyUserManagementRoleBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyUserManagementRoleBindingList contains a list of PolicyUserManagementRoleBindings
type PolicyUserManagementRoleBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyUserManagementRoleBinding `json:"items"`
}

// Repository type metadata.
var (
	PolicyUserManagementRoleBinding_Kind             = "PolicyUserManagementRoleBinding"
	PolicyUserManagementRoleBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyUserManagementRoleBinding_Kind}.String()
	PolicyUserManagementRoleBinding_KindAPIVersion   = PolicyUserManagementRoleBinding_Kind + "." + CRDGroupVersion.String()
	PolicyUserManagementRoleBinding_GroupVersionKind = CRDGroupVersion.WithKind(PolicyUserManagementRoleBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyUserManagementRoleBinding{}, &PolicyUserManagementRoleBindingList{})
}
