/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this PolicyIpAddressAllocation
func (mg *PolicyIpAddressAllocation) GetTerraformResourceType() string {
	return "nsxt_policy_ip_address_allocation"
}

// GetConnectionDetailsMapping for this PolicyIpAddressAllocation
func (tr *PolicyIpAddressAllocation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpAddressAllocation
func (tr *PolicyIpAddressAllocation) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpAddressAllocation
func (tr *PolicyIpAddressAllocation) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpAddressAllocation
func (tr *PolicyIpAddressAllocation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpAddressAllocation
func (tr *PolicyIpAddressAllocation) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpAddressAllocation
func (tr *PolicyIpAddressAllocation) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpAddressAllocation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpAddressAllocation) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpAddressAllocationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpAddressAllocation) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyIpBlock
func (mg *PolicyIpBlock) GetTerraformResourceType() string {
	return "nsxt_policy_ip_block"
}

// GetConnectionDetailsMapping for this PolicyIpBlock
func (tr *PolicyIpBlock) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpBlock
func (tr *PolicyIpBlock) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpBlock
func (tr *PolicyIpBlock) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpBlock
func (tr *PolicyIpBlock) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpBlock
func (tr *PolicyIpBlock) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpBlock
func (tr *PolicyIpBlock) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpBlock using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpBlock) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpBlockParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpBlock) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyIpPool
func (mg *PolicyIpPool) GetTerraformResourceType() string {
	return "nsxt_policy_ip_pool"
}

// GetConnectionDetailsMapping for this PolicyIpPool
func (tr *PolicyIpPool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpPool
func (tr *PolicyIpPool) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpPool
func (tr *PolicyIpPool) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpPool
func (tr *PolicyIpPool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpPool
func (tr *PolicyIpPool) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpPool
func (tr *PolicyIpPool) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpPool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpPool) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpPoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpPool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyIpPoolBlockSubnet
func (mg *PolicyIpPoolBlockSubnet) GetTerraformResourceType() string {
	return "nsxt_policy_ip_pool_block_subnet"
}

// GetConnectionDetailsMapping for this PolicyIpPoolBlockSubnet
func (tr *PolicyIpPoolBlockSubnet) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpPoolBlockSubnet
func (tr *PolicyIpPoolBlockSubnet) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpPoolBlockSubnet
func (tr *PolicyIpPoolBlockSubnet) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpPoolBlockSubnet
func (tr *PolicyIpPoolBlockSubnet) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpPoolBlockSubnet
func (tr *PolicyIpPoolBlockSubnet) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpPoolBlockSubnet
func (tr *PolicyIpPoolBlockSubnet) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpPoolBlockSubnet using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpPoolBlockSubnet) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpPoolBlockSubnetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpPoolBlockSubnet) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyIpPoolStaticSubnet
func (mg *PolicyIpPoolStaticSubnet) GetTerraformResourceType() string {
	return "nsxt_policy_ip_pool_static_subnet"
}

// GetConnectionDetailsMapping for this PolicyIpPoolStaticSubnet
func (tr *PolicyIpPoolStaticSubnet) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyIpPoolStaticSubnet
func (tr *PolicyIpPoolStaticSubnet) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyIpPoolStaticSubnet
func (tr *PolicyIpPoolStaticSubnet) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyIpPoolStaticSubnet
func (tr *PolicyIpPoolStaticSubnet) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyIpPoolStaticSubnet
func (tr *PolicyIpPoolStaticSubnet) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyIpPoolStaticSubnet
func (tr *PolicyIpPoolStaticSubnet) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyIpPoolStaticSubnet using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyIpPoolStaticSubnet) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyIpPoolStaticSubnetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyIpPoolStaticSubnet) GetTerraformSchemaVersion() int {
	return 0
}
