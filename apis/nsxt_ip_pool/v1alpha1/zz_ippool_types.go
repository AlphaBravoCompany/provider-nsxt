/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpPoolObservation struct {

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// List of IPv4 subnets
	Subnet []SubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type IpPoolParameters struct {

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// List of IPv4 subnets
	// +kubebuilder:validation:Optional
	Subnet []SubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type SubnetObservation struct {

	// A collection of IPv4 Pool Ranges
	AllocationRanges []*string `json:"allocationRanges,omitempty" tf:"allocation_ranges,omitempty"`

	// Network address and the prefix length which will be associated with a layer-2 broadcast domain
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// A collection of DNS servers for the subnet
	DNSNameservers []*string `json:"dnsNameservers,omitempty" tf:"dns_nameservers,omitempty"`

	// The DNS suffix for the DNS server
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// The default gateway address on a layer-3 router
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`
}

type SubnetParameters struct {

	// A collection of IPv4 Pool Ranges
	// +kubebuilder:validation:Required
	AllocationRanges []*string `json:"allocationRanges" tf:"allocation_ranges,omitempty"`

	// Network address and the prefix length which will be associated with a layer-2 broadcast domain
	// +kubebuilder:validation:Required
	Cidr *string `json:"cidr" tf:"cidr,omitempty"`

	// A collection of DNS servers for the subnet
	// +kubebuilder:validation:Optional
	DNSNameservers []*string `json:"dnsNameservers,omitempty" tf:"dns_nameservers,omitempty"`

	// The DNS suffix for the DNS server
	// +kubebuilder:validation:Optional
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// The default gateway address on a layer-3 router
	// +kubebuilder:validation:Optional
	GatewayIP *string `json:"gatewayIp,omitempty" tf:"gateway_ip,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// IpPoolSpec defines the desired state of IpPool
type IpPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpPoolParameters `json:"forProvider"`
}

// IpPoolStatus defines the observed state of IpPool.
type IpPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpPool is the Schema for the IpPools API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type IpPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IpPoolSpec   `json:"spec"`
	Status            IpPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpPoolList contains a list of IpPools
type IpPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpPool `json:"items"`
}

// Repository type metadata.
var (
	IpPool_Kind             = "IpPool"
	IpPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpPool_Kind}.String()
	IpPool_KindAPIVersion   = IpPool_Kind + "." + CRDGroupVersion.String()
	IpPool_GroupVersionKind = CRDGroupVersion.WithKind(IpPool_Kind)
)

func init() {
	SchemeBuilder.Register(&IpPool{}, &IpPoolList{})
}
