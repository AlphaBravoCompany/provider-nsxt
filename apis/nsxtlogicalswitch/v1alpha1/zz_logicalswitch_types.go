/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddressBindingObservation struct {

	// A single IP address or a subnet cidr
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// A single MAC address
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// A single vlan tag value
	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

type AddressBindingParameters struct {

	// A single IP address or a subnet cidr
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// A single MAC address
	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// A single vlan tag value
	// +kubebuilder:validation:Optional
	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`
}

type LogicalSwitchObservation struct {

	// Address bindings for the Logical switch
	AddressBinding []AddressBindingObservation `json:"addressBinding,omitempty" tf:"address_binding,omitempty"`

	// Represents Desired state of the object
	AdminState *string `json:"adminState,omitempty" tf:"admin_state,omitempty"`

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP pool id that associated with a LogicalSwitch
	IPPoolID *string `json:"ipPoolId,omitempty" tf:"ip_pool_id,omitempty"`

	// Mac pool id that associated with a LogicalSwitch
	MacPoolID *string `json:"macPoolId,omitempty" tf:"mac_pool_id,omitempty"`

	// Replication mode of the Logical Switch
	ReplicationMode *string `json:"replicationMode,omitempty" tf:"replication_mode,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// List of IDs of switching profiles (of various types) to be associated with this object. Default switching profiles will be used if not specified
	SwitchingProfileID []SwitchingProfileIDObservation `json:"switchingProfileId,omitempty" tf:"switching_profile_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Id of the TransportZone to which this LogicalSwitch is associated
	TransportZoneID *string `json:"transportZoneId,omitempty" tf:"transport_zone_id,omitempty"`

	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`

	// VNI for this LogicalSwitch
	Vni *float64 `json:"vni,omitempty" tf:"vni,omitempty"`
}

type LogicalSwitchParameters struct {

	// Address bindings for the Logical switch
	// +kubebuilder:validation:Optional
	AddressBinding []AddressBindingParameters `json:"addressBinding,omitempty" tf:"address_binding,omitempty"`

	// Represents Desired state of the object
	// +kubebuilder:validation:Optional
	AdminState *string `json:"adminState,omitempty" tf:"admin_state,omitempty"`

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// IP pool id that associated with a LogicalSwitch
	// +kubebuilder:validation:Optional
	IPPoolID *string `json:"ipPoolId,omitempty" tf:"ip_pool_id,omitempty"`

	// Mac pool id that associated with a LogicalSwitch
	// +kubebuilder:validation:Optional
	MacPoolID *string `json:"macPoolId,omitempty" tf:"mac_pool_id,omitempty"`

	// Replication mode of the Logical Switch
	// +kubebuilder:validation:Optional
	ReplicationMode *string `json:"replicationMode,omitempty" tf:"replication_mode,omitempty"`

	// List of IDs of switching profiles (of various types) to be associated with this object. Default switching profiles will be used if not specified
	// +kubebuilder:validation:Optional
	SwitchingProfileID []SwitchingProfileIDParameters `json:"switchingProfileId,omitempty" tf:"switching_profile_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Id of the TransportZone to which this LogicalSwitch is associated
	// +kubebuilder:validation:Optional
	TransportZoneID *string `json:"transportZoneId,omitempty" tf:"transport_zone_id,omitempty"`

	// +kubebuilder:validation:Optional
	Vlan *float64 `json:"vlan,omitempty" tf:"vlan,omitempty"`

	// VNI for this LogicalSwitch
	// +kubebuilder:validation:Optional
	Vni *float64 `json:"vni,omitempty" tf:"vni,omitempty"`
}

type SwitchingProfileIDObservation struct {

	// The resource type of this profile
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// The ID of this profile
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SwitchingProfileIDParameters struct {

	// The resource type of this profile
	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// The ID of this profile
	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LogicalSwitchSpec defines the desired state of LogicalSwitch
type LogicalSwitchSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogicalSwitchParameters `json:"forProvider"`
}

// LogicalSwitchStatus defines the observed state of LogicalSwitch.
type LogicalSwitchStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogicalSwitchObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalSwitch is the Schema for the LogicalSwitchs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LogicalSwitch struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.transportZoneId)",message="transportZoneId is a required parameter"
	Spec   LogicalSwitchSpec   `json:"spec"`
	Status LogicalSwitchStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalSwitchList contains a list of LogicalSwitchs
type LogicalSwitchList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicalSwitch `json:"items"`
}

// Repository type metadata.
var (
	LogicalSwitch_Kind             = "LogicalSwitch"
	LogicalSwitch_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogicalSwitch_Kind}.String()
	LogicalSwitch_KindAPIVersion   = LogicalSwitch_Kind + "." + CRDGroupVersion.String()
	LogicalSwitch_GroupVersionKind = CRDGroupVersion.WithKind(LogicalSwitch_Kind)
)

func init() {
	SchemeBuilder.Register(&LogicalSwitch{}, &LogicalSwitchList{})
}
