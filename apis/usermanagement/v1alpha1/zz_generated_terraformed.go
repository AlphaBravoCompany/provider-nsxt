/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this NodeUser
func (mg *NodeUser) GetTerraformResourceType() string {
	return "nsxt_node_user"
}

// GetConnectionDetailsMapping for this NodeUser
func (tr *NodeUser) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this NodeUser
func (tr *NodeUser) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NodeUser
func (tr *NodeUser) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NodeUser
func (tr *NodeUser) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NodeUser
func (tr *NodeUser) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NodeUser
func (tr *NodeUser) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NodeUser using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NodeUser) LateInitialize(attrs []byte) (bool, error) {
	params := &NodeUserParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NodeUser) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyLdapIdentitySource
func (mg *PolicyLdapIdentitySource) GetTerraformResourceType() string {
	return "nsxt_policy_ldap_identity_source"
}

// GetConnectionDetailsMapping for this PolicyLdapIdentitySource
func (tr *PolicyLdapIdentitySource) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"ldap_server[*].password": "spec.forProvider.ldapServer[*].passwordSecretRef"}
}

// GetObservation of this PolicyLdapIdentitySource
func (tr *PolicyLdapIdentitySource) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyLdapIdentitySource
func (tr *PolicyLdapIdentitySource) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyLdapIdentitySource
func (tr *PolicyLdapIdentitySource) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyLdapIdentitySource
func (tr *PolicyLdapIdentitySource) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyLdapIdentitySource
func (tr *PolicyLdapIdentitySource) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyLdapIdentitySource using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyLdapIdentitySource) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyLdapIdentitySourceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyLdapIdentitySource) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyUserManagementRole
func (mg *PolicyUserManagementRole) GetTerraformResourceType() string {
	return "nsxt_policy_user_management_role"
}

// GetConnectionDetailsMapping for this PolicyUserManagementRole
func (tr *PolicyUserManagementRole) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyUserManagementRole
func (tr *PolicyUserManagementRole) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyUserManagementRole
func (tr *PolicyUserManagementRole) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyUserManagementRole
func (tr *PolicyUserManagementRole) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyUserManagementRole
func (tr *PolicyUserManagementRole) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyUserManagementRole
func (tr *PolicyUserManagementRole) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyUserManagementRole using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyUserManagementRole) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyUserManagementRoleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyUserManagementRole) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PolicyUserManagementRoleBinding
func (mg *PolicyUserManagementRoleBinding) GetTerraformResourceType() string {
	return "nsxt_policy_user_management_role_binding"
}

// GetConnectionDetailsMapping for this PolicyUserManagementRoleBinding
func (tr *PolicyUserManagementRoleBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PolicyUserManagementRoleBinding
func (tr *PolicyUserManagementRoleBinding) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PolicyUserManagementRoleBinding
func (tr *PolicyUserManagementRoleBinding) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PolicyUserManagementRoleBinding
func (tr *PolicyUserManagementRoleBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PolicyUserManagementRoleBinding
func (tr *PolicyUserManagementRoleBinding) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PolicyUserManagementRoleBinding
func (tr *PolicyUserManagementRoleBinding) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PolicyUserManagementRoleBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PolicyUserManagementRoleBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &PolicyUserManagementRoleBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PolicyUserManagementRoleBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrincipalIdentity
func (mg *PrincipalIdentity) GetTerraformResourceType() string {
	return "nsxt_principal_identity"
}

// GetConnectionDetailsMapping for this PrincipalIdentity
func (tr *PrincipalIdentity) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrincipalIdentity
func (tr *PrincipalIdentity) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrincipalIdentity
func (tr *PrincipalIdentity) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrincipalIdentity
func (tr *PrincipalIdentity) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrincipalIdentity
func (tr *PrincipalIdentity) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrincipalIdentity
func (tr *PrincipalIdentity) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrincipalIdentity using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrincipalIdentity) LateInitialize(attrs []byte) (bool, error) {
	params := &PrincipalIdentityParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrincipalIdentity) GetTerraformSchemaVersion() int {
	return 0
}
