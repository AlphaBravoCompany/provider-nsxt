/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InsertModeParamsObservation struct {

	// HTTP cookie domain
	CookieDomain *string `json:"cookieDomain,omitempty" tf:"cookie_domain,omitempty"`

	// Type of cookie expiration timing
	CookieExpiryType *string `json:"cookieExpiryType,omitempty" tf:"cookie_expiry_type,omitempty"`

	// HTTP cookie path
	CookiePath *string `json:"cookiePath,omitempty" tf:"cookie_path,omitempty"`

	// Maximum interval (in seconds) the cookie is valid for from the last time it was seen in a request (required if cookie_expiry_type is set)
	MaxIdleTime *float64 `json:"maxIdleTime,omitempty" tf:"max_idle_time,omitempty"`

	// Maximum interval (in seconds) the cookie is valid for from the first time the cookie was seen in a request (required if cookie_expiry_type is SESSION_COOKIE_TIME expiration)
	MaxLifeTime *float64 `json:"maxLifeTime,omitempty" tf:"max_life_time,omitempty"`
}

type InsertModeParamsParameters struct {

	// HTTP cookie domain
	// +kubebuilder:validation:Optional
	CookieDomain *string `json:"cookieDomain,omitempty" tf:"cookie_domain,omitempty"`

	// Type of cookie expiration timing
	// +kubebuilder:validation:Optional
	CookieExpiryType *string `json:"cookieExpiryType,omitempty" tf:"cookie_expiry_type,omitempty"`

	// HTTP cookie path
	// +kubebuilder:validation:Optional
	CookiePath *string `json:"cookiePath,omitempty" tf:"cookie_path,omitempty"`

	// Maximum interval (in seconds) the cookie is valid for from the last time it was seen in a request (required if cookie_expiry_type is set)
	// +kubebuilder:validation:Optional
	MaxIdleTime *float64 `json:"maxIdleTime,omitempty" tf:"max_idle_time,omitempty"`

	// Maximum interval (in seconds) the cookie is valid for from the first time the cookie was seen in a request (required if cookie_expiry_type is SESSION_COOKIE_TIME expiration)
	// +kubebuilder:validation:Optional
	MaxLifeTime *float64 `json:"maxLifeTime,omitempty" tf:"max_life_time,omitempty"`
}

type LbCookiePersistenceProfileObservation struct {

	// A boolean flag which reflects whether once the server points by this cookie is down, a new server is selected, or the requests will be rejected
	CookieFallback *bool `json:"cookieFallback,omitempty" tf:"cookie_fallback,omitempty"`

	// A boolean flag which reflects whether the cookie value (server IP and port) would be encrypted or in plain text
	CookieGarble *bool `json:"cookieGarble,omitempty" tf:"cookie_garble,omitempty"`

	// The cookie persistence mode
	CookieMode *string `json:"cookieMode,omitempty" tf:"cookie_mode,omitempty"`

	// The name of the cookie
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Additional parameters for the INSERT cookie mode
	InsertModeParams []InsertModeParamsObservation `json:"insertModeParams,omitempty" tf:"insert_mode_params,omitempty"`

	// A boolean flag which reflects whether the cookie persistence is private or shared
	PersistenceShared *bool `json:"persistenceShared,omitempty" tf:"persistence_shared,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LbCookiePersistenceProfileParameters struct {

	// A boolean flag which reflects whether once the server points by this cookie is down, a new server is selected, or the requests will be rejected
	// +kubebuilder:validation:Optional
	CookieFallback *bool `json:"cookieFallback,omitempty" tf:"cookie_fallback,omitempty"`

	// A boolean flag which reflects whether the cookie value (server IP and port) would be encrypted or in plain text
	// +kubebuilder:validation:Optional
	CookieGarble *bool `json:"cookieGarble,omitempty" tf:"cookie_garble,omitempty"`

	// The cookie persistence mode
	// +kubebuilder:validation:Optional
	CookieMode *string `json:"cookieMode,omitempty" tf:"cookie_mode,omitempty"`

	// The name of the cookie
	// +kubebuilder:validation:Optional
	CookieName *string `json:"cookieName,omitempty" tf:"cookie_name,omitempty"`

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Additional parameters for the INSERT cookie mode
	// +kubebuilder:validation:Optional
	InsertModeParams []InsertModeParamsParameters `json:"insertModeParams,omitempty" tf:"insert_mode_params,omitempty"`

	// A boolean flag which reflects whether the cookie persistence is private or shared
	// +kubebuilder:validation:Optional
	PersistenceShared *bool `json:"persistenceShared,omitempty" tf:"persistence_shared,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LbCookiePersistenceProfileSpec defines the desired state of LbCookiePersistenceProfile
type LbCookiePersistenceProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LbCookiePersistenceProfileParameters `json:"forProvider"`
}

// LbCookiePersistenceProfileStatus defines the observed state of LbCookiePersistenceProfile.
type LbCookiePersistenceProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LbCookiePersistenceProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LbCookiePersistenceProfile is the Schema for the LbCookiePersistenceProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LbCookiePersistenceProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.cookieName)",message="cookieName is a required parameter"
	Spec   LbCookiePersistenceProfileSpec   `json:"spec"`
	Status LbCookiePersistenceProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LbCookiePersistenceProfileList contains a list of LbCookiePersistenceProfiles
type LbCookiePersistenceProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LbCookiePersistenceProfile `json:"items"`
}

// Repository type metadata.
var (
	LbCookiePersistenceProfile_Kind             = "LbCookiePersistenceProfile"
	LbCookiePersistenceProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LbCookiePersistenceProfile_Kind}.String()
	LbCookiePersistenceProfile_KindAPIVersion   = LbCookiePersistenceProfile_Kind + "." + CRDGroupVersion.String()
	LbCookiePersistenceProfile_GroupVersionKind = CRDGroupVersion.WithKind(LbCookiePersistenceProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&LbCookiePersistenceProfile{}, &LbCookiePersistenceProfileList{})
}
