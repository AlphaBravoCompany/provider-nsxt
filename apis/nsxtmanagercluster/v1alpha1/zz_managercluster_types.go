/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type APIProbingObservation struct {

	// Initial delay in seconds before probing connection
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// Whether API probing for NSX nodes is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Connection probing interval in seconds
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Timeout for connection probing in seconds
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type APIProbingParameters struct {

	// Initial delay in seconds before probing connection
	// +kubebuilder:validation:Optional
	Delay *float64 `json:"delay,omitempty" tf:"delay,omitempty"`

	// Whether API probing for NSX nodes is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Connection probing interval in seconds
	// +kubebuilder:validation:Optional
	Interval *float64 `json:"interval,omitempty" tf:"interval,omitempty"`

	// Timeout for connection probing in seconds
	// +kubebuilder:validation:Optional
	Timeout *float64 `json:"timeout,omitempty" tf:"timeout,omitempty"`
}

type ManagerClusterObservation struct {

	// Settings that control initial node connection
	APIProbing []APIProbingObservation `json:"apiProbing,omitempty" tf:"api_probing,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Nodes in the cluster
	Node []NodeObservation `json:"node,omitempty" tf:"node,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`
}

type ManagerClusterParameters struct {

	// Settings that control initial node connection
	// +kubebuilder:validation:Optional
	APIProbing []APIProbingParameters `json:"apiProbing,omitempty" tf:"api_probing,omitempty"`

	// Nodes in the cluster
	// +kubebuilder:validation:Optional
	Node []NodeParameters `json:"node,omitempty" tf:"node,omitempty"`
}

type NodeObservation struct {

	// FQDN for the cluster node
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// ID of the cluster node
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP address of the cluster node that will join the cluster
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Status of the cluster node
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// The username for login
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type NodeParameters struct {

	// IP address of the cluster node that will join the cluster
	// +kubebuilder:validation:Required
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// The password for login
	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// The username for login
	// +kubebuilder:validation:Required
	Username *string `json:"username" tf:"username,omitempty"`
}

// ManagerClusterSpec defines the desired state of ManagerCluster
type ManagerClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagerClusterParameters `json:"forProvider"`
}

// ManagerClusterStatus defines the observed state of ManagerCluster.
type ManagerClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagerClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerCluster is the Schema for the ManagerClusters API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type ManagerCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.node)",message="node is a required parameter"
	Spec   ManagerClusterSpec   `json:"spec"`
	Status ManagerClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagerClusterList contains a list of ManagerClusters
type ManagerClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagerCluster `json:"items"`
}

// Repository type metadata.
var (
	ManagerCluster_Kind             = "ManagerCluster"
	ManagerCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagerCluster_Kind}.String()
	ManagerCluster_KindAPIVersion   = ManagerCluster_Kind + "." + CRDGroupVersion.String()
	ManagerCluster_GroupVersionKind = CRDGroupVersion.WithKind(ManagerCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagerCluster{}, &ManagerClusterList{})
}
