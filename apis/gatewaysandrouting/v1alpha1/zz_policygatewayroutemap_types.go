/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CommunityListMatchObservation struct {

	// Community list path or a regular expression
	Criteria *string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	// Match operator for community list entries
	MatchOperator *string `json:"matchOperator,omitempty" tf:"match_operator,omitempty"`
}

type CommunityListMatchParameters struct {

	// Community list path or a regular expression
	// +kubebuilder:validation:Required
	Criteria *string `json:"criteria" tf:"criteria,omitempty"`

	// Match operator for community list entries
	// +kubebuilder:validation:Required
	MatchOperator *string `json:"matchOperator" tf:"match_operator,omitempty"`
}

type EntryObservation struct {

	// Action for the route map entry
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Prefix list match criteria for route map
	CommunityListMatch []CommunityListMatchObservation `json:"communityListMatch,omitempty" tf:"community_list_match,omitempty"`

	// List of paths for prefix lists for route map
	PrefixListMatches []*string `json:"prefixListMatches,omitempty" tf:"prefix_list_matches,omitempty"`

	// Set criteria for route map entry
	Set []SetObservation `json:"set,omitempty" tf:"set,omitempty"`
}

type EntryParameters struct {

	// Action for the route map entry
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Prefix list match criteria for route map
	// +kubebuilder:validation:Optional
	CommunityListMatch []CommunityListMatchParameters `json:"communityListMatch,omitempty" tf:"community_list_match,omitempty"`

	// List of paths for prefix lists for route map
	// +kubebuilder:validation:Optional
	PrefixListMatches []*string `json:"prefixListMatches,omitempty" tf:"prefix_list_matches,omitempty"`

	// Set criteria for route map entry
	// +kubebuilder:validation:Optional
	Set []SetParameters `json:"set,omitempty" tf:"set,omitempty"`
}

type PolicyGatewayRouteMapObservation struct {

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// List of Route Map entries
	Entry []EntryObservation `json:"entry,omitempty" tf:"entry,omitempty"`

	// Policy path for Tier0 gateway
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyGatewayRouteMapTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyGatewayRouteMapParameters struct {

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// List of Route Map entries
	// +kubebuilder:validation:Optional
	Entry []EntryParameters `json:"entry,omitempty" tf:"entry,omitempty"`

	// Policy path for Tier0 gateway
	// +kubebuilder:validation:Optional
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyGatewayRouteMapTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyGatewayRouteMapTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyGatewayRouteMapTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type SetObservation struct {

	// Autonomous System (AS) path prepend to influence route selection
	AsPathPrepend *string `json:"asPathPrepend,omitempty" tf:"as_path_prepend,omitempty"`

	// Set BGP regular or large community for matching routes
	Community *string `json:"community,omitempty" tf:"community,omitempty"`

	// Local preference indicates the degree of preference for one BGP route over other BGP routes
	LocalPreference *float64 `json:"localPreference,omitempty" tf:"local_preference,omitempty"`

	// A lower Multi exit descriminator (MED) is preferred over a higher value
	Med *float64 `json:"med,omitempty" tf:"med,omitempty"`

	// Indicator whether to prefer global address over link-local as the next hop
	PreferGlobalV6NextHop *bool `json:"preferGlobalV6NextHop,omitempty" tf:"prefer_global_v6_next_hop,omitempty"`

	// Weight is used to select a route when multiple routes are available to the same network
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

type SetParameters struct {

	// Autonomous System (AS) path prepend to influence route selection
	// +kubebuilder:validation:Optional
	AsPathPrepend *string `json:"asPathPrepend,omitempty" tf:"as_path_prepend,omitempty"`

	// Set BGP regular or large community for matching routes
	// +kubebuilder:validation:Optional
	Community *string `json:"community,omitempty" tf:"community,omitempty"`

	// Local preference indicates the degree of preference for one BGP route over other BGP routes
	// +kubebuilder:validation:Optional
	LocalPreference *float64 `json:"localPreference,omitempty" tf:"local_preference,omitempty"`

	// A lower Multi exit descriminator (MED) is preferred over a higher value
	// +kubebuilder:validation:Optional
	Med *float64 `json:"med,omitempty" tf:"med,omitempty"`

	// Indicator whether to prefer global address over link-local as the next hop
	// +kubebuilder:validation:Optional
	PreferGlobalV6NextHop *bool `json:"preferGlobalV6NextHop,omitempty" tf:"prefer_global_v6_next_hop,omitempty"`

	// Weight is used to select a route when multiple routes are available to the same network
	// +kubebuilder:validation:Optional
	Weight *float64 `json:"weight,omitempty" tf:"weight,omitempty"`
}

// PolicyGatewayRouteMapSpec defines the desired state of PolicyGatewayRouteMap
type PolicyGatewayRouteMapSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyGatewayRouteMapParameters `json:"forProvider"`
}

// PolicyGatewayRouteMapStatus defines the observed state of PolicyGatewayRouteMap.
type PolicyGatewayRouteMapStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyGatewayRouteMapObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyGatewayRouteMap is the Schema for the PolicyGatewayRouteMaps API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyGatewayRouteMap struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.entry)",message="entry is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.gatewayPath)",message="gatewayPath is a required parameter"
	Spec   PolicyGatewayRouteMapSpec   `json:"spec"`
	Status PolicyGatewayRouteMapStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyGatewayRouteMapList contains a list of PolicyGatewayRouteMaps
type PolicyGatewayRouteMapList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyGatewayRouteMap `json:"items"`
}

// Repository type metadata.
var (
	PolicyGatewayRouteMap_Kind             = "PolicyGatewayRouteMap"
	PolicyGatewayRouteMap_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyGatewayRouteMap_Kind}.String()
	PolicyGatewayRouteMap_KindAPIVersion   = PolicyGatewayRouteMap_Kind + "." + CRDGroupVersion.String()
	PolicyGatewayRouteMap_GroupVersionKind = CRDGroupVersion.WithKind(PolicyGatewayRouteMap_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyGatewayRouteMap{}, &PolicyGatewayRouteMapList{})
}
