/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/upbound/upjet/pkg/resource"
	"github.com/upbound/upjet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this AlgorithmTypeNsService
func (mg *AlgorithmTypeNsService) GetTerraformResourceType() string {
	return "nsxt_algorithm_type_ns_service"
}

// GetConnectionDetailsMapping for this AlgorithmTypeNsService
func (tr *AlgorithmTypeNsService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AlgorithmTypeNsService
func (tr *AlgorithmTypeNsService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AlgorithmTypeNsService
func (tr *AlgorithmTypeNsService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AlgorithmTypeNsService
func (tr *AlgorithmTypeNsService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AlgorithmTypeNsService
func (tr *AlgorithmTypeNsService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AlgorithmTypeNsService
func (tr *AlgorithmTypeNsService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AlgorithmTypeNsService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AlgorithmTypeNsService) LateInitialize(attrs []byte) (bool, error) {
	params := &AlgorithmTypeNsServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AlgorithmTypeNsService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DhcpRelayProfile
func (mg *DhcpRelayProfile) GetTerraformResourceType() string {
	return "nsxt_dhcp_relay_profile"
}

// GetConnectionDetailsMapping for this DhcpRelayProfile
func (tr *DhcpRelayProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DhcpRelayProfile
func (tr *DhcpRelayProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DhcpRelayProfile
func (tr *DhcpRelayProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DhcpRelayProfile
func (tr *DhcpRelayProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DhcpRelayProfile
func (tr *DhcpRelayProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DhcpRelayProfile
func (tr *DhcpRelayProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DhcpRelayProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DhcpRelayProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &DhcpRelayProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DhcpRelayProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DhcpRelayService
func (mg *DhcpRelayService) GetTerraformResourceType() string {
	return "nsxt_dhcp_relay_service"
}

// GetConnectionDetailsMapping for this DhcpRelayService
func (tr *DhcpRelayService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DhcpRelayService
func (tr *DhcpRelayService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DhcpRelayService
func (tr *DhcpRelayService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DhcpRelayService
func (tr *DhcpRelayService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DhcpRelayService
func (tr *DhcpRelayService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DhcpRelayService
func (tr *DhcpRelayService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DhcpRelayService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DhcpRelayService) LateInitialize(attrs []byte) (bool, error) {
	params := &DhcpRelayServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DhcpRelayService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DhcpServerIpPool
func (mg *DhcpServerIpPool) GetTerraformResourceType() string {
	return "nsxt_dhcp_server_ip_pool"
}

// GetConnectionDetailsMapping for this DhcpServerIpPool
func (tr *DhcpServerIpPool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DhcpServerIpPool
func (tr *DhcpServerIpPool) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DhcpServerIpPool
func (tr *DhcpServerIpPool) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DhcpServerIpPool
func (tr *DhcpServerIpPool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DhcpServerIpPool
func (tr *DhcpServerIpPool) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DhcpServerIpPool
func (tr *DhcpServerIpPool) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DhcpServerIpPool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DhcpServerIpPool) LateInitialize(attrs []byte) (bool, error) {
	params := &DhcpServerIpPoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DhcpServerIpPool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DhcpServerProfile
func (mg *DhcpServerProfile) GetTerraformResourceType() string {
	return "nsxt_dhcp_server_profile"
}

// GetConnectionDetailsMapping for this DhcpServerProfile
func (tr *DhcpServerProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DhcpServerProfile
func (tr *DhcpServerProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DhcpServerProfile
func (tr *DhcpServerProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DhcpServerProfile
func (tr *DhcpServerProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DhcpServerProfile
func (tr *DhcpServerProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DhcpServerProfile
func (tr *DhcpServerProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DhcpServerProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DhcpServerProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &DhcpServerProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DhcpServerProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this EtherTypeNsService
func (mg *EtherTypeNsService) GetTerraformResourceType() string {
	return "nsxt_ether_type_ns_service"
}

// GetConnectionDetailsMapping for this EtherTypeNsService
func (tr *EtherTypeNsService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this EtherTypeNsService
func (tr *EtherTypeNsService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this EtherTypeNsService
func (tr *EtherTypeNsService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this EtherTypeNsService
func (tr *EtherTypeNsService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this EtherTypeNsService
func (tr *EtherTypeNsService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this EtherTypeNsService
func (tr *EtherTypeNsService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this EtherTypeNsService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *EtherTypeNsService) LateInitialize(attrs []byte) (bool, error) {
	params := &EtherTypeNsServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *EtherTypeNsService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FirewallSection
func (mg *FirewallSection) GetTerraformResourceType() string {
	return "nsxt_firewall_section"
}

// GetConnectionDetailsMapping for this FirewallSection
func (tr *FirewallSection) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FirewallSection
func (tr *FirewallSection) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FirewallSection
func (tr *FirewallSection) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FirewallSection
func (tr *FirewallSection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FirewallSection
func (tr *FirewallSection) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FirewallSection
func (tr *FirewallSection) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FirewallSection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FirewallSection) LateInitialize(attrs []byte) (bool, error) {
	params := &FirewallSectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FirewallSection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IcmpTypeNsService
func (mg *IcmpTypeNsService) GetTerraformResourceType() string {
	return "nsxt_icmp_type_ns_service"
}

// GetConnectionDetailsMapping for this IcmpTypeNsService
func (tr *IcmpTypeNsService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IcmpTypeNsService
func (tr *IcmpTypeNsService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IcmpTypeNsService
func (tr *IcmpTypeNsService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IcmpTypeNsService
func (tr *IcmpTypeNsService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IcmpTypeNsService
func (tr *IcmpTypeNsService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IcmpTypeNsService
func (tr *IcmpTypeNsService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IcmpTypeNsService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IcmpTypeNsService) LateInitialize(attrs []byte) (bool, error) {
	params := &IcmpTypeNsServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IcmpTypeNsService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IgmpTypeNsService
func (mg *IgmpTypeNsService) GetTerraformResourceType() string {
	return "nsxt_igmp_type_ns_service"
}

// GetConnectionDetailsMapping for this IgmpTypeNsService
func (tr *IgmpTypeNsService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IgmpTypeNsService
func (tr *IgmpTypeNsService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IgmpTypeNsService
func (tr *IgmpTypeNsService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IgmpTypeNsService
func (tr *IgmpTypeNsService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IgmpTypeNsService
func (tr *IgmpTypeNsService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IgmpTypeNsService
func (tr *IgmpTypeNsService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IgmpTypeNsService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IgmpTypeNsService) LateInitialize(attrs []byte) (bool, error) {
	params := &IgmpTypeNsServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IgmpTypeNsService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpBlock
func (mg *IpBlock) GetTerraformResourceType() string {
	return "nsxt_ip_block"
}

// GetConnectionDetailsMapping for this IpBlock
func (tr *IpBlock) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpBlock
func (tr *IpBlock) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpBlock
func (tr *IpBlock) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpBlock
func (tr *IpBlock) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpBlock
func (tr *IpBlock) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpBlock
func (tr *IpBlock) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpBlock using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpBlock) LateInitialize(attrs []byte) (bool, error) {
	params := &IpBlockParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpBlock) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpBlockSubnet
func (mg *IpBlockSubnet) GetTerraformResourceType() string {
	return "nsxt_ip_block_subnet"
}

// GetConnectionDetailsMapping for this IpBlockSubnet
func (tr *IpBlockSubnet) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpBlockSubnet
func (tr *IpBlockSubnet) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpBlockSubnet
func (tr *IpBlockSubnet) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpBlockSubnet
func (tr *IpBlockSubnet) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpBlockSubnet
func (tr *IpBlockSubnet) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpBlockSubnet
func (tr *IpBlockSubnet) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpBlockSubnet using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpBlockSubnet) LateInitialize(attrs []byte) (bool, error) {
	params := &IpBlockSubnetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpBlockSubnet) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpDiscoverySwitchingProfile
func (mg *IpDiscoverySwitchingProfile) GetTerraformResourceType() string {
	return "nsxt_ip_discovery_switching_profile"
}

// GetConnectionDetailsMapping for this IpDiscoverySwitchingProfile
func (tr *IpDiscoverySwitchingProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpDiscoverySwitchingProfile
func (tr *IpDiscoverySwitchingProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpDiscoverySwitchingProfile
func (tr *IpDiscoverySwitchingProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpDiscoverySwitchingProfile
func (tr *IpDiscoverySwitchingProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpDiscoverySwitchingProfile
func (tr *IpDiscoverySwitchingProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpDiscoverySwitchingProfile
func (tr *IpDiscoverySwitchingProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpDiscoverySwitchingProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpDiscoverySwitchingProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &IpDiscoverySwitchingProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpDiscoverySwitchingProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpPool
func (mg *IpPool) GetTerraformResourceType() string {
	return "nsxt_ip_pool"
}

// GetConnectionDetailsMapping for this IpPool
func (tr *IpPool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpPool
func (tr *IpPool) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpPool
func (tr *IpPool) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpPool
func (tr *IpPool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpPool
func (tr *IpPool) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpPool
func (tr *IpPool) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpPool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpPool) LateInitialize(attrs []byte) (bool, error) {
	params := &IpPoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpPool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpPoolAllocationIpAddress
func (mg *IpPoolAllocationIpAddress) GetTerraformResourceType() string {
	return "nsxt_ip_pool_allocation_ip_address"
}

// GetConnectionDetailsMapping for this IpPoolAllocationIpAddress
func (tr *IpPoolAllocationIpAddress) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpPoolAllocationIpAddress
func (tr *IpPoolAllocationIpAddress) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpPoolAllocationIpAddress
func (tr *IpPoolAllocationIpAddress) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpPoolAllocationIpAddress
func (tr *IpPoolAllocationIpAddress) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpPoolAllocationIpAddress
func (tr *IpPoolAllocationIpAddress) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpPoolAllocationIpAddress
func (tr *IpPoolAllocationIpAddress) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpPoolAllocationIpAddress using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpPoolAllocationIpAddress) LateInitialize(attrs []byte) (bool, error) {
	params := &IpPoolAllocationIpAddressParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpPoolAllocationIpAddress) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpProtocolNsService
func (mg *IpProtocolNsService) GetTerraformResourceType() string {
	return "nsxt_ip_protocol_ns_service"
}

// GetConnectionDetailsMapping for this IpProtocolNsService
func (tr *IpProtocolNsService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpProtocolNsService
func (tr *IpProtocolNsService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpProtocolNsService
func (tr *IpProtocolNsService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpProtocolNsService
func (tr *IpProtocolNsService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpProtocolNsService
func (tr *IpProtocolNsService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpProtocolNsService
func (tr *IpProtocolNsService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpProtocolNsService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpProtocolNsService) LateInitialize(attrs []byte) (bool, error) {
	params := &IpProtocolNsServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpProtocolNsService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this IpSet
func (mg *IpSet) GetTerraformResourceType() string {
	return "nsxt_ip_set"
}

// GetConnectionDetailsMapping for this IpSet
func (tr *IpSet) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this IpSet
func (tr *IpSet) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this IpSet
func (tr *IpSet) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this IpSet
func (tr *IpSet) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this IpSet
func (tr *IpSet) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this IpSet
func (tr *IpSet) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this IpSet using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *IpSet) LateInitialize(attrs []byte) (bool, error) {
	params := &IpSetParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *IpSet) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this L4PortSetNsService
func (mg *L4PortSetNsService) GetTerraformResourceType() string {
	return "nsxt_l4_port_set_ns_service"
}

// GetConnectionDetailsMapping for this L4PortSetNsService
func (tr *L4PortSetNsService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this L4PortSetNsService
func (tr *L4PortSetNsService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this L4PortSetNsService
func (tr *L4PortSetNsService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this L4PortSetNsService
func (tr *L4PortSetNsService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this L4PortSetNsService
func (tr *L4PortSetNsService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this L4PortSetNsService
func (tr *L4PortSetNsService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this L4PortSetNsService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *L4PortSetNsService) LateInitialize(attrs []byte) (bool, error) {
	params := &L4PortSetNsServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *L4PortSetNsService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbClientSslProfile
func (mg *LbClientSslProfile) GetTerraformResourceType() string {
	return "nsxt_lb_client_ssl_profile"
}

// GetConnectionDetailsMapping for this LbClientSslProfile
func (tr *LbClientSslProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbClientSslProfile
func (tr *LbClientSslProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbClientSslProfile
func (tr *LbClientSslProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbClientSslProfile
func (tr *LbClientSslProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbClientSslProfile
func (tr *LbClientSslProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbClientSslProfile
func (tr *LbClientSslProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbClientSslProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbClientSslProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &LbClientSslProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbClientSslProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbCookiePersistenceProfile
func (mg *LbCookiePersistenceProfile) GetTerraformResourceType() string {
	return "nsxt_lb_cookie_persistence_profile"
}

// GetConnectionDetailsMapping for this LbCookiePersistenceProfile
func (tr *LbCookiePersistenceProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbCookiePersistenceProfile
func (tr *LbCookiePersistenceProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbCookiePersistenceProfile
func (tr *LbCookiePersistenceProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbCookiePersistenceProfile
func (tr *LbCookiePersistenceProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbCookiePersistenceProfile
func (tr *LbCookiePersistenceProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbCookiePersistenceProfile
func (tr *LbCookiePersistenceProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbCookiePersistenceProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbCookiePersistenceProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &LbCookiePersistenceProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbCookiePersistenceProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbFastTcpApplicationProfile
func (mg *LbFastTcpApplicationProfile) GetTerraformResourceType() string {
	return "nsxt_lb_fast_tcp_application_profile"
}

// GetConnectionDetailsMapping for this LbFastTcpApplicationProfile
func (tr *LbFastTcpApplicationProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbFastTcpApplicationProfile
func (tr *LbFastTcpApplicationProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbFastTcpApplicationProfile
func (tr *LbFastTcpApplicationProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbFastTcpApplicationProfile
func (tr *LbFastTcpApplicationProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbFastTcpApplicationProfile
func (tr *LbFastTcpApplicationProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbFastTcpApplicationProfile
func (tr *LbFastTcpApplicationProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbFastTcpApplicationProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbFastTcpApplicationProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &LbFastTcpApplicationProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbFastTcpApplicationProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbFastUdpApplicationProfile
func (mg *LbFastUdpApplicationProfile) GetTerraformResourceType() string {
	return "nsxt_lb_fast_udp_application_profile"
}

// GetConnectionDetailsMapping for this LbFastUdpApplicationProfile
func (tr *LbFastUdpApplicationProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbFastUdpApplicationProfile
func (tr *LbFastUdpApplicationProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbFastUdpApplicationProfile
func (tr *LbFastUdpApplicationProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbFastUdpApplicationProfile
func (tr *LbFastUdpApplicationProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbFastUdpApplicationProfile
func (tr *LbFastUdpApplicationProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbFastUdpApplicationProfile
func (tr *LbFastUdpApplicationProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbFastUdpApplicationProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbFastUdpApplicationProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &LbFastUdpApplicationProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbFastUdpApplicationProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbHttpApplicationProfile
func (mg *LbHttpApplicationProfile) GetTerraformResourceType() string {
	return "nsxt_lb_http_application_profile"
}

// GetConnectionDetailsMapping for this LbHttpApplicationProfile
func (tr *LbHttpApplicationProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbHttpApplicationProfile
func (tr *LbHttpApplicationProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbHttpApplicationProfile
func (tr *LbHttpApplicationProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbHttpApplicationProfile
func (tr *LbHttpApplicationProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbHttpApplicationProfile
func (tr *LbHttpApplicationProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbHttpApplicationProfile
func (tr *LbHttpApplicationProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbHttpApplicationProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbHttpApplicationProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &LbHttpApplicationProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbHttpApplicationProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbHttpForwardingRule
func (mg *LbHttpForwardingRule) GetTerraformResourceType() string {
	return "nsxt_lb_http_forwarding_rule"
}

// GetConnectionDetailsMapping for this LbHttpForwardingRule
func (tr *LbHttpForwardingRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbHttpForwardingRule
func (tr *LbHttpForwardingRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbHttpForwardingRule
func (tr *LbHttpForwardingRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbHttpForwardingRule
func (tr *LbHttpForwardingRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbHttpForwardingRule
func (tr *LbHttpForwardingRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbHttpForwardingRule
func (tr *LbHttpForwardingRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbHttpForwardingRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbHttpForwardingRule) LateInitialize(attrs []byte) (bool, error) {
	params := &LbHttpForwardingRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbHttpForwardingRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbHttpMonitor
func (mg *LbHttpMonitor) GetTerraformResourceType() string {
	return "nsxt_lb_http_monitor"
}

// GetConnectionDetailsMapping for this LbHttpMonitor
func (tr *LbHttpMonitor) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbHttpMonitor
func (tr *LbHttpMonitor) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbHttpMonitor
func (tr *LbHttpMonitor) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbHttpMonitor
func (tr *LbHttpMonitor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbHttpMonitor
func (tr *LbHttpMonitor) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbHttpMonitor
func (tr *LbHttpMonitor) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbHttpMonitor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbHttpMonitor) LateInitialize(attrs []byte) (bool, error) {
	params := &LbHttpMonitorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbHttpMonitor) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbHttpRequestRewriteRule
func (mg *LbHttpRequestRewriteRule) GetTerraformResourceType() string {
	return "nsxt_lb_http_request_rewrite_rule"
}

// GetConnectionDetailsMapping for this LbHttpRequestRewriteRule
func (tr *LbHttpRequestRewriteRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbHttpRequestRewriteRule
func (tr *LbHttpRequestRewriteRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbHttpRequestRewriteRule
func (tr *LbHttpRequestRewriteRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbHttpRequestRewriteRule
func (tr *LbHttpRequestRewriteRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbHttpRequestRewriteRule
func (tr *LbHttpRequestRewriteRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbHttpRequestRewriteRule
func (tr *LbHttpRequestRewriteRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbHttpRequestRewriteRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbHttpRequestRewriteRule) LateInitialize(attrs []byte) (bool, error) {
	params := &LbHttpRequestRewriteRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbHttpRequestRewriteRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbHttpResponseRewriteRule
func (mg *LbHttpResponseRewriteRule) GetTerraformResourceType() string {
	return "nsxt_lb_http_response_rewrite_rule"
}

// GetConnectionDetailsMapping for this LbHttpResponseRewriteRule
func (tr *LbHttpResponseRewriteRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbHttpResponseRewriteRule
func (tr *LbHttpResponseRewriteRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbHttpResponseRewriteRule
func (tr *LbHttpResponseRewriteRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbHttpResponseRewriteRule
func (tr *LbHttpResponseRewriteRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbHttpResponseRewriteRule
func (tr *LbHttpResponseRewriteRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbHttpResponseRewriteRule
func (tr *LbHttpResponseRewriteRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbHttpResponseRewriteRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbHttpResponseRewriteRule) LateInitialize(attrs []byte) (bool, error) {
	params := &LbHttpResponseRewriteRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbHttpResponseRewriteRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbHttpVirtualServer
func (mg *LbHttpVirtualServer) GetTerraformResourceType() string {
	return "nsxt_lb_http_virtual_server"
}

// GetConnectionDetailsMapping for this LbHttpVirtualServer
func (tr *LbHttpVirtualServer) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbHttpVirtualServer
func (tr *LbHttpVirtualServer) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbHttpVirtualServer
func (tr *LbHttpVirtualServer) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbHttpVirtualServer
func (tr *LbHttpVirtualServer) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbHttpVirtualServer
func (tr *LbHttpVirtualServer) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbHttpVirtualServer
func (tr *LbHttpVirtualServer) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbHttpVirtualServer using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbHttpVirtualServer) LateInitialize(attrs []byte) (bool, error) {
	params := &LbHttpVirtualServerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbHttpVirtualServer) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbHttpsMonitor
func (mg *LbHttpsMonitor) GetTerraformResourceType() string {
	return "nsxt_lb_https_monitor"
}

// GetConnectionDetailsMapping for this LbHttpsMonitor
func (tr *LbHttpsMonitor) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbHttpsMonitor
func (tr *LbHttpsMonitor) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbHttpsMonitor
func (tr *LbHttpsMonitor) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbHttpsMonitor
func (tr *LbHttpsMonitor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbHttpsMonitor
func (tr *LbHttpsMonitor) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbHttpsMonitor
func (tr *LbHttpsMonitor) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbHttpsMonitor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbHttpsMonitor) LateInitialize(attrs []byte) (bool, error) {
	params := &LbHttpsMonitorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbHttpsMonitor) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbIcmpMonitor
func (mg *LbIcmpMonitor) GetTerraformResourceType() string {
	return "nsxt_lb_icmp_monitor"
}

// GetConnectionDetailsMapping for this LbIcmpMonitor
func (tr *LbIcmpMonitor) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbIcmpMonitor
func (tr *LbIcmpMonitor) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbIcmpMonitor
func (tr *LbIcmpMonitor) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbIcmpMonitor
func (tr *LbIcmpMonitor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbIcmpMonitor
func (tr *LbIcmpMonitor) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbIcmpMonitor
func (tr *LbIcmpMonitor) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbIcmpMonitor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbIcmpMonitor) LateInitialize(attrs []byte) (bool, error) {
	params := &LbIcmpMonitorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbIcmpMonitor) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbPassiveMonitor
func (mg *LbPassiveMonitor) GetTerraformResourceType() string {
	return "nsxt_lb_passive_monitor"
}

// GetConnectionDetailsMapping for this LbPassiveMonitor
func (tr *LbPassiveMonitor) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbPassiveMonitor
func (tr *LbPassiveMonitor) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbPassiveMonitor
func (tr *LbPassiveMonitor) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbPassiveMonitor
func (tr *LbPassiveMonitor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbPassiveMonitor
func (tr *LbPassiveMonitor) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbPassiveMonitor
func (tr *LbPassiveMonitor) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbPassiveMonitor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbPassiveMonitor) LateInitialize(attrs []byte) (bool, error) {
	params := &LbPassiveMonitorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbPassiveMonitor) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbPool
func (mg *LbPool) GetTerraformResourceType() string {
	return "nsxt_lb_pool"
}

// GetConnectionDetailsMapping for this LbPool
func (tr *LbPool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbPool
func (tr *LbPool) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbPool
func (tr *LbPool) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbPool
func (tr *LbPool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbPool
func (tr *LbPool) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbPool
func (tr *LbPool) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbPool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbPool) LateInitialize(attrs []byte) (bool, error) {
	params := &LbPoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbPool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbServerSslProfile
func (mg *LbServerSslProfile) GetTerraformResourceType() string {
	return "nsxt_lb_server_ssl_profile"
}

// GetConnectionDetailsMapping for this LbServerSslProfile
func (tr *LbServerSslProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbServerSslProfile
func (tr *LbServerSslProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbServerSslProfile
func (tr *LbServerSslProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbServerSslProfile
func (tr *LbServerSslProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbServerSslProfile
func (tr *LbServerSslProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbServerSslProfile
func (tr *LbServerSslProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbServerSslProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbServerSslProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &LbServerSslProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbServerSslProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbService
func (mg *LbService) GetTerraformResourceType() string {
	return "nsxt_lb_service"
}

// GetConnectionDetailsMapping for this LbService
func (tr *LbService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbService
func (tr *LbService) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbService
func (tr *LbService) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbService
func (tr *LbService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbService
func (tr *LbService) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbService
func (tr *LbService) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbService) LateInitialize(attrs []byte) (bool, error) {
	params := &LbServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbSourceIpPersistenceProfile
func (mg *LbSourceIpPersistenceProfile) GetTerraformResourceType() string {
	return "nsxt_lb_source_ip_persistence_profile"
}

// GetConnectionDetailsMapping for this LbSourceIpPersistenceProfile
func (tr *LbSourceIpPersistenceProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbSourceIpPersistenceProfile
func (tr *LbSourceIpPersistenceProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbSourceIpPersistenceProfile
func (tr *LbSourceIpPersistenceProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbSourceIpPersistenceProfile
func (tr *LbSourceIpPersistenceProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbSourceIpPersistenceProfile
func (tr *LbSourceIpPersistenceProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbSourceIpPersistenceProfile
func (tr *LbSourceIpPersistenceProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbSourceIpPersistenceProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbSourceIpPersistenceProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &LbSourceIpPersistenceProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbSourceIpPersistenceProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbTcpMonitor
func (mg *LbTcpMonitor) GetTerraformResourceType() string {
	return "nsxt_lb_tcp_monitor"
}

// GetConnectionDetailsMapping for this LbTcpMonitor
func (tr *LbTcpMonitor) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbTcpMonitor
func (tr *LbTcpMonitor) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbTcpMonitor
func (tr *LbTcpMonitor) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbTcpMonitor
func (tr *LbTcpMonitor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbTcpMonitor
func (tr *LbTcpMonitor) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbTcpMonitor
func (tr *LbTcpMonitor) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbTcpMonitor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbTcpMonitor) LateInitialize(attrs []byte) (bool, error) {
	params := &LbTcpMonitorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbTcpMonitor) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbTcpVirtualServer
func (mg *LbTcpVirtualServer) GetTerraformResourceType() string {
	return "nsxt_lb_tcp_virtual_server"
}

// GetConnectionDetailsMapping for this LbTcpVirtualServer
func (tr *LbTcpVirtualServer) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbTcpVirtualServer
func (tr *LbTcpVirtualServer) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbTcpVirtualServer
func (tr *LbTcpVirtualServer) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbTcpVirtualServer
func (tr *LbTcpVirtualServer) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbTcpVirtualServer
func (tr *LbTcpVirtualServer) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbTcpVirtualServer
func (tr *LbTcpVirtualServer) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbTcpVirtualServer using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbTcpVirtualServer) LateInitialize(attrs []byte) (bool, error) {
	params := &LbTcpVirtualServerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbTcpVirtualServer) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbUdpMonitor
func (mg *LbUdpMonitor) GetTerraformResourceType() string {
	return "nsxt_lb_udp_monitor"
}

// GetConnectionDetailsMapping for this LbUdpMonitor
func (tr *LbUdpMonitor) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbUdpMonitor
func (tr *LbUdpMonitor) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbUdpMonitor
func (tr *LbUdpMonitor) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbUdpMonitor
func (tr *LbUdpMonitor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbUdpMonitor
func (tr *LbUdpMonitor) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbUdpMonitor
func (tr *LbUdpMonitor) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbUdpMonitor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbUdpMonitor) LateInitialize(attrs []byte) (bool, error) {
	params := &LbUdpMonitorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbUdpMonitor) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LbUdpVirtualServer
func (mg *LbUdpVirtualServer) GetTerraformResourceType() string {
	return "nsxt_lb_udp_virtual_server"
}

// GetConnectionDetailsMapping for this LbUdpVirtualServer
func (tr *LbUdpVirtualServer) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LbUdpVirtualServer
func (tr *LbUdpVirtualServer) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LbUdpVirtualServer
func (tr *LbUdpVirtualServer) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LbUdpVirtualServer
func (tr *LbUdpVirtualServer) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LbUdpVirtualServer
func (tr *LbUdpVirtualServer) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LbUdpVirtualServer
func (tr *LbUdpVirtualServer) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LbUdpVirtualServer using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LbUdpVirtualServer) LateInitialize(attrs []byte) (bool, error) {
	params := &LbUdpVirtualServerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LbUdpVirtualServer) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogicalDhcpPort
func (mg *LogicalDhcpPort) GetTerraformResourceType() string {
	return "nsxt_logical_dhcp_port"
}

// GetConnectionDetailsMapping for this LogicalDhcpPort
func (tr *LogicalDhcpPort) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LogicalDhcpPort
func (tr *LogicalDhcpPort) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogicalDhcpPort
func (tr *LogicalDhcpPort) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogicalDhcpPort
func (tr *LogicalDhcpPort) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogicalDhcpPort
func (tr *LogicalDhcpPort) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogicalDhcpPort
func (tr *LogicalDhcpPort) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LogicalDhcpPort using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogicalDhcpPort) LateInitialize(attrs []byte) (bool, error) {
	params := &LogicalDhcpPortParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogicalDhcpPort) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogicalDhcpServer
func (mg *LogicalDhcpServer) GetTerraformResourceType() string {
	return "nsxt_logical_dhcp_server"
}

// GetConnectionDetailsMapping for this LogicalDhcpServer
func (tr *LogicalDhcpServer) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LogicalDhcpServer
func (tr *LogicalDhcpServer) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogicalDhcpServer
func (tr *LogicalDhcpServer) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogicalDhcpServer
func (tr *LogicalDhcpServer) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogicalDhcpServer
func (tr *LogicalDhcpServer) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogicalDhcpServer
func (tr *LogicalDhcpServer) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LogicalDhcpServer using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogicalDhcpServer) LateInitialize(attrs []byte) (bool, error) {
	params := &LogicalDhcpServerParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogicalDhcpServer) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogicalPort
func (mg *LogicalPort) GetTerraformResourceType() string {
	return "nsxt_logical_port"
}

// GetConnectionDetailsMapping for this LogicalPort
func (tr *LogicalPort) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LogicalPort
func (tr *LogicalPort) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogicalPort
func (tr *LogicalPort) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogicalPort
func (tr *LogicalPort) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogicalPort
func (tr *LogicalPort) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogicalPort
func (tr *LogicalPort) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LogicalPort using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogicalPort) LateInitialize(attrs []byte) (bool, error) {
	params := &LogicalPortParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogicalPort) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogicalRouterCentralizedServicePort
func (mg *LogicalRouterCentralizedServicePort) GetTerraformResourceType() string {
	return "nsxt_logical_router_centralized_service_port"
}

// GetConnectionDetailsMapping for this LogicalRouterCentralizedServicePort
func (tr *LogicalRouterCentralizedServicePort) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LogicalRouterCentralizedServicePort
func (tr *LogicalRouterCentralizedServicePort) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogicalRouterCentralizedServicePort
func (tr *LogicalRouterCentralizedServicePort) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogicalRouterCentralizedServicePort
func (tr *LogicalRouterCentralizedServicePort) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogicalRouterCentralizedServicePort
func (tr *LogicalRouterCentralizedServicePort) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogicalRouterCentralizedServicePort
func (tr *LogicalRouterCentralizedServicePort) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LogicalRouterCentralizedServicePort using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogicalRouterCentralizedServicePort) LateInitialize(attrs []byte) (bool, error) {
	params := &LogicalRouterCentralizedServicePortParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogicalRouterCentralizedServicePort) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogicalRouterDownlinkPort
func (mg *LogicalRouterDownlinkPort) GetTerraformResourceType() string {
	return "nsxt_logical_router_downlink_port"
}

// GetConnectionDetailsMapping for this LogicalRouterDownlinkPort
func (tr *LogicalRouterDownlinkPort) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LogicalRouterDownlinkPort
func (tr *LogicalRouterDownlinkPort) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogicalRouterDownlinkPort
func (tr *LogicalRouterDownlinkPort) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogicalRouterDownlinkPort
func (tr *LogicalRouterDownlinkPort) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogicalRouterDownlinkPort
func (tr *LogicalRouterDownlinkPort) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogicalRouterDownlinkPort
func (tr *LogicalRouterDownlinkPort) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LogicalRouterDownlinkPort using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogicalRouterDownlinkPort) LateInitialize(attrs []byte) (bool, error) {
	params := &LogicalRouterDownlinkPortParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogicalRouterDownlinkPort) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogicalRouterLinkPortOnTier0
func (mg *LogicalRouterLinkPortOnTier0) GetTerraformResourceType() string {
	return "nsxt_logical_router_link_port_on_tier0"
}

// GetConnectionDetailsMapping for this LogicalRouterLinkPortOnTier0
func (tr *LogicalRouterLinkPortOnTier0) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LogicalRouterLinkPortOnTier0
func (tr *LogicalRouterLinkPortOnTier0) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogicalRouterLinkPortOnTier0
func (tr *LogicalRouterLinkPortOnTier0) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogicalRouterLinkPortOnTier0
func (tr *LogicalRouterLinkPortOnTier0) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogicalRouterLinkPortOnTier0
func (tr *LogicalRouterLinkPortOnTier0) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogicalRouterLinkPortOnTier0
func (tr *LogicalRouterLinkPortOnTier0) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LogicalRouterLinkPortOnTier0 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogicalRouterLinkPortOnTier0) LateInitialize(attrs []byte) (bool, error) {
	params := &LogicalRouterLinkPortOnTier0Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogicalRouterLinkPortOnTier0) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogicalRouterLinkPortOnTier1
func (mg *LogicalRouterLinkPortOnTier1) GetTerraformResourceType() string {
	return "nsxt_logical_router_link_port_on_tier1"
}

// GetConnectionDetailsMapping for this LogicalRouterLinkPortOnTier1
func (tr *LogicalRouterLinkPortOnTier1) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LogicalRouterLinkPortOnTier1
func (tr *LogicalRouterLinkPortOnTier1) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogicalRouterLinkPortOnTier1
func (tr *LogicalRouterLinkPortOnTier1) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogicalRouterLinkPortOnTier1
func (tr *LogicalRouterLinkPortOnTier1) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogicalRouterLinkPortOnTier1
func (tr *LogicalRouterLinkPortOnTier1) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogicalRouterLinkPortOnTier1
func (tr *LogicalRouterLinkPortOnTier1) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LogicalRouterLinkPortOnTier1 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogicalRouterLinkPortOnTier1) LateInitialize(attrs []byte) (bool, error) {
	params := &LogicalRouterLinkPortOnTier1Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogicalRouterLinkPortOnTier1) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogicalSwitch
func (mg *LogicalSwitch) GetTerraformResourceType() string {
	return "nsxt_logical_switch"
}

// GetConnectionDetailsMapping for this LogicalSwitch
func (tr *LogicalSwitch) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LogicalSwitch
func (tr *LogicalSwitch) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogicalSwitch
func (tr *LogicalSwitch) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogicalSwitch
func (tr *LogicalSwitch) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogicalSwitch
func (tr *LogicalSwitch) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogicalSwitch
func (tr *LogicalSwitch) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LogicalSwitch using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogicalSwitch) LateInitialize(attrs []byte) (bool, error) {
	params := &LogicalSwitchParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogicalSwitch) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogicalTier0Router
func (mg *LogicalTier0Router) GetTerraformResourceType() string {
	return "nsxt_logical_tier0_router"
}

// GetConnectionDetailsMapping for this LogicalTier0Router
func (tr *LogicalTier0Router) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LogicalTier0Router
func (tr *LogicalTier0Router) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogicalTier0Router
func (tr *LogicalTier0Router) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogicalTier0Router
func (tr *LogicalTier0Router) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogicalTier0Router
func (tr *LogicalTier0Router) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogicalTier0Router
func (tr *LogicalTier0Router) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LogicalTier0Router using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogicalTier0Router) LateInitialize(attrs []byte) (bool, error) {
	params := &LogicalTier0RouterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogicalTier0Router) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LogicalTier1Router
func (mg *LogicalTier1Router) GetTerraformResourceType() string {
	return "nsxt_logical_tier1_router"
}

// GetConnectionDetailsMapping for this LogicalTier1Router
func (tr *LogicalTier1Router) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LogicalTier1Router
func (tr *LogicalTier1Router) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LogicalTier1Router
func (tr *LogicalTier1Router) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LogicalTier1Router
func (tr *LogicalTier1Router) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LogicalTier1Router
func (tr *LogicalTier1Router) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LogicalTier1Router
func (tr *LogicalTier1Router) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LogicalTier1Router using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LogicalTier1Router) LateInitialize(attrs []byte) (bool, error) {
	params := &LogicalTier1RouterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LogicalTier1Router) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MacManagementSwitchingProfile
func (mg *MacManagementSwitchingProfile) GetTerraformResourceType() string {
	return "nsxt_mac_management_switching_profile"
}

// GetConnectionDetailsMapping for this MacManagementSwitchingProfile
func (tr *MacManagementSwitchingProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MacManagementSwitchingProfile
func (tr *MacManagementSwitchingProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MacManagementSwitchingProfile
func (tr *MacManagementSwitchingProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MacManagementSwitchingProfile
func (tr *MacManagementSwitchingProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MacManagementSwitchingProfile
func (tr *MacManagementSwitchingProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MacManagementSwitchingProfile
func (tr *MacManagementSwitchingProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MacManagementSwitchingProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MacManagementSwitchingProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &MacManagementSwitchingProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MacManagementSwitchingProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NatRule
func (mg *NatRule) GetTerraformResourceType() string {
	return "nsxt_nat_rule"
}

// GetConnectionDetailsMapping for this NatRule
func (tr *NatRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NatRule
func (tr *NatRule) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NatRule
func (tr *NatRule) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NatRule
func (tr *NatRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NatRule
func (tr *NatRule) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NatRule
func (tr *NatRule) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NatRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NatRule) LateInitialize(attrs []byte) (bool, error) {
	params := &NatRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NatRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsGroup
func (mg *NsGroup) GetTerraformResourceType() string {
	return "nsxt_ns_group"
}

// GetConnectionDetailsMapping for this NsGroup
func (tr *NsGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsGroup
func (tr *NsGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsGroup
func (tr *NsGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsGroup
func (tr *NsGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsGroup
func (tr *NsGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsGroup
func (tr *NsGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &NsGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NsServiceGroup
func (mg *NsServiceGroup) GetTerraformResourceType() string {
	return "nsxt_ns_service_group"
}

// GetConnectionDetailsMapping for this NsServiceGroup
func (tr *NsServiceGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NsServiceGroup
func (tr *NsServiceGroup) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NsServiceGroup
func (tr *NsServiceGroup) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NsServiceGroup
func (tr *NsServiceGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NsServiceGroup
func (tr *NsServiceGroup) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NsServiceGroup
func (tr *NsServiceGroup) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NsServiceGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NsServiceGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &NsServiceGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NsServiceGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this QosSwitchingProfile
func (mg *QosSwitchingProfile) GetTerraformResourceType() string {
	return "nsxt_qos_switching_profile"
}

// GetConnectionDetailsMapping for this QosSwitchingProfile
func (tr *QosSwitchingProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this QosSwitchingProfile
func (tr *QosSwitchingProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this QosSwitchingProfile
func (tr *QosSwitchingProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this QosSwitchingProfile
func (tr *QosSwitchingProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this QosSwitchingProfile
func (tr *QosSwitchingProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this QosSwitchingProfile
func (tr *QosSwitchingProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this QosSwitchingProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *QosSwitchingProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &QosSwitchingProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *QosSwitchingProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SpoofguardSwitchingProfile
func (mg *SpoofguardSwitchingProfile) GetTerraformResourceType() string {
	return "nsxt_spoofguard_switching_profile"
}

// GetConnectionDetailsMapping for this SpoofguardSwitchingProfile
func (tr *SpoofguardSwitchingProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SpoofguardSwitchingProfile
func (tr *SpoofguardSwitchingProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SpoofguardSwitchingProfile
func (tr *SpoofguardSwitchingProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SpoofguardSwitchingProfile
func (tr *SpoofguardSwitchingProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SpoofguardSwitchingProfile
func (tr *SpoofguardSwitchingProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SpoofguardSwitchingProfile
func (tr *SpoofguardSwitchingProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this SpoofguardSwitchingProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SpoofguardSwitchingProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &SpoofguardSwitchingProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SpoofguardSwitchingProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this StaticRoute
func (mg *StaticRoute) GetTerraformResourceType() string {
	return "nsxt_static_route"
}

// GetConnectionDetailsMapping for this StaticRoute
func (tr *StaticRoute) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this StaticRoute
func (tr *StaticRoute) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this StaticRoute
func (tr *StaticRoute) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this StaticRoute
func (tr *StaticRoute) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this StaticRoute
func (tr *StaticRoute) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this StaticRoute
func (tr *StaticRoute) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this StaticRoute using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *StaticRoute) LateInitialize(attrs []byte) (bool, error) {
	params := &StaticRouteParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *StaticRoute) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SwitchSecuritySwitchingProfile
func (mg *SwitchSecuritySwitchingProfile) GetTerraformResourceType() string {
	return "nsxt_switch_security_switching_profile"
}

// GetConnectionDetailsMapping for this SwitchSecuritySwitchingProfile
func (tr *SwitchSecuritySwitchingProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SwitchSecuritySwitchingProfile
func (tr *SwitchSecuritySwitchingProfile) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SwitchSecuritySwitchingProfile
func (tr *SwitchSecuritySwitchingProfile) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SwitchSecuritySwitchingProfile
func (tr *SwitchSecuritySwitchingProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SwitchSecuritySwitchingProfile
func (tr *SwitchSecuritySwitchingProfile) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SwitchSecuritySwitchingProfile
func (tr *SwitchSecuritySwitchingProfile) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this SwitchSecuritySwitchingProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SwitchSecuritySwitchingProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &SwitchSecuritySwitchingProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SwitchSecuritySwitchingProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VlanLogicalSwitch
func (mg *VlanLogicalSwitch) GetTerraformResourceType() string {
	return "nsxt_vlan_logical_switch"
}

// GetConnectionDetailsMapping for this VlanLogicalSwitch
func (tr *VlanLogicalSwitch) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VlanLogicalSwitch
func (tr *VlanLogicalSwitch) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VlanLogicalSwitch
func (tr *VlanLogicalSwitch) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VlanLogicalSwitch
func (tr *VlanLogicalSwitch) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VlanLogicalSwitch
func (tr *VlanLogicalSwitch) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VlanLogicalSwitch
func (tr *VlanLogicalSwitch) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VlanLogicalSwitch using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VlanLogicalSwitch) LateInitialize(attrs []byte) (bool, error) {
	params := &VlanLogicalSwitchParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VlanLogicalSwitch) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VmTags
func (mg *VmTags) GetTerraformResourceType() string {
	return "nsxt_vm_tags"
}

// GetConnectionDetailsMapping for this VmTags
func (tr *VmTags) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VmTags
func (tr *VmTags) GetObservation() (map[string]any, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VmTags
func (tr *VmTags) SetObservation(obs map[string]any) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VmTags
func (tr *VmTags) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VmTags
func (tr *VmTags) GetParameters() (map[string]any, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]any{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VmTags
func (tr *VmTags) SetParameters(params map[string]any) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VmTags using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VmTags) LateInitialize(attrs []byte) (bool, error) {
	params := &VmTagsParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VmTags) GetTerraformSchemaVersion() int {
	return 0
}
