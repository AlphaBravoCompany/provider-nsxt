/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AllocationRangeObservation struct {

	// The end IP Address for the range
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// The start IP Address for the range
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type AllocationRangeParameters struct {

	// The end IP Address for the range
	// +kubebuilder:validation:Required
	End *string `json:"end" tf:"end,omitempty"`

	// The start IP Address for the range
	// +kubebuilder:validation:Required
	Start *string `json:"start" tf:"start,omitempty"`
}

type PolicyIpPoolStaticSubnetContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type PolicyIpPoolStaticSubnetContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type PolicyIpPoolStaticSubnetObservation struct {

	// A collection of IPv4 or IPv6 IP ranges
	AllocationRange []AllocationRangeObservation `json:"allocationRange,omitempty" tf:"allocation_range,omitempty"`

	// Network address and prefix length
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Resource context
	Context []PolicyIpPoolStaticSubnetContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// The collection of up to 3 DNS servers for the subnet
	DNSNameservers []*string `json:"dnsNameservers,omitempty" tf:"dns_nameservers,omitempty"`

	// DNS suffix for the nameserver
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The default gateway address
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Policy path to the IP Pool for this Subnet
	PoolPath *string `json:"poolPath,omitempty" tf:"pool_path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyIpPoolStaticSubnetTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyIpPoolStaticSubnetParameters struct {

	// A collection of IPv4 or IPv6 IP ranges
	// +kubebuilder:validation:Optional
	AllocationRange []AllocationRangeParameters `json:"allocationRange,omitempty" tf:"allocation_range,omitempty"`

	// Network address and prefix length
	// +kubebuilder:validation:Optional
	Cidr *string `json:"cidr,omitempty" tf:"cidr,omitempty"`

	// Resource context
	// +kubebuilder:validation:Optional
	Context []PolicyIpPoolStaticSubnetContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// The collection of up to 3 DNS servers for the subnet
	// +kubebuilder:validation:Optional
	DNSNameservers []*string `json:"dnsNameservers,omitempty" tf:"dns_nameservers,omitempty"`

	// DNS suffix for the nameserver
	// +kubebuilder:validation:Optional
	DNSSuffix *string `json:"dnsSuffix,omitempty" tf:"dns_suffix,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The default gateway address
	// +kubebuilder:validation:Optional
	Gateway *string `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path to the IP Pool for this Subnet
	// +kubebuilder:validation:Optional
	PoolPath *string `json:"poolPath,omitempty" tf:"pool_path,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyIpPoolStaticSubnetTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyIpPoolStaticSubnetTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyIpPoolStaticSubnetTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyIpPoolStaticSubnetSpec defines the desired state of PolicyIpPoolStaticSubnet
type PolicyIpPoolStaticSubnetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyIpPoolStaticSubnetParameters `json:"forProvider"`
}

// PolicyIpPoolStaticSubnetStatus defines the observed state of PolicyIpPoolStaticSubnet.
type PolicyIpPoolStaticSubnetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyIpPoolStaticSubnetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyIpPoolStaticSubnet is the Schema for the PolicyIpPoolStaticSubnets API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyIpPoolStaticSubnet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.allocationRange)",message="allocationRange is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.cidr)",message="cidr is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.poolPath)",message="poolPath is a required parameter"
	Spec   PolicyIpPoolStaticSubnetSpec   `json:"spec"`
	Status PolicyIpPoolStaticSubnetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyIpPoolStaticSubnetList contains a list of PolicyIpPoolStaticSubnets
type PolicyIpPoolStaticSubnetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyIpPoolStaticSubnet `json:"items"`
}

// Repository type metadata.
var (
	PolicyIpPoolStaticSubnet_Kind             = "PolicyIpPoolStaticSubnet"
	PolicyIpPoolStaticSubnet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyIpPoolStaticSubnet_Kind}.String()
	PolicyIpPoolStaticSubnet_KindAPIVersion   = PolicyIpPoolStaticSubnet_Kind + "." + CRDGroupVersion.String()
	PolicyIpPoolStaticSubnet_GroupVersionKind = CRDGroupVersion.WithKind(PolicyIpPoolStaticSubnet_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyIpPoolStaticSubnet{}, &PolicyIpPoolStaticSubnetList{})
}
