/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LdapServerObservation struct {

	// Username or DN for LDAP authentication
	BindIdentity *string `json:"bindIdentity,omitempty" tf:"bind_identity,omitempty"`

	// TLS certificate(s) for LDAP server(s)
	Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

	// If true, this LDAP server is enabled
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The URL for the LDAP server
	URL *string `json:"url,omitempty" tf:"url,omitempty"`

	// Enable/disable StartTLS
	UseStarttls *bool `json:"useStarttls,omitempty" tf:"use_starttls,omitempty"`
}

type LdapServerParameters struct {

	// Username or DN for LDAP authentication
	// +kubebuilder:validation:Optional
	BindIdentity *string `json:"bindIdentity,omitempty" tf:"bind_identity,omitempty"`

	// TLS certificate(s) for LDAP server(s)
	// +kubebuilder:validation:Optional
	Certificates []*string `json:"certificates,omitempty" tf:"certificates,omitempty"`

	// If true, this LDAP server is enabled
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// The authentication password for login
	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// The URL for the LDAP server
	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// Enable/disable StartTLS
	// +kubebuilder:validation:Optional
	UseStarttls *bool `json:"useStarttls,omitempty" tf:"use_starttls,omitempty"`
}

type PolicyLdapIdentitySourceObservation struct {

	// Additional domains to be directed to this identity source
	AlternativeDomainNames []*string `json:"alternativeDomainNames,omitempty" tf:"alternative_domain_names,omitempty"`

	// DN of subtree for user and group searches
	BaseDn *string `json:"baseDn,omitempty" tf:"base_dn,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Authentication domain name
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// LDAP servers for this identity source
	LdapServer []LdapServerObservation `json:"ldapServer,omitempty" tf:"ldap_server,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []TagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Indicates the type of LDAP server
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PolicyLdapIdentitySourceParameters struct {

	// Additional domains to be directed to this identity source
	// +kubebuilder:validation:Optional
	AlternativeDomainNames []*string `json:"alternativeDomainNames,omitempty" tf:"alternative_domain_names,omitempty"`

	// DN of subtree for user and group searches
	// +kubebuilder:validation:Optional
	BaseDn *string `json:"baseDn,omitempty" tf:"base_dn,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Authentication domain name
	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	// LDAP servers for this identity source
	// +kubebuilder:validation:Optional
	LdapServer []LdapServerParameters `json:"ldapServer,omitempty" tf:"ldap_server,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []TagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Indicates the type of LDAP server
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type TagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type TagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyLdapIdentitySourceSpec defines the desired state of PolicyLdapIdentitySource
type PolicyLdapIdentitySourceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyLdapIdentitySourceParameters `json:"forProvider"`
}

// PolicyLdapIdentitySourceStatus defines the observed state of PolicyLdapIdentitySource.
type PolicyLdapIdentitySourceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyLdapIdentitySourceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyLdapIdentitySource is the Schema for the PolicyLdapIdentitySources API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyLdapIdentitySource struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.baseDn)",message="baseDn is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.domainName)",message="domainName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ldapServer)",message="ldapServer is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.nsxId)",message="nsxId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.type)",message="type is a required parameter"
	Spec   PolicyLdapIdentitySourceSpec   `json:"spec"`
	Status PolicyLdapIdentitySourceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyLdapIdentitySourceList contains a list of PolicyLdapIdentitySources
type PolicyLdapIdentitySourceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyLdapIdentitySource `json:"items"`
}

// Repository type metadata.
var (
	PolicyLdapIdentitySource_Kind             = "PolicyLdapIdentitySource"
	PolicyLdapIdentitySource_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyLdapIdentitySource_Kind}.String()
	PolicyLdapIdentitySource_KindAPIVersion   = PolicyLdapIdentitySource_Kind + "." + CRDGroupVersion.String()
	PolicyLdapIdentitySource_GroupVersionKind = CRDGroupVersion.WithKind(PolicyLdapIdentitySource_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyLdapIdentitySource{}, &PolicyLdapIdentitySourceList{})
}
