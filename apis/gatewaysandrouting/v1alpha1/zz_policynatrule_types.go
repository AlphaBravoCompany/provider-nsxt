/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type ContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type PolicyNatRuleObservation struct {

	// The action for the NAT Rule
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Resource context
	Context []ContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination network(s) for the NAT Rule
	DestinationNetworks []*string `json:"destinationNetworks,omitempty" tf:"destination_networks,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Enable/disable the rule
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Firewall match flag
	FirewallMatch *string `json:"firewallMatch,omitempty" tf:"firewall_match,omitempty"`

	// The NSX-T Policy path to the Tier0 or Tier1 Gateway for this resource
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Enable/disable the logging of rule
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// Policy based vpn mode match flag. DNAT and NO_DNAT only
	PolicyBasedVPNMode *string `json:"policyBasedVpnMode,omitempty" tf:"policy_based_vpn_mode,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// The sequence_number decides the rule_priority of a NAT rule. Valid range [0-2147483647]
	RulePriority *float64 `json:"rulePriority,omitempty" tf:"rule_priority,omitempty"`

	// Policy paths to interfaces or labels where the NAT Rule is enforced
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Policy path of Service on which the NAT rule will be applied
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// The source network(s) for the NAT Rule
	SourceNetworks []*string `json:"sourceNetworks,omitempty" tf:"source_networks,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyNatRuleTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// The translated network(s) for the NAT Rule
	TranslatedNetworks []*string `json:"translatedNetworks,omitempty" tf:"translated_networks,omitempty"`

	// Port number or port range. DNAT only
	TranslatedPorts *string `json:"translatedPorts,omitempty" tf:"translated_ports,omitempty"`

	// NAT Type
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PolicyNatRuleParameters struct {

	// The action for the NAT Rule
	// +kubebuilder:validation:Optional
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	// Resource context
	// +kubebuilder:validation:Optional
	Context []ContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The destination network(s) for the NAT Rule
	// +kubebuilder:validation:Optional
	DestinationNetworks []*string `json:"destinationNetworks,omitempty" tf:"destination_networks,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Enable/disable the rule
	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// Firewall match flag
	// +kubebuilder:validation:Optional
	FirewallMatch *string `json:"firewallMatch,omitempty" tf:"firewall_match,omitempty"`

	// The NSX-T Policy path to the Tier0 or Tier1 Gateway for this resource
	// +kubebuilder:validation:Optional
	GatewayPath *string `json:"gatewayPath,omitempty" tf:"gateway_path,omitempty"`

	// Enable/disable the logging of rule
	// +kubebuilder:validation:Optional
	Logging *bool `json:"logging,omitempty" tf:"logging,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy based vpn mode match flag. DNAT and NO_DNAT only
	// +kubebuilder:validation:Optional
	PolicyBasedVPNMode *string `json:"policyBasedVpnMode,omitempty" tf:"policy_based_vpn_mode,omitempty"`

	// The sequence_number decides the rule_priority of a NAT rule. Valid range [0-2147483647]
	// +kubebuilder:validation:Optional
	RulePriority *float64 `json:"rulePriority,omitempty" tf:"rule_priority,omitempty"`

	// Policy paths to interfaces or labels where the NAT Rule is enforced
	// +kubebuilder:validation:Optional
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// Policy path of Service on which the NAT rule will be applied
	// +kubebuilder:validation:Optional
	Service *string `json:"service,omitempty" tf:"service,omitempty"`

	// The source network(s) for the NAT Rule
	// +kubebuilder:validation:Optional
	SourceNetworks []*string `json:"sourceNetworks,omitempty" tf:"source_networks,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyNatRuleTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// The translated network(s) for the NAT Rule
	// +kubebuilder:validation:Optional
	TranslatedNetworks []*string `json:"translatedNetworks,omitempty" tf:"translated_networks,omitempty"`

	// Port number or port range. DNAT only
	// +kubebuilder:validation:Optional
	TranslatedPorts *string `json:"translatedPorts,omitempty" tf:"translated_ports,omitempty"`

	// NAT Type
	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PolicyNatRuleTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyNatRuleTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyNatRuleSpec defines the desired state of PolicyNatRule
type PolicyNatRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyNatRuleParameters `json:"forProvider"`
}

// PolicyNatRuleStatus defines the observed state of PolicyNatRule.
type PolicyNatRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyNatRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyNatRule is the Schema for the PolicyNatRules API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyNatRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.action)",message="action is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.gatewayPath)",message="gatewayPath is a required parameter"
	Spec   PolicyNatRuleSpec   `json:"spec"`
	Status PolicyNatRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyNatRuleList contains a list of PolicyNatRules
type PolicyNatRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyNatRule `json:"items"`
}

// Repository type metadata.
var (
	PolicyNatRule_Kind             = "PolicyNatRule"
	PolicyNatRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyNatRule_Kind}.String()
	PolicyNatRule_KindAPIVersion   = PolicyNatRule_Kind + "." + CRDGroupVersion.String()
	PolicyNatRule_GroupVersionKind = CRDGroupVersion.WithKind(PolicyNatRule_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyNatRule{}, &PolicyNatRuleList{})
}
