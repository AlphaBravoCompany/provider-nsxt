/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyDhcpV6StaticBindingContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type PolicyDhcpV6StaticBindingContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type PolicyDhcpV6StaticBindingObservation struct {

	// Resource context
	Context []PolicyDhcpV6StaticBindingContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// DNS nameservers
	DNSNameservers []*string `json:"dnsNameservers,omitempty" tf:"dns_nameservers,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Domain names
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// IP addresses
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// DHCP lease time in seconds
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// MAC address of the host
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The time interval in seconds, in which the prefix is advertised as preferred
	PreferredTime *float64 `json:"preferredTime,omitempty" tf:"preferred_time,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// segment path
	SegmentPath *string `json:"segmentPath,omitempty" tf:"segment_path,omitempty"`

	// SNTP server IP addresses
	SntpServers []*string `json:"sntpServers,omitempty" tf:"sntp_servers,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyDhcpV6StaticBindingTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyDhcpV6StaticBindingParameters struct {

	// Resource context
	// +kubebuilder:validation:Optional
	Context []PolicyDhcpV6StaticBindingContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// DNS nameservers
	// +kubebuilder:validation:Optional
	DNSNameservers []*string `json:"dnsNameservers,omitempty" tf:"dns_nameservers,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Domain names
	// +kubebuilder:validation:Optional
	DomainNames []*string `json:"domainNames,omitempty" tf:"domain_names,omitempty"`

	// IP addresses
	// +kubebuilder:validation:Optional
	IPAddresses []*string `json:"ipAddresses,omitempty" tf:"ip_addresses,omitempty"`

	// DHCP lease time in seconds
	// +kubebuilder:validation:Optional
	LeaseTime *float64 `json:"leaseTime,omitempty" tf:"lease_time,omitempty"`

	// MAC address of the host
	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// The time interval in seconds, in which the prefix is advertised as preferred
	// +kubebuilder:validation:Optional
	PreferredTime *float64 `json:"preferredTime,omitempty" tf:"preferred_time,omitempty"`

	// segment path
	// +kubebuilder:validation:Optional
	SegmentPath *string `json:"segmentPath,omitempty" tf:"segment_path,omitempty"`

	// SNTP server IP addresses
	// +kubebuilder:validation:Optional
	SntpServers []*string `json:"sntpServers,omitempty" tf:"sntp_servers,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyDhcpV6StaticBindingTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyDhcpV6StaticBindingTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyDhcpV6StaticBindingTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyDhcpV6StaticBindingSpec defines the desired state of PolicyDhcpV6StaticBinding
type PolicyDhcpV6StaticBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyDhcpV6StaticBindingParameters `json:"forProvider"`
}

// PolicyDhcpV6StaticBindingStatus defines the observed state of PolicyDhcpV6StaticBinding.
type PolicyDhcpV6StaticBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyDhcpV6StaticBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyDhcpV6StaticBinding is the Schema for the PolicyDhcpV6StaticBindings API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyDhcpV6StaticBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.macAddress)",message="macAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.segmentPath)",message="segmentPath is a required parameter"
	Spec   PolicyDhcpV6StaticBindingSpec   `json:"spec"`
	Status PolicyDhcpV6StaticBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyDhcpV6StaticBindingList contains a list of PolicyDhcpV6StaticBindings
type PolicyDhcpV6StaticBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyDhcpV6StaticBinding `json:"items"`
}

// Repository type metadata.
var (
	PolicyDhcpV6StaticBinding_Kind             = "PolicyDhcpV6StaticBinding"
	PolicyDhcpV6StaticBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyDhcpV6StaticBinding_Kind}.String()
	PolicyDhcpV6StaticBinding_KindAPIVersion   = PolicyDhcpV6StaticBinding_Kind + "." + CRDGroupVersion.String()
	PolicyDhcpV6StaticBinding_GroupVersionKind = CRDGroupVersion.WithKind(PolicyDhcpV6StaticBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyDhcpV6StaticBinding{}, &PolicyDhcpV6StaticBindingList{})
}
