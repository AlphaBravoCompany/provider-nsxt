/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LogicalRouterCentralizedServicePortObservation struct {

	// Description of this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Logical router port subnet (ipAddress / prefix length)
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Identifier for port on logical switch to connect to
	LinkedLogicalSwitchPortID *string `json:"linkedLogicalSwitchPortId,omitempty" tf:"linked_logical_switch_port_id,omitempty"`

	// Identifier for logical router on which this port is created
	LogicalRouterID *string `json:"logicalRouterId,omitempty" tf:"logical_router_id,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []LogicalRouterCentralizedServicePortTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`

	// Unicast Reverse Path Forwarding mode
	UrpfMode *string `json:"urpfMode,omitempty" tf:"urpf_mode,omitempty"`
}

type LogicalRouterCentralizedServicePortParameters struct {

	// Description of this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// The display name of this resource. Defaults to ID if not set
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// Logical router port subnet (ipAddress / prefix length)
	// +kubebuilder:validation:Optional
	IPAddress *string `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// Identifier for port on logical switch to connect to
	// +kubebuilder:validation:Optional
	LinkedLogicalSwitchPortID *string `json:"linkedLogicalSwitchPortId,omitempty" tf:"linked_logical_switch_port_id,omitempty"`

	// Identifier for logical router on which this port is created
	// +kubebuilder:validation:Optional
	LogicalRouterID *string `json:"logicalRouterId,omitempty" tf:"logical_router_id,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []LogicalRouterCentralizedServicePortTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`

	// Unicast Reverse Path Forwarding mode
	// +kubebuilder:validation:Optional
	UrpfMode *string `json:"urpfMode,omitempty" tf:"urpf_mode,omitempty"`
}

type LogicalRouterCentralizedServicePortTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type LogicalRouterCentralizedServicePortTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// LogicalRouterCentralizedServicePortSpec defines the desired state of LogicalRouterCentralizedServicePort
type LogicalRouterCentralizedServicePortSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LogicalRouterCentralizedServicePortParameters `json:"forProvider"`
}

// LogicalRouterCentralizedServicePortStatus defines the observed state of LogicalRouterCentralizedServicePort.
type LogicalRouterCentralizedServicePortStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LogicalRouterCentralizedServicePortObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalRouterCentralizedServicePort is the Schema for the LogicalRouterCentralizedServicePorts API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type LogicalRouterCentralizedServicePort struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.ipAddress)",message="ipAddress is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.linkedLogicalSwitchPortId)",message="linkedLogicalSwitchPortId is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.logicalRouterId)",message="logicalRouterId is a required parameter"
	Spec   LogicalRouterCentralizedServicePortSpec   `json:"spec"`
	Status LogicalRouterCentralizedServicePortStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LogicalRouterCentralizedServicePortList contains a list of LogicalRouterCentralizedServicePorts
type LogicalRouterCentralizedServicePortList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LogicalRouterCentralizedServicePort `json:"items"`
}

// Repository type metadata.
var (
	LogicalRouterCentralizedServicePort_Kind             = "LogicalRouterCentralizedServicePort"
	LogicalRouterCentralizedServicePort_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LogicalRouterCentralizedServicePort_Kind}.String()
	LogicalRouterCentralizedServicePort_KindAPIVersion   = LogicalRouterCentralizedServicePort_Kind + "." + CRDGroupVersion.String()
	LogicalRouterCentralizedServicePort_GroupVersionKind = CRDGroupVersion.WithKind(LogicalRouterCentralizedServicePort_Kind)
)

func init() {
	SchemeBuilder.Register(&LogicalRouterCentralizedServicePort{}, &LogicalRouterCentralizedServicePortList{})
}
