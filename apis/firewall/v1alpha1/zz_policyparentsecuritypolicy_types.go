/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyParentSecurityPolicyContextObservation struct {

	// Id of the project which the resource belongs to.
	ProjectID *string `json:"projectId,omitempty" tf:"project_id,omitempty"`
}

type PolicyParentSecurityPolicyContextParameters struct {

	// Id of the project which the resource belongs to.
	// +kubebuilder:validation:Required
	ProjectID *string `json:"projectId" tf:"project_id,omitempty"`
}

type PolicyParentSecurityPolicyObservation struct {

	// Category
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Comments for security policy lock/unlock
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// Resource context
	Context []PolicyParentSecurityPolicyContextObservation `json:"context,omitempty" tf:"context,omitempty"`

	// Description for this resource
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The domain name to use for resources. If not specified 'default' is used
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// Indicates whether a security policy should be locked. If locked by a user, no other user would be able to modify this policy
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// NSX ID for this resource
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// Policy path for this resource
	Path *string `json:"path,omitempty" tf:"path,omitempty"`

	// The _revision property describes the current revision of the resource. To prevent clients from overwriting each other's changes, PUT operations must include the current _revision of the resource, which clients should obtain by issuing a GET operation. If the _revision provided in a PUT request is missing or stale, the operation will be rejected
	Revision *float64 `json:"revision,omitempty" tf:"revision,omitempty"`

	// The list of group paths where the rules in this policy will get applied
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// This field is used to resolve conflicts between security policies across domains
	SequenceNumber *float64 `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	// When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed
	Stateful *bool `json:"stateful,omitempty" tf:"stateful,omitempty"`

	// Ensures that a 3 way TCP handshake is done before the data packets are sent
	TCPStrict *bool `json:"tcpStrict,omitempty" tf:"tcp_strict,omitempty"`

	// Set of opaque identifiers meaningful to the user
	Tag []PolicyParentSecurityPolicyTagObservation `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyParentSecurityPolicyParameters struct {

	// Category
	// +kubebuilder:validation:Optional
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// Comments for security policy lock/unlock
	// +kubebuilder:validation:Optional
	Comments *string `json:"comments,omitempty" tf:"comments,omitempty"`

	// Resource context
	// +kubebuilder:validation:Optional
	Context []PolicyParentSecurityPolicyContextParameters `json:"context,omitempty" tf:"context,omitempty"`

	// Description for this resource
	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// Display name for this resource
	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// The domain name to use for resources. If not specified 'default' is used
	// +kubebuilder:validation:Optional
	Domain *string `json:"domain,omitempty" tf:"domain,omitempty"`

	// Indicates whether a security policy should be locked. If locked by a user, no other user would be able to modify this policy
	// +kubebuilder:validation:Optional
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// NSX ID for this resource
	// +kubebuilder:validation:Optional
	NsxID *string `json:"nsxId,omitempty" tf:"nsx_id,omitempty"`

	// The list of group paths where the rules in this policy will get applied
	// +kubebuilder:validation:Optional
	Scope []*string `json:"scope,omitempty" tf:"scope,omitempty"`

	// This field is used to resolve conflicts between security policies across domains
	// +kubebuilder:validation:Optional
	SequenceNumber *float64 `json:"sequenceNumber,omitempty" tf:"sequence_number,omitempty"`

	// When it is stateful, the state of the network connects are tracked and a stateful packet inspection is performed
	// +kubebuilder:validation:Optional
	Stateful *bool `json:"stateful,omitempty" tf:"stateful,omitempty"`

	// Ensures that a 3 way TCP handshake is done before the data packets are sent
	// +kubebuilder:validation:Optional
	TCPStrict *bool `json:"tcpStrict,omitempty" tf:"tcp_strict,omitempty"`

	// Set of opaque identifiers meaningful to the user
	// +kubebuilder:validation:Optional
	Tag []PolicyParentSecurityPolicyTagParameters `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyParentSecurityPolicyTagObservation struct {
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type PolicyParentSecurityPolicyTagParameters struct {

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

// PolicyParentSecurityPolicySpec defines the desired state of PolicyParentSecurityPolicy
type PolicyParentSecurityPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyParentSecurityPolicyParameters `json:"forProvider"`
}

// PolicyParentSecurityPolicyStatus defines the observed state of PolicyParentSecurityPolicy.
type PolicyParentSecurityPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyParentSecurityPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyParentSecurityPolicy is the Schema for the PolicyParentSecurityPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,nsxt}
type PolicyParentSecurityPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.category)",message="category is a required parameter"
	// +kubebuilder:validation:XValidation:rule="self.managementPolicy == 'ObserveOnly' || has(self.forProvider.displayName)",message="displayName is a required parameter"
	Spec   PolicyParentSecurityPolicySpec   `json:"spec"`
	Status PolicyParentSecurityPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyParentSecurityPolicyList contains a list of PolicyParentSecurityPolicys
type PolicyParentSecurityPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyParentSecurityPolicy `json:"items"`
}

// Repository type metadata.
var (
	PolicyParentSecurityPolicy_Kind             = "PolicyParentSecurityPolicy"
	PolicyParentSecurityPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyParentSecurityPolicy_Kind}.String()
	PolicyParentSecurityPolicy_KindAPIVersion   = PolicyParentSecurityPolicy_Kind + "." + CRDGroupVersion.String()
	PolicyParentSecurityPolicy_GroupVersionKind = CRDGroupVersion.WithKind(PolicyParentSecurityPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyParentSecurityPolicy{}, &PolicyParentSecurityPolicyList{})
}
